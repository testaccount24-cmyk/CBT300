         TITLE 'DISPLAY ACTIVE ADDRESS SPACES IN THE SYSTEM'
*--------------------------------------------------------------------*
*
*    FUNCTION:
*
*        DISPLAY ASID'S THAT ARE ACTIVE IN THE SYSTEM.
*        THIS COMMAND, AS NOW CODED, CAN DISPLAY ALL, OR SOME,
*        OF THE SYSTEM'S ACTIVE ASID'S.  (DA - VERSION 2.0)
*
*        MODIFIED FOR Z/OS BY SAM GOLOB.  (JULY 2013)
*           THIS COMMAND USES THE TSO PUTLINE INTERFACE, AND
*           THEREFORE ITS OUTPUT MAY BE SYSOUTTTRAP'ED.
*
*        STATISTIC CODE WAS NOT MODIFIED. (SBG)
*
*      JIM MARSHALL'S REMARKS (FROM 1986)....
*
*        THIS LITTLE GEM WILL SCURRY AROUND THE ASCBS AND CSCBS
*        TO DISPLAY THE JOBS RUNNING IN THE SYSTEM. THROUGH STEALTH,
*        THIS CODE IS NON PRIVILEGED (ASSUMING THAT SQA IS NOT
*        FETCH PROTECTED.  MUCH THANKS TO KEN TRUE OF FAIRCHILD
*        CAMERA AND INSTRUMENT FOR THE CODE DATED 1976.  CONSIDERING
*        THIS IS 1986 AND THE CODE WITH MINOR CHANGES RUNS IN MVS/XA
*        IT IS AMAZING.
*
*        JIM MARSHALL, CAPT, USAF (RET)
*
*    SYNTAX:  (TSO COMMAND)
*
*        DA  (WITH NO PARAMETERS) - SHOWS ALL ASIDS EXCEPT FOR
*                                   FREE INITIATORS
*
*              (THIS DEFAULT CAN BE CHANGED BY ZAPPING THE
*               FIFTH BYTE OF THE PROGRAM (FIELD GETPFLAG).)
*
*              Example:
*
*              //ZAPDA   EXEC PGM=AMASPZAP
*              //SYSUDUMP DD  SYSOUT=*,HOLD=YES
*              //SYSPRINT DD  SYSOUT=*
*              //SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR
*              //SYSIN    DD  *
*               NAME  DA  DA
*               VER   0004   17      JOB ATX TSU STC
*               REP   0004   16      JOB ATX TSU
*              /*
*
*        DA  (WITH PARAMETERS)
*
*            PARAMETER  SHOWS          FLAG SETTING
*            ---------  -----          ------------
*            (NONE)                      X'17'
*              A        ALL ASIDS        X'1F'
*              S        STC  ONLY        X'01'
*              T        TSU  ONLY        X'02'
*              J        JOB  ONLY        X'04'
*              I        INIT ONLY        X'08'
*              X        ATX  ONLY        X'10'
*
*        IF THIS PIECE OF WORK IS A JOB OR ATX RUNNING UNDER
*        AN INITIATOR, AN "I" IS SHOWN IN THE DISPLAY, IN
*        COLUMN 64.
*
*    CHANGE LOG:
*
*            22OCT76 - WORKS FOR MVS REL3.7 AND REQUIRES MACROS FROM
*                      'SYS1.AMODGEN'.  KEN TRUE
*
*            27MAY77 - MODIFIED TO WORK AS TSO CMD OR OPER STC. ALSO
*                      ADD SWAP STATUS AND REASON CODE FROM OUCB
*                      KEN TRUE.
*
*            29APR81 - ALL WTO'S REMOVED AND TPUTS WERE CODED. CODE
*                      MADE REENTRANT.  2LT DENISE CULOTTA, AIR FORCE
*                      DATA SERVICES CENTER, PENTAGON.
*
*            10OCT86 - CLEANED UP CODE TO TAKE OUT HARD CODED
*                      DSECTS IN PREP FOR MVS/XA.                JDMA
*
*            14OCT86 - RUNS NOW IN MVS/XA MODE. LOOK FOR THE
*                      CONDITIONAL ASSEMBLY IF YOU ARE NOT XA.   JDMB
*
*            26JUL13 - ONE PASS THRU THE ASVT, NOT TWO PASSES.   SBG
*            (V-2.0)   GOT IT TO WORK UNDER Z/OS. DISPLAYS ALL
*                      ACTIVE ASID'S.
*
*                      IT IS IMPORTANT TO TALK ABOUT WORK THAT
*                      IS RUNNING UNDER AN INITIATOR.
*
*                      ATX'S ARE NEW. THEY RUN UNDER INITIATORS.
*                      SUBMITTED JOBS ALSO RUN UNDER INITIATORS.
*
*                      JOBS AND ATX'S RUNNING UNDER AN INIT ARE
*                      DISPLAYED WITH THEIR OWN INFORMATION, NOT
*                      THE INIT'S INFORMATION.  AN "I" IS PLACED
*                      NEXT TO THE ASID IF THIS IS A JOB OR ATX
*                      RUNNING UNDER AN INITIATOR.
*
*                      SO HOW DO YOU TELL?
*
*                      IF ASCBJBNI IS NON-ZERO FOR AN INIT, THEN
*                      ASCBJBNI+8 CONTAINS THE ADDRESS OF THE JOB'S
*                      CSCB OR ATX'S CSCB ENTRY WHICH IS RUNNING
*                      UNDER THAT INITIATOR.  WE MUST LOOK AT THAT
*                      CSCB INSTEAD OF THE INITIATOR'S CSCB, IN
*                      ORDER TO GET THE JOB'S INFORMATION OR THE
*                      ATX'S INFORMATION.
*
*                      ADDED PARAMETERS TO LIMIT OUTPUT.
*                      DEFAULT IS TO SHOW STC, TSU, JOB, ATX
*                      AND NOT TO SHOW FREE INITIATORS.
*                      FIFTH BYTE OF THE PROGRAM HAS THE FLAGS
*                      WHICH ARE THE DEFAULT. CAN BE ZAPPED OR
*                      REASSEMBLED TO CHANGE WHAT IS SHOWN.
*
*            08DEC13 - FIXED BUG LOOPING TOO MANY TIMES THRU       SBG
*                      THE ASVT ENTRIES.  SEE BELOW LABEL GETASVT.
*
*--------------------------------------------------------------------*
*        NOW, TO GET TO THE CODE......
*--------------------------------------------------------------------*
*                      DISPLAY VALUES IN HEX
         MACRO                                                          01662
&NAME    HEX   &TO,&LEN,&FROM                                           01663
&NAME    DS    0H                                                       01664
         ST    R6,SAVER6A                                               01665
         STM   R15,R1,HEXSAVE                                           01666
         LA    R1,&FROM                                                 01667
         LA    R0,&LEN                                                  01668
         LA    R15,&TO                                                  01669
         BAL   R6,HEX                                                   01670
         L     R6,SAVER6A                                               01671
         LM    R15,R1,HEXSAVE                                           01672
         MEND                                                           01673
*--------------------------------------------------------------------*
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         YREGS
         GBLB  &MVSXA              1-MVS/XA OR 0-MVS/SP          JDMB
&MVSXA   SETB  1                                                 JDMB
*
DA       CSECT
         AIF   (NOT &MVSXA).SKP1                                 JDMB
DA       AMODE 31
DA       RMODE 24
.SKP1    ANOP                                                    JDMB
         USING DA,R12
         B     BEGINN-*(,R15)
GETPFLAG DC    X'17'               AT FRONT OF PROGRAM FOR EASY ZAP
         DC    C'  DA - Version 2.0 '
         DC    CL18'&SYSDATE &SYSTIME '
BEGINN   DS    0H
         STM   R14,R12,12(R13)
         LR    R12,R15             BASE REGISTER
         LR    R3,R1               SAVE R1 FOR LATER USE
         L     R0,MEMSIZE          ATTRIBUTES FOR GETMAIN
         GETMAIN R,LV=(0)          GET CORE FROM SP=0
         LR    R7,R1               SAVE THE GETMAIN ADDRESS
         USING VARYABL,R7          ESTABLISH ADDRESSABILTY
         LA    R15,SAVEAREA        ADDRESS OF OUR SAVE AREA.
         ST    R13,4(,R15)         BACKWARD SAVE AREA CHAIN.
         ST    R15,8(,R13)         FORWARD SAVE AREA CHAIN.
         LR    R13,R15             POINT R13 TO CURRENT SAVE AREA.
         B     START               BRANCH TO ENTRY CODE.
*
$$EOJ    DS    0H
         CH    R15,=H'16'          IS RETURN CODE HIGHER THAN 16?
         BNH   EOJSK               YES - LETS ZERO R15.
         SR    R15,R15             ZERO OUT REGISTER 15.
EOJSK    DS    0H                 (SAVEAREA HAS TO BE FIRST IN DSECT,
*                                  SO THAT THE PROPER AREA IS FREED.)
         LR    R1,R13              GET SAVEAREA ADDRESS
         L     R0,MEMSIZE          ATTRIBUTES OF GETMAIN
         L     R13,SAVEAREA+4      POINT R13 TO PREVIOUS SAVE AREA.
         FREEMAIN R,A=(1),LV=(0)   DO FREEMAIN
         L     R14,12(,R13)        RESTORE REGISTER 14.
         LM    R0,R12,20(R13)      RESTORE THE REGISTERS.
         BR    R14                 RETURN TO OS.
*
START    DS    0H                  PROGRAM ENTRY POINT.
         ST    R3,SAVPARAM         SAVE INITIAL REGISTER 1
LINKREG  EQU   6                   LINK REGISTER (R6)
*
*---------------------------------------------------------------------*
*              INITIALIZE CONSTANTS IN GETMAINED AREA                 *
*---------------------------------------------------------------------*
INITCON  DS    0H
         MVI   BUFFER,C' '         CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         XC    NMB(NMBL),NMB       ZERO OUT COUNTERS
         MVI   PARMFLAG,X'00'     CLEAR PARM FLAG
         MVI   TYPEFLAG,X'00'     CLEAR TYPE FLAG
         MVI   COMBFLAG,X'00'     CLEAR COMB FLAG
         MVC   SWITCH(1),CSWITCH
         MVC   WRKD(1),CWRKD
         MVC   DDOTS(2),DOTS      MOVE IN CONSTANTS TO #JOBS/
         MVC   DJOBS(6),JOBS      JOBS MESSAGE
         MVC   DATXS(6),ATXS      ATXS MESSAGE
         MVC   DINITIAT(18),INITIAT  UNUSED INITS MESSAGE
         MVC   DDOTS1(2),DOTS     MOVE IN CONSTANTS TO #JOBS/
         MVC   DSTCS(6),STCS      STCS MESSAGE
         MVC   DTSUS(6),TSUS      TSUS MESSAGE
*---------------------------------------------------------------------*
*              SCAN THE COMMAND FOR PARAMETERS                        *
*---------------------------------------------------------------------*
         SLR   R2,R2              CLEAR R2 AS WORK REG FOR NOW
         L     R1,SAVPARAM        GET ORIGINAL PARM
         LTR   R1,R1              ANY CPPL OR PARM POINTER?
         BZ    HAVPARAM           B IF NOT.
         L     R2,0(,R1)          POINT TO BUFFER
         LTR   R2,R2              ANY?
         BZ    HAVPARAM           B IF NOT.
         LH    R3,0(R2)           LOAD LENGTH.
         LTR   R3,R3              ANY?
         BZ    HAVPARAM           B IF NOT.
         CLI   2(R2),X'00'        COMMAND PROCESSOR INVOCATION?
         BE    DAASCP
         LA    R2,2(,R2)          POINT TO PARM.
         B     PARM
DAASCP   DS    0H
         CH    R3,=H'4'           ANY PARM?
         BE    HAVPARAM           B IF NOT.
         AH    R2,2(,R2)          POINT TO ...
         LA    R2,4(,R2)          ... PARM.
PARM     DS    0H
         BAL   R6,GETPARMS        GET ALL PARM SETTINGS
HAVPARAM DS    0H
         SLR   R2,R2              COUNTER FOR # INITIATORS
*---------------------------------------------------------------------*
*   GET BASIC INFORMATION FROM THE ASVT (ADDRESS SPACE VECTOR TABLE)  *
*---------------------------------------------------------------------*
GETASVT  DS    0H
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         DROP  R9
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     We have commented out the following instruction to solve S0C4.
*        A     R5,=F'2'              +2 SO WE CAN SCAN ENTIRE ASVT..
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     The program was S0C4-ing with R5=00000002, so this indicates    *
*     that we ought not increment R5 by 2.  Reason is that we start   *
*     the loop, already pointing to ASID(0001).  That's why we do     *
*     not need an extra two entries.  See label GETXSCB below.        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Found the problem:                                              *
*                                                                     *
*     At label GETXSCB, there is an instruction to load X'210' off    *
*     the ASVT as the starting point for LOOP1.  This already points  *
*     to the ASVT entry for the *MASTER* address space, so we don't   *
*     have to add 2 more entries, to reach the end of the ASVT table. *
*     We have already advanced the 2 entries, at the beginning of     *
*     the search.  Adding 2 more searches runs us past the end of     *
*     the table, (sometimes) causing a S0C4.                          *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LA    R9,ASVTENTY        (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
*---------------------------------------------------------------------*
*        PRINT THE OUTPUT HEADERS FOR THE COMMAND                     *
*---------------------------------------------------------------------*
PRTHEADR DS    0H                 PRINT HEADERS
         LA    R0,MSGL            MSGL IS LENGTH OF MESSAGE
         LA    R1,MSGH            MSGH - MESSAGE "DISPLAY ACTIVE"
         BAL   LINKREG,PUTMSG     DO THE TPUT OF MSGH
         LA    R0,MSGHUL          MSGL IS LENGTH OF MESSAGE
         LA    R1,MSGHU           MSGH - MESSAGE "DISPLAY ACTIVE"
         BAL   LINKREG,PUTMSG     DO THE TPUT OF MSGH
         LA    R0,HEADINGL        HEADING MESSAGE LENGTH
         LA    R1,HEADING         HEADING MESSAGE
         BAL   LINKREG,PUTMSG     WRITE OUT HEADING
         LA    R0,HEADINUL        HEADING UNDERLINE LENGTH
         LA    R1,HEADINU         HEADING UNDERLINE
         BAL   LINKREG,PUTMSG     WRITE OUT HEADING UNDERLINE
*---------------------------------------------------------------------*
*        PRIME THE INITIAL ASCB ENTRY AND CSCB ENTRY FOR ASID=0001    *
*---------------------------------------------------------------------*
GETXSCB  DS    0H                 INITIAL ASCB AND CSCB FOR *MASTER*
         L     R3,16              CVT
         L     R3,X'22C'(,R3)     ASVT
         L     R3,X'210'(,R3)     ASVTENTY
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     This points directly to the ASVT entry for ASID=0001 or         *
*     the *MASTER* address space.  So we don't have to add 2          *
*     to the number of ASVT entries to BCT.  The starting point       *
*     is already 2 entries advanced at the beginning of the loop.     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LR    R8,R3              LOAD ASCB INTO "USING" REGISTER
*                                 SO IT MAPS THIS ASCB.
         L     R3,16              CVT
         L     R3,X'94'(,R3)      CVTMSER (BEGINNING OF CSCB CHAIN)
         L     R3,0(,R3)          FIRST CSCB ENTRY
         LR    R10,R3             LOAD IT INTO "USING" REGISTER
*                                 SO IT MAPS THIS CSCB ENTRY.
         SLR   R3,R3              CLEAR R3 OUT FOR FURTHER USE
*                                  AS A WORK REGISTER.
         USING ASCB,R8
         B     LOOP1A             FIRST ASCB AND CSCB.
*---------------------------------------------------------------------*
*        LOOP THROUGH ALL ASCBS
*---------------------------------------------------------------------*
LOOP1    DS    0H                 CHECK HERE FOR EVERY ACTIVE ASCB.
         L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
         SPACE
LOOP1A   DS    0H                 BUST IN HERE THE FIRST TIME ONLY.
         MVI   UNDRINIT,C' '
* ------------------------------------------------------------------- *
*   ATX AND INIT ARE TWO BITS. THEREFORE IT IS BEST TO CHECK THE      *
*   ENTIRE BYTE WITH A CLI INSTRUCTION AND NOT USE TM.                *
* ------------------------------------------------------------------- *
TESTATX  DS    0H
         CLI   CHTRKID,X'05'      IS IT AN ATX?  (E.G. TCPIP?)
         BNE   TESTINT            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHCLS     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
         BAL   R6,GETTYPE         GET AND COUNT TYPE OF WORK
         HEX   ASIDNO,2,CHASID    GET ASID NUMBER
         TM    COMBFLAG,X'10'     ATX ASKED FOR?
         BO    GETREST            YES. PRINT IT.
         B     NEXTONE            NO. GO TO NEXT ASCB.
* ------------------------------------------------------------------- *
*   ATX'S AND JOBS RUN UNDER INITIATORS.  THEREFORE INITIATOR ASIDS   *
*   HAVE TO BE CHECKED TO SEE IF THEY ARE FREE, OR IF SOME WORK IS    *
*   RUNNING UNDER THEM.  CRITERION IS ASCBJBNI NOT BEING ZERO.        *
*   THEREFORE THE PROCESSING OF INIT'S HERE, IS SPECIAL.              *
* ------------------------------------------------------------------- *
TESTINT  DS    0H
         CLI   CHTRKID,CHINITID   IS IT AN INIT?  (E.G. TCPIP?)
         BNE   TESTTSO            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
* ------------------------------------------------------------------- *
*   TEST ASCBJBNI IF IT EXISTS.  IF SO, THEN A JOB IS RUNNING         *
*   UNDER THIS INITIATOR, AND THE JOB'S CSCB MUST BE DISPLAYED,       *
*   INSTEAD OF THE INITIATOR'S CSCB.  IF A JOB IS RUNNING UNDER       *
*   THE INITIATOR, ITS CSCB IS POINTED TO BY ASCBJBNI+8.              *
*   SAME IS TRUE FOR AN ATX RUNNING UNDER BPXAS (ALSO AN INITIATOR).  *
* ------------------------------------------------------------------- *
         L     R3,ASCBJBNI        IS THIS INITIATOR RUNNING ANY WORK?
         LTR   R3,R3              ZERO IF NO. NON-ZERO IF YES.
         BZ    TESTINT0           NO. NOTHING IS RUNNING UNDER INIT.
         L     R3,8(,R3)          LOAD THE CSCB ENTRY FOR WORK THAT
*                                  IS RUNNING UNDER THIS INITIATOR.
         MVI   UNDRINIT,C'I'      MARK AS "UNDER AN INIT" IN OUTPUT.
         LR    R10,R3             PLUG IN THIS CSCB INSTEAD OF INIT'S.
         BAL   R6,GETTYPE         GET AND COUNT ACTUAL TYPE OF WORK.
         B     TESTINT1           THIS INITIATOR IS RUNNING WORK.
* ------------------------------------------------------------------- *
*   THIS IS A FREE INITIATOR WHICH IS NOT RUNNING ANY WORK.           *
*   THEREFORE MARK IT AS SUCH, AND GET ITS INFORMATION.               *
* ------------------------------------------------------------------- *
TESTINT0 DS    0H                 THIS INITIATOR IS NOT RUNNING WORK.
         BAL   R6,GETTYPE         GET AND COUNT TYPE AS AN INIT.
* ------------------------------------------------------------------- *
*   WHICHEVER CSCB WE ARE DEALING WITH HERE, WE NOW GET THE INFO      *
*   FROM THE REST OF IT.                                              *
* ------------------------------------------------------------------- *
TESTINT1 DS    0H               THE "PROPER" CSCB ENTRY SHOULD BE HERE.
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
         HEX   ASIDNO,2,CHASID    GET ASID NUMBER
         CLI   UNDRINIT,C'I'      RUNNING UNDER AN INITIATOR?
         BE    TESTINT3           YES. DON'T TEST FOR FREE INITS.
* ------------------------------------------------------------------- *
*   AT THIS POINT, WE ARE LOOKING AT A FREE INIT. PRINT ITS INFO...   *
* ------------------------------------------------------------------- *
TESTINT2 DS    0H
         TM    COMBFLAG,X'08'     FREE INIT ASKED FOR?
         BO    GETREST            YES. PRINT IT.
* ------------------------------------------------------------------- *
*   AT THIS POINT, WE ARE LOOKING AT WORK THAT IS RUNNING UNDER       *
*   AN INIT. DETERMINE IF IT IS A JOB OR AN ATX FOR SELECTED          *
*   PRINTING OF ONE TYPE ONLY.                                        *
* ------------------------------------------------------------------- *
TESTINT3 DS    0H
         CLI   UNDRINIT,C'I'      RUNNING UNDER AN INITIATOR?
         BNE   TESTINTX           NO. DON'T PRINT OTHER TYPES.
TESTINT4 DS    0H
         TM    COMBFLAG,X'10'     ATX  ASKED FOR?
         BO    GETREST            YES. PRINT IT.
         TM    COMBFLAG,X'04'     JOB  ASKED FOR?
         BO    GETREST            YES. PRINT IT.
* ------------------------------------------------------------------- *
TESTINTX DS    0H                 FINISHED TESTING THIS INITIATOR.
         B     NEXTONE            GO TO THE NEXT ASCB.
* ------------------------------------------------------------------- *
TESTTSO  DS    0H
         CLI   CHTRKID,CHTSID     IS IT A TSU?
         BNE   TESTJOB            NOPE-> CHECK IF A JOB
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,BLANKS    MOVE IN BLANKS
         MVC   STEPNAME,CHCLS     MOVE IN STEPNAME FROM CSCB
         BAL   R6,GETTYPE         GET AND COUNT TYPE OF WORK
         HEX   ASIDNO,2,CHASID    GET ASID NUMBER
         TM    COMBFLAG,X'02'     TSU ASKED FOR?
         BO    GETREST            YES. PRINT IT.
         B     NEXTONE            NO. GO TO NEXT ASCB.
TESTJOB  DS    0H
         CLI   CHTRKID,CHJOBID    IS IT A JOB?
         BNE   TESTSTC            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
         BAL   R6,GETTYPE         GET AND COUNT TYPE OF WORK
         HEX   ASIDNO,2,CHASID    GET ASID NUMBER
         TM    COMBFLAG,X'04'     JOB ASKED FOR?
         BO    GETREST            YES. PRINT IT.
         B     NEXTONE            NO. GO TO NEXT ASCB.
TESTSTC  DS    0H
         CLI   CHTRKID,CHSASID    IS IT A STC?
         BNE   NEXTONE            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
         BAL   R6,GETTYPE         GET AND COUNT TYPE OF WORK
         HEX   ASIDNO,2,CHASID    GET ASID NUMBER
         TM    COMBFLAG,X'01'     STC ASKED FOR?
         BO    GETREST            YES. PRINT IT.
         B     NEXTONE            NO. GO TO NEXT ASCB.
GETREST  DS    0H
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R0,BUFFERL         LENGTH
         LA    R1,BUFFER          OUTPUT BUFFER
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         SPACE
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     CHKFIN
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    CHKFIN             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
* ------------------------------------------------------------------- *
CHKFIN   DS    0H                 WRITE THE SUMMARY DISPLAY & EXIT.
         TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
* ------------------------------------------------------------------- *
*              PUT ALL THE COUNTS IN THE SUMMARY DISPLAY              *
* ------------------------------------------------------------------- *
         L     R2,NMBINIT         LOAD BINARY VALUE
         CVD   R2,WRKD            CONVERT TO DECIMAL
         MVC   NINIT,=X'402020202120' MOVE IN THE PATTERN
         ED    NINIT,WRKD+5       EDIT THE PATTERN
         XC    WRKD,WRKD
         L     R2,NMBJOBS         LOAD BINARY VALUE
         CVD   R2,WRKD            CONVERT TO DECIMAL
         MVC   NJOBS,=X'402020202120' MOVE IN THE PATTERN
         ED    NJOBS,WRKD+5       EDIT THE PATTERN
         XC    WRKD,WRKD
         L     R2,NMBSTCS         LOAD BINARY VALUE
         CVD   R2,WRKD            CONVERT TO DECIMAL
         MVC   NSTCS,=X'402020202120' MOVE IN THE PATTERN
         ED    NSTCS,WRKD+5       EDIT THE PATTERN
         XC    WRKD,WRKD
         L     R2,NMBTSUS         LOAD BINARY VALUE
         CVD   R2,WRKD            CONVERT TO DECIMAL
         MVC   NTSUS,=X'402020202120' MOVE IN THE PATTERN
         ED    NTSUS,WRKD+5       EDIT THE PATTERN
         XC    WRKD,WRKD
         L     R2,NMBATXS         LOAD BINARY VALUE
         CVD   R2,WRKD            CONVERT TO DECIMAL
         MVC   NATXS,=X'402020202120' MOVE IN THE PATTERN
         ED    NATXS,WRKD+5       EDIT THE PATTERN
         SPACE
*---------------------------------------------------------------------*
*        PRINT THE SUMMARY DISPLAY AT THE END OF EVERYTHING.
*---------------------------------------------------------------------*
         LA    R0,MSG1L
         LA    R1,MSG1
         BAL LINKREG,PUTMSG       SHOVEL IT OUT
         LA    R0,MSG2L
         LA    R1,MSG2
         BAL LINKREG,PUTMSG       SHOVEL IT OUT
         LA    R0,MSG3L
         LA    R1,MSG3
         BAL LINKREG,PUTMSG       SHOVEL IT OUT
*
*---------------------------------------------------------------------*
         B     $$EOJ              RETURN
         SPACE
NOOUTPUT LA    R0,GRIPEL
         LA    R1,GRIPE
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         B     $$EOJ
         EJECT
*---------------------------------------------------------------------*
*        LOCAL SUBROUTINE TO CALC JOB TIME AND CPU TIME.
*        AND GEN SWAP REASON CODES/MEMORY STATUS.
*
*  ENTER  WITH BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*   COMPUTE ELAPSED TRANSACTION TIME (JOB TIME FOR BATCH)
*---------------------------------------------------------------------*
         SPACE
COMPTIME STM   R2,R5,SAVEREGS    SAVE WORK REGS
         SPACE
ELAPSED  L     R2,RMCTPTR        POINTER TO THE RMCT.
         L     R2,X'7C'(,R2)     PICK UP TIME OF DAY FROM RMCT.  (SU)
         L     R3,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R2,72(,R3)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R2,32             MOVE INTO R5 FOR DIVIDE.
         D     R2,=F'1024'       CONVERT TO SECONDS.
         SR    R2,R2             IGNORE REMAINDER.
         D     R2,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R3,WRKD           CONVERT HOURS -
         UNPK  JOBHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    JOBHH+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBHH+2,C':'      SEPARATOR.
         SRDL  R2,32             MOVE REMAINDER OVER FOR DIVIDE.
         D     R2,=F'60'         GET MINUTES.
         CVD   R3,WRKD           CONVERT MINUTES -
         UNPK  JOBMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    JOBMM+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBMM+2,C':'      SEPARATOR.
         CVD   R2,WRKD           REMAINDER IS SECONDS.
         UNPK  JOBSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    JOBSS+1,X'F0'     FIXUP SIGN.
         SPACE
*---------------------------------------------------------------------*
*   COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
*---------------------------------------------------------------------*
         SPACE
CPUSTART LM    R2,R3,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R2,12             CONVERT TO MICRO-SECONDS.
         LM    R4,R5,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R4,12             CONVERT TO MICROSECONDS.
         AR    R3,R5             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R2,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R2,R4             TOTAL CPU TIME (HIGH ORDER).
         D     R2,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R3,R3             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         SLR   R3,R3             OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R3,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*---------------------------------------------------------------------*
*        SWAP  REASON CODE (R8=ASCB,R5=OUCB,R2-6=WORK)
*---------------------------------------------------------------------*
         SPACE
         L     R5,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R5
SRCSTART SR    R2,R2              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R2,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R2,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R2,SRCTABLE(R2)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R2)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE
*---------------------------------------------------------------------*
*        FIND  MEMORY POSITION (R8=ASCB,R5=OUCB,R2-6=WORK)
*---------------------------------------------------------------------*
         SPACE
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE
         LM    R2,R5,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
GETTYPE  DS    0H                 ASSUME CSCB IS ADDRESSABLE HERE
         ST    R6,SAVER6A
         MVI   TYPEFLAG,X'00'     INITIALIZE TYPE FLAG
GETTTSU  DS    0H
         CLI   CHTRKID,CHTSID
         BNE   GETTJOB
         MVC   JOBTYP,=C'TSU '    MARK AS TSU
         L     R2,NMBTSUS         COUNT TSUS
         A     R2,=F'1'
         ST    R2,NMBTSUS
         OI    TYPEFLAG,X'02'
         B     GETTEXIT
GETTJOB  DS    0H
         CLI   CHTRKID,CHJOBID
         BNE   GETTSTC
         MVC   JOBTYP,=C'JOB '    MARK AS JOB
         L     R2,NMBJOBS         COUNT JOBS
         A     R2,=F'1'
         ST    R2,NMBJOBS
         OI    TYPEFLAG,X'04'
         B     GETTEXIT
GETTSTC  DS    0H
         CLI   CHTRKID,CHSASID
         BNE   GETTATX
         MVC   JOBTYP,=C'STC '    MARK AS STC
         L     R2,NMBSTCS         COUNT STCS
         A     R2,=F'1'
         ST    R2,NMBSTCS
         OI    TYPEFLAG,X'01'
         B     GETTEXIT
GETTATX  DS    0H
         CLI   CHTRKID,CHATXID
         BNE   GETTINIT
         MVC   JOBTYP,=C'ATX '    MARK AS ATX
         L     R2,NMBATXS         COUNT ATXS
         A     R2,=F'1'
         ST    R2,NMBATXS
         OI    TYPEFLAG,X'10'
         B     GETTEXIT
GETTINIT DS    0H
         CLI   CHTRKID,CHINITID
         BNE   GETTEXIT
         MVC   JOBTYP,=C'INIT'    MARK AS INIT
         L     R2,NMBINIT         COUNT INITS
         A     R2,=F'1'
         ST    R2,NMBINIT
         OI    TYPEFLAG,X'08'
GETTEXIT DS    0H
         MVI   COMBFLAG,X'00'     INITIALIZE FLAG
         MVC   COMBFLAG,TYPEFLAG  SEE IF THIS LINE SHOULD BE PRINTED
         NC    COMBFLAG,PARMFLAG  BY AND-ING WITH THE PARM IF ON.
         L     R6,SAVER6A
         BR    R6
*.....................................................................*
GETPARMS DS    0H                 0(R2) CONTAINS A PARM
         ST    R6,SAVER6A
         OI    0(R2),C' '         UPPERCASE
GETPSTC  DS    0H
         CLI   0(R2),C'S'         STC?
         BNE   GETPJOB            NO. TEST NEXT ONE.
         OI    PARMFLAG,X'01'     YES. SET FLAG.
         B     GETPEND
GETPJOB  DS    0H
         CLI   0(R2),C'J'         JOB?
         BNE   GETPINIT           NO. TEST NEXT ONE.
         OI    PARMFLAG,X'04'     YES. SET FLAG.
         B     GETPEND
GETPINIT DS    0H
         CLI   0(R2),C'I'         INIT?
         BNE   GETPTSU            NO. TEST NEXT ONE.
         OI    PARMFLAG,X'08'     YES. SET FLAG.
         B     GETPEND
GETPTSU  DS    0H
         CLI   0(R2),C'T'         INIT?
         BNE   GETPATX            NO. TEST NEXT ONE.
         OI    PARMFLAG,X'02'     YES. SET FLAG.
         B     GETPEND
GETPATX  DS    0H
         CLI   0(R2),C'X'         INIT?
         BNE   GETPALL            NO. TEST NEXT ONE.
         OI    PARMFLAG,X'10'     YES. SET FLAG.
         B     GETPEND
GETPALL  DS    0H
         CLI   0(R2),C'A'         INIT?
         BNE   GETPDEF            NO. TEST NEXT ONE.
         OI    PARMFLAG,X'1F'     YES. SET ALL FLAGS.
         B     GETPEND
GETPDEF  DS    0H                 DEFAULT.
         MVC   PARMFLAG,GETPFLAG  YES. SET DEFAULT FLAGS.
GETPEND  DS    0H
         L     R6,SAVER6A
         BR    R6
*.....................................................................*
HEX      DS    0H                                                       05099
         MVC   1(1,R15),0(R1)        Move byte                          05100
         UNPK  0(3,R15),1(2,R15)     Unpack                             05101
         TR    0(2,R15),HEXTAB-240                                      05102
         LA    R15,2(,R15)           Increment output pointer           05103
         LA    R1,1(,R1)             Increment input pointer            05104
         BCT   R0,HEX                Decrement length, then loop        05105
         MVI   0(R15),C' '           Blank the trailing byte            05106
         BR    R6                    Return to caller                   05107
HEXTAB   DC    C'0123456789ABCDEF'   Translate table                    05108
*---------------------------------------------------------------------*
*        LOCAL SUBROUTINE FOR IO TO TSO USER                          *
*---------------------------------------------------------------------*
         SPACE
*---------------------------------------------------------------------*
* PRINT MESSAGE TO TERMINAL POINTED TO BY R1
*
*    BAL  LINKREG,PUTMSG
*---------------------------------------------------------------------*
PUTMSG   DS    0H
         APUT  (1),(0),R           DO THE TPUT
         BR    LINKREG
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         SPACE
BLANKS   DC    CL8' '
DOTS     DC    C'..'
JOBS     DC    C' JOBS '
STCS     DC    C' STCS '
TSUS     DC    C' TSUS '
ATXS     DC    C' ATXS '
INITIAT  DC    C' UNUSED INITIATORS'
CSWITCH  DC    XL1'00'
CWRKD    DC    D'0'
         SPACE
* TERMINAL OUTPUT MESSAGES
MSGH     DC    C'            SYSTEM DISPLAY ACTIVE  (Version 2.0)'
MSGL     EQU   *-MSGH
MSGHU    DC    C'            ------ ------- ------   ------- --- '
MSGHUL   EQU   *-MSGHU
         SPACE
*               XXXXXXXX XXXXXXXX XXXXXXXX XX XXXX XX:XX:XX NNNNN.NN
HEADING  DC    C'JOBNAME  STEPNAME PROCSTEP STATUS STEP-TIME STEP-CPU TX
               YPE ASID I'
HEADINGL EQU   *-HEADING
HEADINU  DC    C'-------  -------- -------- ------ --------- -------- -X
               --- ---- -'
HEADINUL EQU   *-HEADINU
MSG1     DC    C'.. -----------------------------------'
MSG1L    EQU   *-MSG1
         SPACE
GRIPE    DC    C'**NO INITIATORS OR JOBS RUNNING**'
GRIPEL   EQU   *-GRIPE
         SPACE
         DS    0F
MEMSIZE  DC    AL1(0),AL3(VARYABLL)
         SPACE
         EJECT
*.....................................................................*
*        LITERALS                                                     *
*.....................................................................*
         SPACE
         LTORG
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
VARYABL  DSECT
SAVEAREA DS    18F
RMCTPTR  DS    F
SWITCH   DS    X
PARMFLAG DS    X
TYPEFLAG DS    X
COMBFLAG DS    X
*                   STC  -  S  =  X'01'
*                   TSU  -  T  =  X'02'
*                   JOB  -  J  =  X'04'
*                   INIT -  I  =  X'08'
*                   ATX  -  X  =  X'10'
*                   ALL  -  A  =  X'1F'
WRKD     DS    D
SAVEREGS DS    4F
ASCBFRST DS    F
SAVPARAM DS    F
SAVER6A  DS    F                     Save BAL register for HEX macro    06870
HEXSAVE  DS    3F                    Register save for HEX macro        06871
*  KEEP NEXT 5 FULLWORDS TOGETHER
NMB      DS    0F
NMBJOBS  DS    F
NMBSTCS  DS    F
NMBINIT  DS    F
NMBATXS  DS    F
NMBTSUS  DS    F
NMBL     EQU   *-NMB
         SPACE 2
BUFFER   DS    0CL65
JOBNAME  DS    CL8                JOBNAME
         DS    CL1                FILLER
PROCNAME DS    CL8                STEPNAME  OR STEPNAME INVOKING PROC
         DS    CL1
STEPNAME DS    CL8                STEPNAME FOR PROCS
         DS    CL1
MEMSTAT1 DS    CL2
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY STATUS = SWAPPED NS
         DS    CL1
JOBHH    DS    CL2                FOR JOB  TIME HH:MM:SS
         DS    CL1
JOBMM    DS    CL2
         DS    CL1
JOBSS    DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
         DS    CL1
JOBTYP   DS    CL4
         DS    CL1
ASIDNO   DS    CL4
         DS    CL1
UNDRINIT DS    CL1
         DS    CL1
BUFFERL  EQU   *-BUFFER
*
* TERMINAL OUTPUT MESSAGES
MSG2     DS    0CL38
DDOTS    DS    CL2
NJOBS    DS    CL6
DJOBS    DS    CL6
NINIT    DS    CL6
DINITIAT DS    CL18
MSG2L    EQU   *-MSG2
MSG3     DS    0CL38
DDOTS1   DS    CL2
NTSUS    DS    CL6
DTSUS    DS    CL6
NSTCS    DS    CL6
DSTCS    DS    CL6
NATXS    DS    CL6
DATXS    DS    CL6
MSG3L    EQU   *-MSG3
VARYABLL EQU   *-VARYABL
         SPACE
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES,DSECT=YES                         JDMA
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
         AIF   (NOT &MVSXA).SKP2                                 JDMB
         IRAOUCB DSECT=YES
.SKP2    ANOP                                                    JDMB
         AIF   (&MVSXA).SKP3                                     JDMB
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
OUCB     DSECT
OUCBNAME DC    C'OUCB' -           BLOCK IDENTIFICATION
OUCBFWD  DC    A(OUCB) -           SWAP CHAIN FORWARD POINTER
OUCBBCK  DC    A(OUCB) -           SWAP CHAIN BCKWARD POINTER
OUCBTMA  DC    F'0' -              TIME OF LAST ANALYSYS      @Z40BPCH
OUCBQFL  DC    B'00100000' -       SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQU   BIT0 -              TRANSITIONING OUT OF CORE
OUCBGOI  EQU   BIT1 -              TRANSITIONING INTO CORE
OUCBGOB  EQU   BIT2 -              TRANSITIONING BETWEEN STATES
OUCBOFF  EQU   BIT4 -              REQUESTING ENTER WAIT STATE
OUCBOUT  EQU   BIT5 -              REQUESTING ENTER OUT STATE
OUCBSFL  DC    B'10010100' -       SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQU   BIT0 -              NON-SWAPPABLE STATUS
OUCBCTI  EQU   BIT1 -              CTL INHIBITS QUIESCE
OUCBBIB  EQU   BIT2 -              BRING IN FOR CANCEL         @Z40BPCH
OUCBINV  EQU   BIT3 -              =1 IF OUCB IS INVALID       @Z40BPCH
OUCBPVL  EQU   BIT5 -              PRIVILEGED PROGRAM RUNNING
OUCBENQ  EQU   BIT6 -              ENQ RESIDENT STATUS
OUCBSCN  EQU   BIT7 -              SWAP CHAIN TERMINATION MARK
OUCBYFL  DC    B'00000000' -       USER TYPE FLAGS
OUCBPSTE EQU   BIT0 -              POST ERROR @ZA07127
OUCBSTT  EQU   BIT1 -              START CREATED USER
OUCBLOG  EQU   BIT2 -              LOGON CREATED USER
OUCBMNT  EQU   BIT3 -              MOUNT CREATED USER
OUCBR01  EQU   BIT4 -              RESERVED                    @ZM43085
OUCBAXS  EQU   BIT5 -              AUX SHORTAGE FORCED SWAP
OUCBDTA  EQU   BIT6 -              DATA ACCUMULATION IMPACTED
OUCBFXS  EQU   BIT7 -              FIXED STORAGE FORCED SWAP   @Z40BPCH
OUCBAFL  DC    B'00000000' -       ALGORITHM STATUS FLAGS
OUCBAPG  EQU   BIT1 -              APG ALGORITHM APPLICABLE
OUCBRMA  EQU   BIT2 -              RMA ALGORITHM APPLICABLE
OUCBCPL  EQU   BIT3 -              SIGNIFICANT CPU USER FLAG
OUCBJSR  EQU   BIT4 -              JOBSELECT RECEIVED          @Z40BPCH
OUCBR02  EQU   BIT5 -              RESERVED                   @ZM43085
OUCBNWT  EQU   BIT6 -              MSO DETECTED NONSWAPPABLE WAIT
OUCBASW  EQU   BIT7 -              AUTHORIZED FOR DONTSWAP
OUCBTFL  DC    B'00000000' -       TRANSACTION STATUS FLAGS
OUCBATR  EQU   BIT0 -              TRANSACTION IN EXISTENCE
OUCBSTR  EQU   BIT1 -              TRANSACTION START PENDING
OUCBNTR  EQU   BIT2 -              TRANSACTION STOP PENDING
OUCBRTR  EQU   BIT3 -              TRANSACTION RESUME PENDING
OUCBPCH  EQU   BIT4 -              PERF GRP PERIOD CHANGE PENDING
OUCBMAR  EQU   BIT5 -              ACTIVITY RECORDING SUBTRACT FLAG
OUCBINP  EQU   BIT6 -              INITIATOR ATTACH PENDING
OUCBINC  EQU   BIT7 -              INITIATOR ATTACH CURRENT
OUCBEFL  DC    B'00000000' -       EVENT STATUS FALGS
OUCBLWT  EQU   BIT0 -              LONG WAIT STATUS
OUCBTRM  EQU   BIT1 -              TERMINAL WAIT STATUS
OUCBOWT  EQU   BIT2 -              OUTPUT TERMINAL WAIT
OUCBCIM  EQU   BIT3 -              COMPOSITE INPUT MESSAGE
OUCBNQF  EQU   BIT4 -              ENQHOLD EVENT PROCESSED
OUCBQSS  EQU   BIT5 -              QSCEST  EVENT PROCESSED
OUCBQSC  EQU   BIT6 -              QSCECMP EVENT PROCESSED
OUCBMWT  EQU   BIT7 -              MSO DETECTED WAIT STATUS
OUCBNQC  DC    HL1'0' -            NO. OF OUTSTANDING ENQHOLDS
OUCBUFL  DC    B'00000000' -       USER TYPE FLAGS             @ZM43072
OUCBJSFS EQU   BIT0 -              JOB SELECT DELAYED          @ZM43072
OUCBJSAS EQU   BIT1 -              JOB SELECT DELAYED          @ZM43072
OUCBNPG  DC    HL1'0' -            NEW PERFORMANCE GROUP NUMBER
OUCBRPG  DC    HL1'0' -            RESET PERFORMANCE GROUP NUMBER
OUCBNDP  DC    HL1'0' -            NEW ASCB DISPATCHING PRIORITY
OUCBRDP  DC    HL1'0' -            REAL DISPATCHING PRIORITY   @Z40BPCH
OUCBSPG  DC    HL1'0' -            SPECIFIED PERFORMANCE GROUP @Z40BPCH
OUCBR30  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBR40  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBPGP  DC    HL1'12' -           CURRENT WPGP OFFSET IN WPGD
OUCBWMG  DC    H'0' -              WPGD OFFSET IN WPGD TABLE
OUCBDMO  DC    H'0' -              OFFSET INTO DOMAIN TABLE    @Z40BPCH
OUCBDMN  DC    HL1'0'              DOMAIN NUMBER               @Z40BPCH
OUCBSRC  DC    HL1'0'              SWAP OUT REASON CODE        @Z40BPCH
OUCBSWC  DC    H'0' -              TRANSACTION SWAP COUNT
OUCBASCB DC    A(0) -              ASCB ADDRESS
OUCBIMCB DC    A(0) -              IMCB ADDRESS
OUCBTMW  DC    F'0' -              WLM INTERVAL START TIME
OUCBWMS  DC    F'0' -              INTERVAL SERVICE ACCUMULATOR
OUCBCPU  DC    F'0' -              INTERVAL CPU SERVICE ACCUM  @Z40BPCH
OUCBIOC  DC    F'0' -              INTERVAL I/O SERVICE ACCUM  @Z40BPCH
OUCBMSO  DC    F'0' -              INTERVAL MSO SERVICE ACCUM  @Z40BPCH
OUCBTMS  DC    F'0' -              TIME OF LAST SWAP ACTION
OUCBTMO  DC    F'0' -              TRANSACTION START TIME
OUCBPSO  DC    H'0' -              PAGES SWAPPED AT LAST SWAP-OUT
OUCBWSS  DC    H'0' -              WORKING SET SIZE AT SWAP-IN
OUCBACT  DC    A(0) -              ACTION QUEUE FORWARD POINTER
OUCBCSW  DS    0F -                COMPARE AND SWAP FIELD NAME
OUCBACN  DC    2B'00000000' -      DEFERRED ACTION FLAGS
OUCBCFL  DC    B'00000000' -       MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQU   BIT0 -              USERRDY EVENT RECEIVED
OUCBRSM  EQU   BIT1 -              RSM SERVICE OUTSTANDING
OUCBCMRV DC    F'0' -              COMPOSITE RECOM VALUE       @Z40BPCH
OUCBWMR  DC    F'0' -              WLM RECOMMENDATION VALUE    @Z40BPCH
OUCBIRV  DC    H'0' -              IOM RECOMMENDATION VALUE    @Z40BPCH
OUCBCRV  DC    H'0' -              CPM RECOMMENDATION VALUE    @Z40BPCH
OUCBIOR  DC    H'0' -              I/O USAGE PROFILE
OUCBR03  DC    H'0' -              RESERVED                    @ZM43085
OUCBTMP  DC    F'0' -              PERF GRP PERIOD STARTING TIME
OUCBR04  DC    H'0' -              RESERVED                    @ZM43085
OUCBR05  DC    H'0' -              RESERVED                    @ZM43085
OUCBPSS  DC    D'0' -              CPU PAGE SECONDS            @Z40BPCH
OUCBPS1  EQU   OUCBPSS -           HIGH WORD PAGE SECONDS      @Z40BPCH
OUCBPS2  EQU   OUCBPSS+4 -         LOW  WORD PAGE SECONDS      @Z40BPCH
OUCBPST  DC    F'0' -              TIME OF LAST WORKING SET CHANGE
*                                                              @Z40BPCH
OUCBTCP  DC    F'0' -              TIME OF CPU USAGE EVALUATION
*                                                              @Z40BPCH
OUCBTIO  DC    F'0' -              TIME OF I/O USAGE EVALUATION
*                                                              @Z40BPCH
OUCBNDS  DC    H'1' -              NUM OUTSTANDING DONTSWAPS   @Z40BPEB
OUCBR90  DC    H'0' -              RESERVED                    @Z40BPEB
OUCBEND  DS    0D -                END OF OUCB
OUCBLEN  EQU   OUCBEND-OUCB -      LENGTH OF OUCB
.SKP3    ANOP                                                    JDMB
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
