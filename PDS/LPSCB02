         TITLE '   L P S C B     '
************************************************************
*        'LPSCB' OR 'LIST PROTECTED STEP CONTROL BLOCK'    *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. OCTOBER 19 1979.
*        DATE UPDATED. MAY 10, 1995   SAM GOLOB
*                      NOV 23, 2016   SAM GOLOB
*        ATTRIBUTES. RE-ENTRANT.
*        COMMENTS.
*            THIS TSO COMMAND LISTS THE PSCB ON THE TERMINAL.
*        CHANGE LOG:
*           JDM - JIM MARSHALL
*           SBG - SAM GOLOB
*
*     JDM    02APR91 - ADDED DSECTS TO REPLACE HARDCODED OFFSETS JDM1
*     SBG    09MAY95 - COMPLETED DISPLAY OF UPT, ADDED DISPLAY OF ECT.
*                      ADDED KEYWORDS:  ECT, ALL.  FIXED ERROR
*                      IN THE PROCESSING OF KEYWORD:  REAL.          .
*     SBG    10MAY95 - LOOKED AT MVS/370 MACROS AND FOUND THAT THE
*                      UPT IS SHORTER THERE.  CORRECTED CODING SO IT
*                      CAN ASSEMBLE UNDER MVS/370 MACROS OR LATER.
*                      ALSO PUT IN CONDITIONAL ASSEMBLY:  &SYSLVL.
*                      IF YOU ARE NOT AT TSO/E VERSION 2, INVESTIGATE
*                      THE UPT DISPLAY AT LABEL "DOUPT".
*     SBG    23NOV16 - IKJECT MACRO ADDED A NEW FIELD UPTSWS2 IN
*                      Z/OS 1.8.  IF ASSEMBLING ON A BACKLEVEL
*                      SYSTEM (Z/OS 1.7 OR BELOW), UNCOMMENT THE
*                      UPTSWS2 DEFINITION NEAR LABEL "UNCOMENT".
*     SBG    23NOV16 - INTERPRET PSCBLTIM (LOGON DATE AND TIME)
*                      USING THE TODCNVRT PROGRAM, WHICH NOW HAS
*                      TO BE AVAILABLE TO THIS PROGRAM.  WE ASSEMBLE
*                      AND LINKEDIT THEM TOGETHER.
*
         SPACE
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   14,HEX
         MEND
         SPACE
         MACRO
&NAME    MSGZ  &AREA,&LEN
         LA    1,&AREA
         LA    0,&LEN
         BAL   R14,PUTLINE
         MVC   LINE,LINE-1
         MEND
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         GBLC  &SYSLVL
&SYSLVL  SETC  'ESA'                 370 OR ESA ?
*                                    SET ESA FOR TSO/E VERSION 2
*                                    SET 370 FOR MVS/370.
*   LOOK AT YOUR LEVEL OF IKJUPT TO SEE HOW MUCH CAN DISPLAY.
*   SEE BELOW LABEL :    DOUPT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         PRINT ON,NOGEN                                          JDM1
LPSCB    AMODE 24                                                JDM1
LPSCB    RMODE 24                                                JDM1
LPSCB    CSECT                                                   JDM1
         USING *,R12
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'LPSCB '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LR    R2,R1               PARM POINTER
         USING CPPL,R2
         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH
         GETMAIN R,LV=(0)
         LR    R9,R1               INITIALIZE WORKAREA POINTER
         USING @DATA,R9
         SPACE 1
         ST    R13,4(,R9)          CHAIN SAVEAREA
         ST    R9,8(,R13)          CHAIN SAVEAREA
         LR    R13,R9              UPDATE SAVEAREA POINTER
         SPACE
         MVI   LINE-1,C' '
         XC    LINKAREA(8),LINKAREA
         L     R0,=V(TODCNVRT)     ENTRY PT OF TODCNVRT PROGRAM
         ST    R0,ENTRY            SAVE ITS ENTRY POINT
         SPACE
************************************************************
*        SET UP IOPL FOR PUTLINE                           *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
         L     R15,CVTPTR          POINT TO CVT                  JDM1
         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1
         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1
         DROP  R15                                               JDM1
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
         SPACE 1
************************************************************
*        SET UP PPL FOR PARSE                              *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(MYPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R13,PPLUWA
         DROP  R15
         SPACE 1
************************************************************
*        CALL THE PARSE SERVICE ROUTINE                    *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         L     R15,CVTPTR          POINT TO CVT                  JDM1
         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1
         TM    CVTPARS,X'80'       IF HI ORDER BIT NOT ON        JDM1
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,CVTPARS         CVTPARS                       JDM1
         DROP  R15                                               JDM1
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK DS    0H
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT DS    0H
         SPACE 1
         LTR   R15,R15
         BNZ   EXIT12
         L     R3,MYANS
         USING IKJPARMD,R3
         L     R4,CPPLPSCB
         CLI   ALLKW+1,1           'ALL SPECIFIED'
         BE    GOTPSCB
         CLI   REALKW+1,2          'REAL' SPECIFIED
         BNE   GOTPSCB             NO, BRANCH
         L     R1,CVTPTR           YES, FIND PSCB VIA JSCB       JDM1
         USING CVTMAP,R1           GET ADDRESSABILITY            JDM1
         L     R1,CVTTCBP          POINT TO NEW TCB WORD         JDM1
         L     R1,4(,R1)           POINT TO OLD TCB WORD         JDM1
         DROP  R1                                                JDM1
         USING TCB,R1              ADDRESSABILITY TO TCB         JDM1
         L     R1,TCBJSCB          GET JSCB ADDRESS              JDM1
         DROP  R1                                                JDM1
         USING IEZJSCB,R1          GET ADDRESSABILITY            JDM1
         L     R1,JSCBPSCB         GET JSCB ADDRESS              JDM1
         DROP  R1                                                JDM1
         LTR   R4,R1               IS THERE A PSCB
         BZ    EXIT12              NO, BRANCH
*
GOTPSCB  DS    0H                  FORMAT PSCB LAYOUT
         USING PSCB,R4
         MVC   LINE,LINE-1
         ST    R4,ADDRESS
         HEX   LINE,3,ADDRESS+1
         MVC   LINE+7(L'MSG01),MSG01
         MSGZ  LINE,L'MSG01+7
         MVC   LINETXT,TEXTUSER
         HEX   LINEX,7,PSCBUSER
         MVC   LINEC(7),PSCBUSER
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTUSRL
         HEX   LINEX,1,PSCBUSRL
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTGPNM
         HEX   LINEX,8,PSCBGPNM
         CLI   PSCBGPNM,0
         BE    *+10
         MVC   LINEC(8),PSCBGPNM
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTATR1
         HEX   LINEX,2,PSCBATR1
         LA    R15,LINEC
         LA    R1,PSCBATR1
         TM    0(R1),PSCBCTRL
         BZ    *+14
         MVC   0(4,R15),=C'OPER'
         LA    R15,5(,R15)
         TM    0(R1),PSCBACCT
         BZ    *+14
         MVC   0(4,R15),=C'ACCT'
         LA    R15,5(,R15)
         TM    0(R1),PSCBJCL
         BZ    *+14
         MVC   0(3,R15),=C'JCL'
         LA    R15,4(,R15)
         TM    0(R1),PSCBCNAU
         BZ    *+14
         MVC   0(4,R15),=C'CONS'
         LA    R15,5(,R15)
         TM    0(R1),PSCBVMNT                                    JDM1
         BZ    *+14
         MVC   0(5,R15),=C'MOUNT'
         LA    R15,6(,R15)
*        LA    R15,1(,R15)
         TM    0(R1),PSCBATTN                                    JDM1
         BZ    *+14
         MVC   0(10,R15),=C'LINE(ATTN)'
         LA    R15,11(,R15)
         TM    0(R1),PSCBRCVR                                    JDM1
         BZ    *+14
         MVC   0(7,R15),=C'RECOVER'
         LA    R15,8(,R15)
         TM    0(R1),PSCBRRBA
         BZ    *+14
         MVC   0(4,R15),=C'RRBA'
         LA    R15,5(,R15)
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTATR2
         HEX   LINEX,2,PSCBATR2
         BAL   R8,MSG
         SPACE
* ------------------------------------------------------------- *
*     PSCBLTIM IS THE TIME OF LAST LOGON IN STCK FORMAT.        *
*      (IMPOSSIBLE FOR NORMAL MORTALS TO FIGURE OUT.)           *
* ------------------------------------------------------------- *
TODFORMT DS    0H                      CONVERT 8-BYTE LOGON TIME
*                                      TO SOMETHING READABLE.
         MVI   TIMEFMT-1,X'40'         BLANK OUTPUT LINE
         MVC   TIMEFMT,TIMEFMT-1
         MVC   CLOCK(8),=XL8'00'
         MVC   CLOCK(4),PSCBLTIM
         L     R15,16                  CVT
         L     R15,X'130'(,R15)        TIME ZONE OFFSET - CVTTZ
         ST    R15,TIMEZONE            SAVE IT FOR TODCNVRT CALL
         SPACE
         MVI   ANSWER,C' '             CLEAR TODCNVRT ANSWER AREA
         MVC   ANSWER+1(L'ANSWER-1),ANSWER
*
         MVI   OPTION,1
*                  FIVE PARAMETERS  -  LOAD PARAM LIST FOR TODCNVRT
         LA    R1,PARAM                POINT TO PARAM LIST AND LOAD IT
         LA    R15,TIMEZONE
         ST    R15,0(,R1)              TIME ZONE
         LA    R15,CLOCK
         ST    R15,4(,R1)              STCK VALUE
         LA    R15,ANSWER
         ST    R15,8(,R1)              ANSWER PLACE
         LA    R15,=X'01'
         ST    R15,12(,R1)             OPTION
         LA    R15,WORKA
         ST    R15,16(,R1)             ADDRESS OF WORK AREA
*
         L     R15,ENTRY               LOAD TODCNVRT ENTRY POINT
         BALR  R14,R15                 CALL TODCNVRT AND THEN....
*                                      FORMAT THE ANSWER FOR DISPLAY
         MVC   TIMEFMT(4),ANSWER       FIX TIME SO IT IS READABLE
         MVI   TIMEFMT+4,C'.'
         MVC   TIMEFMT+5(3),ANSWER+4
         MVC   TIMEFMT+10(15),ANSWER+7
         MVI   TIMEFMT+12,C':'
         MVC   LINETXT,TEXTLTIM        MOVE IN TEXT MESSAGE
         HEX   LINEX,8,PSCBLTIM        PRINT TIME IS STCK FORMAT,
         MVC   LINEX+17(25),TIMEFMT    THEN DISPLAY READABLE TIME.
         BAL   R8,MSG
* ---------------------------------------------------------------
*                                      AND DISPLAY REST OF PSCB.
         MVC   LINETXT,TEXTSUBH
         HEX   LINEX,1,PSCBSUBH
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTSUBC
         HEX   LINEX,1,PSCBSUBC
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTSUBM
         HEX   LINEX,1,PSCBSUBM
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTSOUT
         HEX   LINEX,1,PSCBSOUT
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTRESV
         HEX   LINEX,1,PSCBSOUT+1
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTDRBA
         HEX   LINEX,3,PSCBDRBA
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTRESR
         HEX   LINEX,4,PSCBDRBA+3
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTDEST
         HEX   LINEX,8,PSCBDEST
         CLI   PSCBDEST,0
         BE    *+10
         MVC   LINEC(8),PSCBDEST
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTRLGB
         HEX   LINEX,4,PSCBRLGB
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTUPT
         HEX   LINEX,4,PSCBUPT
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTUPTL
         HEX   LINEX,2,PSCBUPTL
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTCHAR
         HEX   LINEX,1,PSCBCHAR
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTLINE
         HEX   LINEX,1,PSCBLINE
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTRSZ
         HEX   LINEX,4,PSCBRSZ
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTU
         HEX   LINEX,8,PSCBU
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTEXWD
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTEXK
         HEX   LINEX,4,PSCBEXK
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTEXL
         HEX   LINEX,4,PSCBEXL
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTEXD
         HEX   LINEX,4,PSCBEXD
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTRSVD
         HEX   LINEX,20,PSCBEXD+4
         BAL   R8,MSG
         SPACE
         CLI   UPTKW+1,1           'UPT' SPECIFIED
         BNE   NOUPT               NO, BRANCH
DOUPT    L     R5,CPPLUPT
         ST    R5,UPTADDRC         UPT FROM CPPL
         L     R5,PSCBUPT
         ST    R5,UPTADDR          UPT FROM PSCB
         HEX   LINE,3,UPTADDR+1
         MVC   LINE+7(L'MSG02),MSG02
         MSGZ  LINE,L'MSG02+7
         HEX   LINE,3,UPTADDRC+1
         MVC   LINE+7(L'MSG02A),MSG02A
         MSGZ  LINE,L'MSG02A+7
         USING UPT,R5
         MVC   LINETXT,TEXTPUP1
         HEX   LINEX,2,UPT
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTPUP2
         HEX   LINEX,10,UPTUSER
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTPUP3
         HEX   LINEX,1,UPTSWS
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTPUP4
         HEX   LINEX,1,UPTCDEL
         BAL   R8,MSG
         SPACE
         MVC   LINETXT,TEXTPUP5
         HEX   LINEX,1,UPTLDEL
         BAL   R8,MSG
         MVC   LINETXT,TEXTPUP6
         HEX   LINEX,1,UPTLDEL+1    UPTVERS - CODED FOR MVS/370
         BAL   R8,MSG
         MVC   LINETXT,TEXTPUP7
         HEX   LINEX,7,UPTPREFX
         MVC   LINEC(7),UPTPREFX
         BAL   R8,MSG
         MVC   LINETXT,TEXTPUP8
         HEX   LINEX,1,UPTPREFL
         BAL   R8,MSG
         AIF   ('&SYSLVL' EQ '370').UPT370
*  NOTE - IMPORTANT - IF YOU ARE ASSEMBLING UNDER MVS/370 PLEASE
*                     COMMENT OUT ALL 'UPT' STATEMENTS BELOW, TO
*                     THE CORRESPONDING NOTE.  (ALL STATEMENTS BETWEEN)
*    -  AT THAT LEVEL, THE UPT WAS SHORTER - - - - - - -    *
*    OR SETC &SYSLVL TO '370' BEFORE ASSEMBLING. - - - -    *
         MVC   LINETXT,TEXTPUP9
         HEX   LINEX,3,UPTPLANG
         MVC   LINEC(3),UPTPLANG
         BAL   R8,MSG
         MVC   LINETXT,TEXTPU10
         HEX   LINEX,3,UPTSLANG
         MVC   LINEC(3),UPTSLANG
         BAL   R8,MSG
         MVC   LINETXT,TEXTPU11
         HEX   LINEX,2,UPTLNGFL
         BAL   R8,MSG
UNCOMENT DS    0H                  UNCOMMENT NEXT LINE ASSEMBLING
*UPTSWS2  EQU   UPTLNGFL+2,1       ON Z/OS 1.7 AND BELOW.
         MVC   LINETXT,TEXTPU12
         HEX   LINEX,1,UPTSWS2
         BAL   R8,MSG
* -------------------------------------- *
*  UPTSWS2 DEFINED Z/OS 1.8 AND LATER    *
*  BUT IF YOU ARE ASSEMBLING WITH        *
*  AN EARLIER SYSTEM, YOU MAY GET        *
*  AN ERROR, BECAUSE THE NAME UPTSWS2    *
*  IS NOT DEFINED IN MACRO IKJUPT ON     *
*  THOSE SYSTEMS. SO WE DEFINE IT HERE.  *
* -------------------------------------- *
         MVC   LINETXT,TEXTPU13
         HEX   LINEX,10,UPTSWS2+1
         BAL   R8,MSG
         MVC   LINETXT,TEXTPU14
         HEX   LINEX,10,UPTSWS2+11
         BAL   R8,MSG
         MVC   LINETXT,TEXTPU15
         HEX   LINEX,3,UPTSWS2+21
         BAL   R8,MSG
*  NOTE - IMPORTANT - IF YOU ARE ASSEMBLING UNDER MVS/370 PLEASE
*                     COMMENT OUT ALL UPT STATEMENTS ABOVE FROM
*                     THE CORRESPONDING NOTE.  (ALL STATEMENTS BETWEEN)
*    -  AT THAT LEVEL, THE UPT WAS SHORTER - - - - - - -    *
.UPT370  ANOP
         DROP  R5
         CLI   ALLKW+1,1           'ALL SPECIFIED'
         BE    DOECT               DON'T TEST FOR ECT PARAMETER
         B     TRYECT
NOUPT    CLI   ALLKW+1,1           'ALL SPECIFIED'
         BE    DOUPT
TRYECT   CLI   ECTKW+1,1           'ECT' SPECIFIED
         BNE   NOECT               NO, BRANCH
DOECT    L     R5,CPPLECT           GET ECT ADDRESS
         ST    R5,ECTADDR           PUT IT AWAY FOR MSG
         HEX   LINE,3,ECTADDR+1
         MVC   LINE+7(L'MSG03),MSG03
         MSGZ  LINE,L'MSG03+7
         USING ECT,R5
         MVC   LINETXT,TEXTECT1
         HEX   LINEX,1,ECTRCDF
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT2
         HEX   LINEX,3,ECTRTCD
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT3
         HEX   LINEX,4,ECTIOWA
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT4
         HEX   LINEX,1,ECTMSGF
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT5
         HEX   LINEX,3,ECTSMSG
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT6
         HEX   LINEX,8,ECTPCMD
         MVC   LINEC(7),ECTPCMD
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT7
         HEX   LINEX,8,ECTSCMD
         MVC   LINEC(7),ECTSCMD
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT8
         HEX   LINEX,1,ECTSWS
         BAL   R8,MSG
         MVC   LINETXT,TEXTECT9
         HEX   LINEX,3,ECTDDNUM
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC10
         HEX   LINEX,4,ECTUSER
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC11
         HEX   LINEX,4,ECTBKPB
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC12
         HEX   LINEX,1,ECTSWS2
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC13
         HEX   LINEX,1,ECTSWS22
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC14
         HEX   LINEX,2,ECTSWS22+1
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC15
         HEX   LINEX,4,ECTHELP
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC16
         HEX   LINEX,4,ECTHELP+4      ECTENVBK - CODED HERE FOR MVS/370
         BAL   R8,MSG
         MVC   LINETXT,TEXTEC17
         HEX   LINEX,4,ECTHELP+8      ECTEXTPR - CODED HERE FOR MVS/370
         BAL   R8,MSG
NOECT    B     EXIT0
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
MSG      LA    R1,LINE
         LA    R0,72
         BAL   R14,PUTLINE
         MVC   LINE,LINE-1
         BR    R8
         SPACE
************************************************************
*        PUTMSG ROUTINE                                    *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE
************************************************************
*        PUTLINE ROUTINE                                   *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE 1
EXIT0    SR    R15,R15             RETURN CODE ZERO
         B     EXIT
EXIT12   LA    R15,12              RETURN CODE 12
EXIT     LR    R2,R15              SAVE RETURN CODE
EXITX    LR    R15,R2              RESTORE RETURN CODE
         LR    R1,R13              POINT R1 TO AREA TO BE FREED
         L     R0,@SIZE            SUBPOOL AND LENGTH
         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA
         ST    R15,16(,R13)        STORE RETURN CODE FOR LM
         FREEMAIN R,A=(1),LV=(0)
         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC
         BR    14                  RETURN
         SPACE
************************************************************
*        CONSTANTS                                         *
************************************************************
         SPACE
         LTORG
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
         DS    0F
MSG01    DC    C'PSCB ADDRESS'
MSG02    DC    C'UPT FROM PSCB   '
MSG02A   DC    C'UPT FROM CPPL   '
MSG03    DC    C'ECT ADDRESS '
TEXTUSER DC    C'    +0  PSCBUSER'
TEXTUSRL DC    C'    +7  PSCBUSRL'
TEXTGPNM DC    C'    +8  PSCBGPNM'
TEXTATR1 DC    C'   +10  PSCBATR1'
TEXTATR2 DC    C'   +12  PSCBATR2'
TEXTLTIM DC    C'   +14  PSCBLTIM'
TEXTSUBH DC    C'   +1C  PSCBSUBH'
TEXTSUBC DC    C'   +1D  PSCBSUBC'
TEXTSUBM DC    C'   +1E  PSCBSUBM'
TEXTSOUT DC    C'   +1F  PSCBSOUT'
TEXTRESV DC    C'   +20  RESERVED'
TEXTDRBA DC    C'   +21  PSCBDRBA'
TEXTRESR DC    C'   +24  RESERVED'
TEXTDEST DC    C'   +28  PSCBDEST'
TEXTRLGB DC    C'   +30  PSCBRLGB'
TEXTUPT  DC    C'   +34  PSCBUPT '
TEXTUPTL DC    C'   +38  PSCBUPTL'
TEXTCHAR DC    C'   +3A  PSCBCHAR'
TEXTLINE DC    C'   +3B  PSCBLINE'
TEXTRSZ  DC    C'   +3C  PSCBRSZ '
TEXTU    DC    C'   +40  PSCBU   '
TEXTEXWD DC    C'   +48  PSCBEXWD'
TEXTEXK  DC    C'   +48  PSCBEXK '
TEXTEXL  DC    C'   +4C  PSCBEXL '
TEXTEXD  DC    C'   +50  PSCBEXD '
TEXTRSVD DC    C'   +54  RESERVED'
TEXTPUP1 DC    C'    +0  UPTLEN  '
TEXTPUP2 DC    C'    +2  UPTUSER '
TEXTPUP3 DC    C'    +C  UPTSWS  '
TEXTPUP4 DC    C'    +D  UPTCDEL '
TEXTPUP5 DC    C'    +E  UPTLDEL '
TEXTPUP6 DC    C'    +F  UPTVERS '
TEXTPUP7 DC    C'   +10  UPTPREFX'
TEXTPUP8 DC    C'   +17  UPTPREFL'
TEXTPUP9 DC    C'   +18  UPTPLANG'
TEXTPU10 DC    C'   +1B  UPTSLANG'
TEXTPU11 DC    C'   +1E  UPTLNGFL'
TEXTPU12 DC    C'   +20  UPTSWS2 '
TEXTPU13 DC    C'   +21  RESERVE1'
TEXTPU14 DC    C'   +2A  RESERVE2'
TEXTPU15 DC    C'   +34  RESERVE3'
TEXTECT1 DC    C'    +0  ECTRCDF '
TEXTECT2 DC    C'    +1  ECTRTCD '
TEXTECT3 DC    C'    +4  ECTIOWA '
TEXTECT4 DC    C'    +8  ECTMSGF '
TEXTECT5 DC    C'    +9  ECTSMSG '
TEXTECT6 DC    C'    +C  ECTPCMD '
TEXTECT7 DC    C'   +14  ECTSCMD '
TEXTECT8 DC    C'   +1C  ECTSWS  '
TEXTECT9 DC    C'   +1D  ECTDDNUM'
TEXTEC10 DC    C'   +20  ECTUSER '
TEXTEC11 DC    C'   +24  ECTBKPB '
TEXTEC12 DC    C'   +28  ECTSWS2 '
TEXTEC13 DC    C'   +29  ECTSWS22'
TEXTEC14 DC    C'   +2A  RESERVED'
TEXTEC15 DC    C'   +2C  ECTHELP '
TEXTEC16 DC    C'   +30  ECTENVBK'
TEXTEC17 DC    C'   +34  ECTEXTPR'
         SPACE
************************************************************
*        PARSE PCL                                         *
************************************************************
         SPACE
         PRINT GEN
MYPCL    IKJPARM
REALKW   IKJKEYWD
         IKJNAME 'CPPL'
         IKJNAME 'REAL'
UPTKW    IKJKEYWD
         IKJNAME 'UPT'
ECTKW    IKJKEYWD
         IKJNAME 'ECT'
ALLKW    IKJKEYWD
         IKJNAME 'ALL'
         IKJENDP
         PRINT GEN
         SPACE
************************************************************
*        DSECTS                                            *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
DOUBLE   DS    D                   DOUBLEWORD WORK AREA
LINKAREA DS    2F
ADDRESS  DS    F
UPTADDR  DS    F                   UPT FROM PSCB
UPTADDRC DS    F                   UPT FROM CPPL
ECTADDR  DS    F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
LINEB    DS    C                   LINE-1
LINE     DS    CL120
LINETXT  EQU   LINE,16
LINEX    EQU   LINE+17
LINEC    EQU   LINE+34
ENTRY    DS    F                1  LOADED ENTRY POINT OF TODCNVRT
PARAM    DS    5F               2  PARAMETER LIST FOR TODCNVRT PROGRAM
CLOCK    DS    D                3  TARGET AREA OF STCK INSTRUCTION
TIMEZONE DS    F                4  FILLED IN FROM CVTTZ
ANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM
         DS    C
TIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY
OPTION   DS    C
WORKA    DS    10D
PARMSAVE DS    F
@DATAL   EQU   *-@DATA
         SPACE 1                                                 JDM1
         CVT   DSECT=YES,LIST=NO                                 JDM1
         SPACE 1                                                 JDM1
         PRINT ON,GEN
         IKJTCB DSECT=YES,LIST=NO                                JDM1
         SPACE 1                                                 JDM1
         IKJPSCB
         SPACE
         IEZJSCB                                                 JDM1
         SPACE
         IKJCPPL
         SPACE
         IKJIOPL
         SPACE
         IKJPPL
         SPACE
         IKJUPT
         SPACE
         IKJECT
         SPACE
         PRINT OFF
         YREGS
         END
         TITLE '   T O D C N V R T  '
*---------------------------------------------------------------------*
*                                                                     *
*        'TODCNVRT'                                                   *
*                                                                     *
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.    *
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.            *
*        DATE WRITTEN. DECEMBER 7 1976.                               *
*        DATE UPDATED. JANUARY 31 1977.                               *
*        ATTRIBUTES. RE-ENTRANT.                                      *
*                                                                     *
*        DESCRIPTION.                                                 *
*         THIS SUBPROGRAM CONVERTS THE RESULTS OF A                   *
*         'STORE CLOCK' INSTRUCTION TO EBCDIC. THE LOGIC              *
*         IS TAKEN STRAIGHT OUT OF MODULE 'AMDPRSEG' IN               *
*         AMDPRDMP (5752-SC113), VS2 RELEASE 3.0                      *
*         WITH A FEW MODIFICATIONS TO MAKE THE PASSING                *
*         OF PARAMETERS MORE CONVENTIONAL.                            *
*                                                                     *
*            INPUT - LIST OF 5 ADDRESSES POINTED TO BY REG 1          *
*                       1) PTR TO CVTTZ VALUE                         *
*                       2) PTR TO 8-BYTE TOD CLOCK VALUE              *
*                       3) PTR TO OUTPUT AREA                         *
*                       4) PTR TO OPTION BYTE X'01' OR X'02'          *
*                       5) PTR TO 80-BYTE WORKAREA                    *
*                    REG 15 = ENTRY ADDRESS  REG 14 = RETURN ADDRES   *
*                    REG 13 = 72 BYTE REGISTER SAVEAREA ADDRESS       *
*                                                                     *
*            OUTPUT - EBCDIC TIME IN OUTPUT AREA                      *
*                     REG 15 = 4 IF INPUT CLOCK TIME ALL ZEROES       *
*                     REG 15 = 0 ALL OTHER CASES.                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
TODCNVRT CSECT
         SAVE  (14,12),,&SYSDATE
         LR    R12,15
         USING TODCNVRT,R12
         L     R1,16(,R1)              SAVEPTR
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R14,R13
         LR    R13,R1
         L     R1,24(,R14)             RESTORE R1
         USING MYDSECT,R13
         USING PARAMS,R1
         SPACE 1
         L     R7,TODPTR
         MVC   CVRTAREA(8),0(R7)
         SPACE
*---------------------------------------------------------------------*
*        CHANGE TOD TO LOCAL TIME
*---------------------------------------------------------------------*
         SPACE
         L     R7,CVTTZPTR         GET ADDR OF TZ FIELD
         L     R7,0(,R7)           R7 = TZ VALUE
         L     R15,MINUS1
         CLR   R7,R15              IS TZ = MINUS 1?
         BNE   TZADD               NO - USE TZ FROM CALLER
         L     R7,16               YES - USE TZ FROM CVT
         L     R7,X'598'(,R7)      GET CVTTZ
TZADD    DS    0H
         AL    R7,CVRTAREA         ADD TZ TO FIRST WORD
         ST    R7,CVRTAREA
         SPACE
         LM    R4,R5,CVRTAREA
         SRDL  R4,12               REMOVE INSIGNIFICANT BITS
         D     R4,SIXTYMIL         DIVIDE BY 60,000,000
         SPACE
         L     R7,OPTION
         CLI   0(R7),2
         BE    RELTVTME
         B     FULLDATE
         SPACE
*---------------------------------------------------------------------*
*        RELATIVE TIME CONVERSION -- THIS ROUTINE CONVERTS THE TOD
*        VALUE TO RELATIVE SECONDS.MICROSECONDS FROM 0 A.M. OF THE
*        CURRENT DAY REFLECTED BY THE TOD VALUE. THE CONVERTED TIME
*        IS PLACED LEFT JUSTIFIED IN THE OUTPUT AREA IN THE FORM
*        SSSSS.MMMMMM (EBCDIC).   UPON ENTRY TO THIS ROUTINE THE TOD
*        VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES (IN R5) AND
*        NUMBER OF MICROSECONDS INTO CURRENT MINUTE (IN R4).
*---------------------------------------------------------------------*
         SPACE
RELTVTME DS    0H
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   RNOTZERO
         L     R7,OUTAREA
         MVI   12(R7),C' '
         MVC   13(11,R7),12(R7)
         MVC   0(12,R7),=C'00000.000000'
         LA    R15,4
         B     EXIT
         SPACE
RNOTZERO DS    0H
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT MINUTE
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSEC INTO CURRENT SECOND
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14              REMAINDER IN R4
         SPACE
         L     R2,OUTAREA
         LA    R2,6(,R2)           OUT LOC FOR MICROSEC
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         L     R7,OUTAREA
         MVI   5(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT DAY
*        AND CONVERT TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R5              R4=((R5//1440)*60)+SECONDS
         SRDA  R14,32
         D     R14,=F'1440'
         MH    R14,=H'60'
         LA    R15,TIMELEFT
         LA    R14,0(,R15)         ADD SECONDS
         LR    R4,R14
         SPACE
         LR    R2,R7               POINT TO OUTPUT AREA
         CVD   R4,CVRTAREA
         UNPK  0(5,R2),CVRTAREA+5(3)  UNPACK SECONDS
         OI    4(R2),X'F0'
         SPACE
         B     EXIT0
         SPACE
*---------------------------------------------------------------------*
*        FULL DATE AND TIME CONVERSION -- THIS ROUTINE
*        CONVERTS THE TOD VALUE TO YEAR, JULIAN DAY, HOURS
*        MINUTES, SECONDS, AND MICROSECONDS. THE CONVERTED
*        TIME IS PLACED LEFT-JUSTIFIED IN THE OUTPUT AREA
*        IN THE FORM YYYYDDDHH.MM.SS.MMMMMM (EBCDIC). UPON
*        ENTRY TO THIS ROUTINE, THE TOD VALUE HAS ALREADY
*        BEEN CHANGED TO TOTAL MINUTES SINCE EPOCH (IN R5)
*        AND NUMBER OF MICROSECS INTO CURRENT MINUTE (R4).
*---------------------------------------------------------------------*
         SPACE
FULLDATE DS    0H
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   FNOTZERO
         L     R7,OUTAREA
         MVI   22(R7),C' '
         MVI   23(R7),C' '
         MVC   0(22,R7),=C'000000000.00.00.000000'
         LA    R15,4
         B     EXIT
         SPACE
FNOTZERO DS    0H
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NUMBER OF SECONDS (R4/1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LA    R7,TIMELEFT
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,0(,R7)
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSECONDS (R4//1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R7,OUTAREA
         LA    R2,16(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         MVI   15(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CONVERT SECONDS TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R4,TIMELEFT
         LA    R2,13(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   12(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MINUTES INTO CURRENT HOUR.
*        R5 CONTAINS TOTAL NO. OF MINUTES FROM THE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'60'
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE MINUTES INTO CURRENT HOUR
*        R4 = R5//60
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,10(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   9(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*        TIMELEFT CONTAINS TOTAL NO. OF HOURS SINCE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         L     R5,TIMELEFT
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'24'
         ST    R15,TIMELEFT        TOTAL DAYS SINCE EPOCH
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,7(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE THE CURRENT YEAR AND JULIAN DAY
*        USING 'TIMELEFT' WHICH CONTAINS THE TOTAL NUMBER
*        OF ELAPSED DAYS SINCE 1900. FIRST CHECK WHETHER
*        THE TIME IS IN THE 1900 THRU 1903 ERA (I.E. LESS
*        THAN 1460 ELAPSED DAYS). IF SO, THE TIME MUST BE
*        HANDLED IN A SPECIAL WAY SINCE 1900 IS NOT A LEAP
*        YEAR AND EACH YEAR IN THAT 4 YEAR SPAN THUS CON-
*        TAINS 365 DAYS. IF THE ELAPSED TIME HOWEVER IS
*        GREATER THAN 1459 DAYS, THEN EVERY 4 YEARS CON-
*        TAIN 1461 DAYS RATHER THAN 1460 AND THE FIRST
*        YEAR OF EACH GROUP IS A LEAP YEAR. THESE FOUR
*        YEAR GROUPS ARE REFERRED TO AS LEAP YEAR GROUPS.
*        THE YEAR AND THE DAY WHEN THE ELAPSED TIME FALLS
*        INTO ONE OF THESE GROUPS MUST BE CALCULATED USING
*        STANDARD FORMULAS DIFFERENT FROM THE FORMULAS
*        USED WHEN THE TIME IS WITHIN 1900 TO 1903.
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         CH    R7,=H'1460'
         BNL   POST1903
         SPACE
NOLEAPYR DS    0H
         SPACE
*---------------------------------------------------------------------*
*        R3 = (TIMELEFT//365)+1   CURRENT DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'365'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = (TIMELEFT/365)     CURRENT YEAR
*---------------------------------------------------------------------*
         SPACE
         AH    R15,=H'1900'
         LR    R6,R15
         B     DATECOM
         SPACE
*---------------------------------------------------------------------*
*        THE TIME ELAPSED IS 1460 OR MORE DAYS.
*        CALCULATE R5, THE RELATIVE LEAP YEAR GROUP SINCE
*        1904, AND R4, THE NUMBER OF DAYS ELAPSED IN THE
*        CURRENT LEAP YEAR GROUP. USE THESE VALUES IN THE
*        FORMULAS.  IN THE FORMULA USED TO CALCULATE THE
*        JULIAN DAY, THE EXPRESSION IN PARENTHESES IS THE
*        NUMBER OF WHOLE DAYS THAT HAVE PAST IN THE
*        CURRENT YEAR. BECAUSE THE CURRENT DAY HAS NOT YET
*        ELAPSED, IT IS NOT INCLUDED IN THE RESULT PRO-
*        DUCED BY THE EXPRESSION AND THEREFORE 1 MUST BE
*        ADDED TO GET THE ACTUAL JULIAN DAY.
*        WITHIN THE EXPRESSION THE FIRST TERM, R, MUST BE
*        ADJUSTED BY 1 (I.E, L/731) IF THE TOTAL DAYS INTO
*        THE LEAP YEAR GROUP IS GREATER THAN OR EQUAL TO
*        2 YEARS, AND AGAIN BY 1 (I.E, L/1096) IF THE
*        TOTAL DAYS IS EQUAL TO OR GREATER THAN 3 YEARS.
*        THE AFFECT OF THIS IS THAT THE 2ND AND 3RD YEARS
*        ARE FORCED TO 366 DAYS ONCE THE TOTAL DAYS INTO
*        THE GROUP EXCEEDS EACH OF THESE YEARS. THIS IS
*        NECESSARY BECAUSE A DIVISOR OF 366 IS USED.
*        THE SECOND TERM (W * 4) YIELDS THE RELATIVE
*        NUMBER OF YEARS SINCE 1904 UP TO AND INCLUDING
*        THE LEAP YEAR IN THE CURRENT GROUP. THE THIRD
*        TERM ( (L-1)/365 ) YIELDS THE RELATIVE YEAR
*        WITHIN THE CURRENT LEAP YEAR GROUP. THUS IF THE
*        CURRENT YEAR IS A LEAP YEAR THE RELATIVE YEAR IS
*        ZERO AND THE THIRD TERM WILL RESULT IN ZERO.
*---------------------------------------------------------------------*
         SPACE
POST1903 DS    0H
LEAPYR   DS    0H
         SPACE
*---------------------------------------------------------------------*
*        TIMELEFT=TIMELEFT-1460  1904 BASE
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         SH    R7,=H'1460'
         STH   R7,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        R5 = TIMELEFT/1461
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'1461'
         LR    R5,R15
         SPACE
*---------------------------------------------------------------------*
*        R4 = TIMELEFT//1461
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        R3 = ((L+L/731+L/1096)//336)+1  JULIAN DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'731'
         LR    R14,R15
         ALR   R14,R4
         LR    R3,R14
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'1096'
         LR    R14,R15
         ALR   R14,R3
         SRDA  R14,32
         D     R14,=F'366'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = 1904+(W*4)+(L-1)/365       YEAR
*---------------------------------------------------------------------*
         SPACE
         LR    R6,R5
         SLA   R6,2
         AH    R6,=H'1904'
         LR    R14,R4
         BCTR  R14,0
         SRDA  R14,32
         D     R14,=F'365'
         ALR   R6,R15
         SPACE
DATECOM  DS    0H
         L     R7,OUTAREA
         LA    R2,4(,R7)
         CVD   R3,CVRTAREA
         UNPK  0(3,R2),CVRTAREA+6(2)
         OI    2(R2),X'F0'
         SPACE
         LA    R2,0(,R7)
         CVD   R6,CVRTAREA
         UNPK  0(4,R2),CVRTAREA+5(3)
         OI    3(R2),X'F0'
         SPACE
EXIT0    SR    15,15
EXIT     LR    1,13
         L     13,4(,13)
         ST    15,16(,13)
         LM    14,12,12(13)
         BR    14
         SPACE
*---------------------------------------------------------------------*
*        CONSTANTS
*---------------------------------------------------------------------*
         SPACE
MILLION  DC    F'1000000'
SIXTYMIL DC    F'60000000'
MINUS1   DC    F'-1'
         LTORG
         SPACE
*---------------------------------------------------------------------*
*        DSECTS
*---------------------------------------------------------------------*
         SPACE
MYDSECT  DSECT
TIMELEFT DS    0F                  1ST FULLWORD OF SAVEAREA
         DS    18F                 REGISTER SAVEAREA
CVRTAREA DS    D
MYDSECTL EQU   *-MYDSECT
         SPACE
PARAMS   DSECT
CVTTZPTR DS    A                   ADDR OF CVTTZ VALUE
TODPTR   DS    A                   ADDR OF TOD CLOCK VALUE
OUTAREA  DS    A                   ADDR OF OUTPUT AREA
OPTION   DS    A                   ADDR OF OPTION BYTE
SAVEPTR  DS    A                   ADDR OF SAVEAREA
         SPACE
         YREGS
         END
