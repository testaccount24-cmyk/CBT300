*          DATA SET TSOIO      AT LEVEL 001 AS OF 12/03/79
*          DATA SET TSOIO      AT LEVEL 004 AS OF 05/05/73
         TITLE 'IO - SPNB TCT I/O DISPLAY COMMAND'
*
* DISPLAYS NON ZERO I/O COUNTS FROM CALLER'S TCTIOT
*
* 05/09/2013 CHANGES:
*  SWITCH TO 31-BIT MODE AFTER ENTRY, BACK TO 24-BIT BEFORE EXIT.
*  REPLACE MANY HARD-CODED OFFSETS WITH LABELS FROM MAPPING MACROS,
*   WHICH IN SOME CASES RESULTS IN DIFFERENT OFFSETS.
*  ADD MAPPING MACROS.
*  GET 31-BIT UCB ADDRESS INSTEAD OF 16-BIT ADDRESS.
*  SHOW 4-DIGIT DEVICE ADDRESS INSTEAD OF 3.
*
* 05/21/2013 CHANGES:
*  SHOW VOLSER.
*  CHECK FOR PARM=A OR IF RUNNING AS TSO CP CHECK FOR OPERAND 'A'
*   WHICH MEANS SHOW RESULTS EVEN FOR ENTRIES WITH ZERO IO COUNTS.
*  CHECK FOR UCB ADDRESS ZERO AND SKIP THOSE, SUCH AS DA(*).
*
* 06/26/2013 CHANGES:
*  SHOW DSNAME. CALL TIOTDSN TO GET DSNAME.
         MACRO
&N       EDIT  &T
&N       CVD   R1,DOUBLE
         MVC   &T,=X'40206B2020206B202120'
         ED    &T,DOUBLE+4
         CLC   =A(0),DOUBLE
         BE    *+10
         MVC   &T,=CL10' *********'
         MEND
         SPACE 2
         MACRO
&N       CLEAR &A
         LCLC  &L
&L       SETC  'L'''
&N       MVI   &A,C' '
         MVC   &A+1(&L&A-1),&A
         MEND
         EJECT
IO       CSECT
         SAVE  (14,12),T,IO-&SYSDATE-&SYSTIME
         LR    R12,R15
         USING IO,R12
         LA    R15,SAVEAREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         LR    R2,R1                    SAVE PARAMETERS
         TM    0(R2),X'80'              IF NOT A PARM
         BZ    PARMC                       PROBABLY CPPL
         L     R1,0(,R2)                POINT TO PARM
         LH    R0,0(,R1)                GET PARM LEN
         LTR   R0,R0                    IF PARM LEN NOT ZERO
         BZ    PARMX                       THEN
         MVC   PARMVAL(1),2(R1)            COPY 1ST CHAR
         B     PARMX
PARMC    L     R1,0(,R2)                CPPLCBUF
         LH    R14,0(,R1)               GET LENGTH+4 OF CBUF
         SH    R14,=H'4'                GET LENGTH OF CBUF
         LH    R15,2(,R1)               GET OFFSET TO OPERAND
         CR    R15,R14                  IF OFFSET >= LENGTH
         BNL   PARMX                      THEN NO OPERAND
         LA    R15,4(R1,R15)            POINT TO OPERAND
         MVC   PARMVAL(1),0(R15)        COPY TO PARMVAL
         OI    PARMVAL,X'40'            UPPER CASE
PARMX    EQU   *
         SR    R8,R8                    ZERO EXCP TOTAL COUNTER
         SPACE
*+       SAM31
         LA    R15,M31
         O     R15,=A(X'80000000')      TO 31-BIT MODE
         BSM   R14,R15                  DON'T NEED BASSM
M31      N     R14,=A(X'80000000')      ISOLATE MODE BIT
         ST    R14,ORIGMODE
         SPACE 1
* IN THE FOLLOWING CODE:
*    R2 = A(TCB)
*    R3 = A(TCT)
*    R4 = A(TIOT)
*    R8 = EXCP TOTAL COUNTER
         SPACE 1
ONLYME   L     R1,16                    FIND CVT
         L     R1,0(R1)                 FIND DOUBLE WORD
         L     R2,4(R1)                 FIND TCB
*- TCB   L     R3,164(R2)               FIND TCT
GOTTCB   L     R3,TCBTCT-TCB(,R2)       FIND TCT
         L     R4,12(R2)                FIND TIOT
         MVC   L1UID,0(R4)              MOVE IN USERID
         LTR   R3,R3                    NULL TCT POINTER?
         BZ    NOTCT
*-       L     R1,52(R3)                TPUT COUNT
         L     R1,TCTLOUT-SMFTCT(,R3)   TPUT COUNT
         EDIT  L1TPUT
*-       L     R1,48(R3)                TGET COUNT
         L     R1,TCTLIN-SMFTCT(,R3)    TGET COUNT
         EDIT  L1TGET
         TPUT  LINE1,LLINE1
         EJECT
* THIRD AND FOLLOWING LINE PROCESSING
         SPACE 1
* IN THE FOLLOWING, R2 = A(TCTIOT)
*                   R5 = A(DD LOOK UP ENTRY)
         SPACE 1
*-       L     R2,12(R3)                FIND TCTIOT
         L     R2,TCTIOTBL-SMFTCT(,R3)  FIND TCTIOT (STILL 12)
*+             R2 CONTAINS A 31-BIT ADDRESS
*-       LA    R5,8(R2)                 FIND FIRST LOOK UP ENTRY
         LA    R5,TCTIODSP-TCTTIOT(,R2) FIND FIRST LOOK UP ENTRY
         SPACE 1
DDLOOP   NI    FLAGS,255-TPUTREQ        TURN OFF TPUT REQUIRED FLG
*-       LH    R6,0(R5)                 TIOT OFFSET
         L     R6,TCTDCBTD-TCTIODSP(,R5) TIOT OFFSET
*-       LH    R7,2(R5)                 TCT OFFSET
         L     R7,TCTIOTSD-TCTIODSP(,R5) TCT OFFSET (WAS 2 NOW 4)
         LA    R6,0(R4,R6)              R6 = A(TIOT ENTRY)
         MVC   LNDDNAME,4(R6) MOVE IN DDNAME
         LA    R1,ARGLIST
         ST    R6,0(,R1)
         LA    R0,JDSN
         ST    R0,4(,R1)
         LA    R0,WORKING
         ST    R0,8(,R1)
         OI    8(R1),X'80'
         L     R15,=V(TIOTDSN)
         BALR  R14,R15
         MVC   LNDDNAME+31(44),JDSN
         LA    R7,0(R2,R7)              R7 = A(TCTIOT ENTRY)
*+             R7 POINTS TO TCTDDENT
         SR    R6,R6                    COUNTER FOR UCB ENTRIES
*-       IC    R6,2(R7)                 SET COUNTER
         IC    R6,TCTSCTR-TCTDDENT(,R7) SET COUNTER (WAS 2 NOW 4)
         LTR   R6,R6                    ANY UCBS?
         BZ    SKIPDD                   NO, SKIP THIS ONE
         SPACE 1
DDLOOP1  LA    R10,14                   LINE INCREMENT
         LA    R10,1(,R10)              PLUS 1 FOR 4-BYTE UCB UNIT
         LA    R10,7(,R10)              PLUS 7 FOR VOLSER
         LA    R11,LNAEND               COMPARAND
         LA    R9,LNAREA                INDEX
*- OOP2  L     R1,4(R7)                 LOAD EXCPS
DDLOOP2  L     R1,TCTDCTR-TCTDDENT(,R7) LOAD EXCPS (WAS 4 NOW 8)
         CLI   PARMVAL,C'A'             IF PARM=A
         BE    DOALL                       SHOW EVEN IF ZERO IO'S
         LTR   R1,R1 .                  ZERO?
         BZ    SKIPUCB .                YA, SKIP THIS ONE
DOALL    AR    R8,R1                    ADD TO EXCP ACCUM.
         OI    FLAGS,TPUTREQ            TURN ON TPUT REQUIRED FLG
         EDIT  0(10,R9)
         MVI   10(R9),C'/'
*-       LH    R1,0(R7)                 UCB ADDR
*-       SLL   R1,16
*-       SRL   R1,16                    OFF UPPER BITS
         L     R1,TCTUCBP-TCTDDENT(,R7) UCB ADDR (NOT A HALFWORD)
         LTR   R1,R1                    IF NO UCB, LIKE DA(*)
         BZ    SKIPIT                     THEN SKIP
         TM    UCBTBYT3-UCBOB(R1),UCB3DACC IS IT DASD?
         BO    DASDUCB
SKIPIT   NI    FLAGS,255-TPUTREQ
         B     SKIPUCB
DASDUCB  EQU   *
*-       MVC   11(3,R9),13(R1)          MOVE IN ADDRESS FROM UCBNAME
*+       MVC   11(3,R9),UCBNAME-UCBOB(R1) MOVE IN ADDRESS
         UNPK  HEXWK(5),UCBCHAN-UCBOB(3,R1) GET UNIT ADDRESS
         TR    HEXWK(4),HEXTAB-240      TO HEX
         MVC   11(4,R9),HEXWK           4-BYTE UNIT ADDRESS
         MVC   16(6,R9),UCBVOLI-UCBOB(R1) VOLSER
SKIPUCB  BCT   R6,NEXTDEV .             ANOTHER UCB?
         B     NEXTDD .                 NO, TPUT LINE
*-XTDEV  LA    R7,8(R7)                 MOVE TO NEXT TCTIOT ENTRY
NEXTDEV  LA    R7,TCTDDLEN(,R7)         MOVE TO NEXT TCTIOT ENTRY
         BXLE  R9,R10,DDLOOP2 .         LOOP 4 NEXT DEV
         SPACE 1
         TM    FLAGS,LINE2PUT           WAS THE HEADER TPUT?
         BO    DONT1                    YA, DON'T DO IT AGAIN
         TPUT  LINE2,LLINE2             ELSE DO IT
         OI    FLAGS,LINE2PUT           AND SET FLAG
         SPACE 1
DONT1    TPUT  LINEN,LLINEN .           FOR TO  MANY FOR 1 LINE
         CLEAR LINEN
         B     DDLOOP1
         SPACE 1
NEXTDD   TM    FLAGS,TPUTREQ            SEE IF ANYTHING TO PUT
         BZ    SKIPDD
         SPACE 1
         TM    FLAGS,LINE2PUT           HEADER OUTPUT?
         BO    DONT2                    YA, DON'T REPEAT
         TPUT  LINE2,LLINE2             ELSE TPUT IT
         OI    FLAGS,LINE2PUT           AND SET FLAG
         SPACE 1
DONT2    TPUT  LINEN,LLINEN
SKIPDD   CLEAR LINEN
*-       LA    R5,4(R5) NEXT DD LOOK UP TAB ENTRY
         LA    R5,8(R5) NEXT DD LOOK UP TAB ENTRY
         CLC   =A(0),0(R5)              E-O TABLE?
         BNE   DDLOOP
         MVC   LINEN(8),=CL8'TOTAL:'    LIST TOTALS
         LR    R1,R8
         EDIT  LNAREA(10)
         TPUT  LINEN,LLINEN
EXIT     EQU   *
*              RETURN TO ORIGINAL MODE
         LA    R14,M24
         O     R14,ORIGMODE
         BSM   0,R14
M24      EQU   *
         L     R13,4(R13)               BACK UP ONE SA
         RETURN (14,12),T,RC=0
         SPACE 1
NOTCT    MVC   NOTCTM(8),L1UID          MOVE IN JOBNAME
         TPUT  NOTCTM,L'NOTCTM          TELL CALLER
         LA    R4,R4                    CHECK TIOT POINTER
         LTR   R4,R4
         BNZ   TIOTOK
         TPUT  NTIOTM,L'NTIOTM
         B     EXIT
TIOTOK   TPUT  NTHEADER,L'NTHEADER
         SPACE 1
* REGISTER USAGE IS AS FOLLOWS:
*   R3 = OUTPUT LINE SCAN POINTER
*   R4 = TIOT ENTRY POINTER
*   R5 = LENGTH OF CURRENT TIOT ENTRY
*   R6 = UCB COUNTER
*   R7 = UCB POINTER
*   R8 = OUTPUT LINE SCAN BXLE INCREMENT (4)
*   R9 = OUTPUT LINE SCAN BXLE COMPARAND
*
         SPACE 1
         LA    R4,24(R4)                MOVE TO FIRST ENTRY
ELOOP    SR    R5,R5                    ZERO COUNTERS
         SR    R6,R6
         IC    R5,0(R4) .               LENGTH OF TIOT ENTRY
         IC    R6,2(R4) .               NO. OF UCBS
         CLEAR NTLINE
         MVC   NTLINE(8),4(R4)          MOVE IN DDNAME
         LA    R8,4                     BXLE INCREMENT
         LA    R9,NTLINE+L'NTLINE-4     END OF NTLINE
         LA    R3,NTLINE+10             START OF UNIT LIST
         LTR   R6,R6                    ANY UCBS?
         BZ    NTPUT
         LA    R7,16(R4)                1ST UCB POINTER
         B     NTLOOP1
NTLOOP   MVI   3(R3),C','
         BXLE  R3,R8,NTLOOP1
         TPUT  NTLINE,L'NTLINE
         CLEAR NTLINE
         LA    R3,NTLINE+8
         SPACE 1
NTLOOP1  L     R1,0(R7)                 FIND UCB
         MVC   0(3,R3),13(R1)           MOVE IN UNIT NAME
         LA    R7,4(R7)                 BUMP TO NEXT UCB ENTRY
         BCT   R6,NTLOOP
NTPUT   TPUT  NTLINE,L'NTLINE
         AR    R4,R5                    MOVE TO NEXT ENTRY
         CLI   0(R4),0                  END OF TIOT?
         BE    EXIT
         BNE   ELOOP
         TITLE 'IO - CONSTANTS AND WORK AREAS '
SAVEAREA DC    18F'0'
ORIGMODE DC    F'0'
PARMVAL  DC    4C' '
HEXTAB   DC    C'0123456789ABCDEF'
HEXWK    DC    CL5' '
LINE1    DC    C'  I/O SUMMARY FOR USER: '
L1UID    DC    CL8' '
         DC    C'    TPUTS:'
L1TPUT   DC    CL10' '
         DC    C'    TGETS:'
L1TGET   DC    CL10' '
LLINE1   EQU   *-LINE1
         SPACE 1
LINE2    DC    C'DDNAME       EXCPS/UNIT             '
LLINE2   EQU   *-LINE2
         SPACE 2
LINEN    DS    0CL80
LNDDNAME DC    CL8' '
LNAREA   DC    CL72' '
LNAEND   EQU   *-14
LLINEN   EQU   *-LINEN
DOUBLE   DS    D
         SPACE 1
FLAGS    DC    F'0'                     WORK FLAGS
TPUTREQ  EQU   X'80'
LINE2PUT EQU   X'40'                    HEADER LINE WAS TPUT
NTLINE   DC    CL80' '
NTHEADER DC    C'DDNAME   UNIT(S)'
NOTCTM   DC    C'XXXXXXXX - HAS NO TASK TIMING TABLE.'
NTIOTM   DC    C'      NOR HAS IT A TASK INPUT OUTPUT TABLE.'
ARGLIST  DC    3F'0'
JDSN     DC    CL44' '
WORKING  DC    32D'0'
         SPACE
         LTORG
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
         IKJTCB
         IEFTCT
UCB      DSECT
         IEFUCBOB
         END   IO
* WRITTEN JUNE 26 2013
* SUBPROGRAM TO RETURN A DSNAME FOR A GIVEN TIOT ENTRY
* CALL TIOTDSN(TIOT,DSN,WORKING)
* USE SWAREQ TO POINT TO A JFCB, INSTEAD OF USING RDJFCB.
* THE DSNAME ALLOCATED TO THE TIOT IN ARG1 IS RETURNED IN ARG 2.
* (NOT INCLUDING MEMBER NAME, IF PRESENT)
* ARG 3 IS WORKING STORAGE, SO THIS SUBROUTINE DOESN'T NEED GETMAIN.
* ARG 1 SHOULD POINT TO A TIOT ENTRY.
* ARG 2 SHOULD POINT TO A 44-BYTE AREA TO RECEIVE THE DSNAME.
* ARG 3 SHOULD POINT TO A 256-BYTE AREA FOR USE BY THIS SUBPROGRAM.
TIOTDSN  CSECT
         USING *,10
ENTRY0   B     BEGIN-*(,R15)
         DC    AL1(7),CL7'TIOTDSN'
         DC    CL16' &SYSDATE &SYSTIME '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
BEGIN    STM   14,12,12(13)
         LR    R10,R15
         LR    R2,R1
*        L     R0,WORKSIZ
*        GETMAIN R,LV=(0)
*        LR    R9,R1
         L     R9,8(,R1)
         A     R9,=F'7'            ALIGN R9
         N     R9,=X'FFFFFFF8'      ON DOUBLEWORD
         USING WORKD,R9
         XC    0(WORKINI,R9),0(R9)
         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA
         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R9
         LA    R15,12
         ST    R15,RETCODE
         SPACE
*        SAM31
         LA    R15,*+10            POINT PAST BSM
         O     R15,=A(X'80000000') TO 31-BIT MODE
         BSM   R14,R15             DON'T NEED BASSM
         N     R14,=A(X'80000000') ISOLATE MODE BIT
         ST    R14,ORIGMODE
         SPACE
         L     R7,4(,R1)           POINT TO RESULT AREA
         MVI   0(R7),C' '
         MVC   1(43,R7),0(R7)
         L     R3,0(,R1)           POINT R3 TO TIOT ENTRY
*        MVC   0(8,R7),TIOEDDNM-TIOENTRY(R3)
         AGO   .NODUMP1
         LR    R1,R3
         LA    R0,20
         LA    R15,LINE
         BAL   R14,TOHEX
         LA    R1,LINE
         LA    R0,40
         SVC   93 TPUT
.NODUMP1 ANOP
         SPACE
         TM    TIOELINK-TIOENTRY(R3),TIOTTERM
         BNO   NOTTERM
         MVC   0(10,R7),=C'(TERMINAL)'
*        LA    R1,LINE
*        LA    R0,L'MSG1
*        SVC   93 TPUT
         B     EXIT
NOTTERM  EQU   *
         TM    TIOELINK-TIOENTRY(R3),TIOESSDS
         BNO   NOTSYSO
         MVC   0(8,R7),=C'(SYSOUT)'
         B     EXIT
NOTSYSO  EQU   *
         XC    EPA(28),EPA
         LA    R4,EPA
         ST    R4,EPAPTR
         MVC   SWVA-SWAEPA(3,R4),TIOEJFCB-TIOENTRY(R3)
         MVC   WSWAREQ(CSWAREQL),CSWAREQ
         SWAREQ FCODE=RL,UNAUTH=YES,EPA=EPAPTR,MF=(E,WSWAREQ)
         LTR   R15,R15
         BZ    OKSWA
         ST    R15,RETSWA
         LA    R1,RETSWA
         LA    R0,4
         LA    R15,LINE
         BAL   R14,TOHEX
         LA    R1,LINE
         LA    R0,8
         SVC   93 TPUT
         B     EXIT
         SPACE
OKSWA    L     R6,SWBLKPTR-SWAEPA(,R4)
         MVC   0(44,R7),0(R6)
DONE     B     EXIT0
         SPACE
TOHEX    MVC   1(1,R15),0(R1)
         UNPK  0(3,R15),1(2,R15)
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)
         LA    R1,1(,R1)
         BCT   R0,TOHEX
         MVI   0(R15),C' '
         BR    R14
         SPACE
EXIT0    MVI   RETCODE+3,0
EXIT     L     R2,RETCODE
*              RETURN TO ORIGINAL MODE
         LA    R14,*+10
         O     R14,ORIGMODE
         BSM   0,R14
         SPACE
*        LR    R1,R13             POINT TO ADDRESS TO FREEMAIN
*        L     R0,WORKSIZ         LENGTH TO FREEMAIN
         L     R13,4(,R13)        RESTORE ORIGINAL R13
*        FREEMAIN R,A=(1),LV=(0)
         DROP  R9
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
         LTORG
         DC    0D'0'
CSWAREQ  SWAREQ EPA=0,MF=L
CSWAREQL EQU   *-CSWAREQ
HEXTAB   DC    C'0123456789ABCDEF'
         DC    0D'0'
WORKD    DSECT
         DS    18F
RETCODE  DS    F
ORIGMODE DS    F
WORKINI  EQU   *-WORKD
WSWAREQ  DS    0F,(CSWAREQL)X
RETSWA   DS    F
EPAPTR   DS    F
EPA      DS    7F
LINE     DS    CL80
         DS    0D
WORKLEN  EQU   *-WORKD
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
TIOT     DSECT
         IEFTIOT1
*              CREATE ZB505 DSECT
         IEFZB505 LOCEPAX=YES
*        CVT   DSECT=YES
CVTPTR   EQU   16
CVTFIX   DSECT
CVTMAP   EQU   *
CVTJESCT EQU   CVTMAP+X'128'
         IEFJESCT
*        IEFQMIDS
         END
