VSMRGN  TITLE 'SAMPLE EXECUTION AND DISPLAY OUTPUT OF VSMREGN MACRO'
*/*
*/* DOC:  This sample TSO command displays the output that the VSMREGN
*/*       macro would have displayed, but we get the info directly.
*/*       (Therefore the command needs to be AMODE 31.)
*
***********************************************************************
*                                                                     *
*      MODULE NAME = VSMRGN                                           *
*                                                                     *
*      DESCRIPTIVE NAME =  TSO COMMAND TO DISPLAY THE                 *
*         OUTPUT OF THE MVS/SP V2 VSMREGN MACRO.                      *
*         (Except that we don't use the VSMREGN macro,                *
*          but we get the info from the control blocks                *
*          ourselves.  I disassembled the IGVSREGN                    *
*          routine from the nucleus.  It is very simple.)             *
*                                                                     *
*      FUNCTION =                                                     *
*         EXAMPLE EXECUTION OF VSMREGN MACRO WITH OUTPUT:             *
*          (Same info, but from control blocks - AMODE 31)            *
*            CONVERTED TO DECIMAL AND WRITTEN OUT                     *
*            DISPLAYED AS HEXADECIMAL AND WRITTEN OUT                 *
*                                                                     *
*         OPERATION =                                                 *
*            Do what module IGVSREGN does, except we get              *
*            the information ourselves.                               *
*            INVOKE VSMREGN SERVICE TO OBTAIN THE REGION              *
*            STARTING ADDRESS AND LENGTH FOR ABOVE AND                *
*            BELOW THE 16M LINE.                                      *
*                                                                     *
*         NOTES =                                                     *
*                                                                     *
*            DEPENDENCIES =                                           *
*               AMODE 31 - THE INFORMATION IS ABOVE THE LINE.         *
*               CHARACTER SET IS EBCDIC.                              *
*               REASSEMBLE IF A DIFFERENT CHARACTER SET IS            *
*               NEEDED.                                               *
*               WILL ONLY PROVIDE RESULTS FOR MVS/SP V2.              *
*                                                                     *
*            RESTRICTIONS = WILL NOT RUN ON MVS/SP V1.                *
*                           (WILL GIVE A MESSAGE.)                    *
*                                                                     *
*            REGISTER CONVENTIONS = STANDARD CONVENTIONS.             *
*               REGISTERS 0 TO 5  = WORK REGISTERS                    *
*               REGISTERS 6 TO 10 = UNUSED                            *
*               REGISTER  11      = WORK REGISTER                     *
*               REGISTER  12      = ADDRESSABILITY TO VSMREGN         *
*                                   CSECT                             *
*               REGISTER  13      = SAVE AREA ADDRESS                 *
*               REGISTERS 14,15   = WORK REGISTERS                    *
*                                                                     *
*        MODULE TYPE = TSO COMMAND                                    *
*                                                                     *
*           PROCESSOR = HLASM                                         *
*                                                                     *
*           ATTRIBUTES = NO PARAMETERS                                *
*                                                                     *
*        ENTRY POINTS = VSMRGN (ONLY ENTRY POINT)                     *
*                                                                     *
*           LINKAGE = STANDARD                                        *
*                                                                     *
*                                                                     *
*        INPUT = NONE                                                 *
*                                                                     *
*        OUTPUT = REPORT WITH THE FOLLOWING ADDRESSES AND SIZES       *
*            IN DECIMAL AND HEXADECIMAL (PUTLINE FORMAT):             *
*                                                                     *
*                1. START OF PRIVATE REGION BELOW 16M LINE            *
*                2. LENGTH OF PRIVATE REGION BELOW 16M LINE           *
*                3. START OF PRIVATE REGION ABOVE 16M LINE            *
*                4. LENGTH OF PRIVATE REGION ABOVE 16M LINE           *
*               = A MESSAGE IF RUNNING ON A CPU IN 370 MODE           *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*             VSMREGN Macro Sample Output  -  Version 2.1             *
*             ------- ----- ------ ------     ------- ---             *
* AD Rgn below 16M LN Rgn below 16M AD Rgn above 16M LN Rgn above 16M *
* ---------------- ---------------- ---------------- ---------------- *
* Dec        24,576       10,461,184      193,986,560   1,953,497,088 *
* Hex      00006000         009FA000         0B900000        74700000 *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14        *
*                                                                     *
*           OUTPUT = 80-COLUMN                                        *
*                                                                     *
*           RETURN CODE = ZERO                                        *
*                                                                     *
*        EXTERNAL REFERENCES =                                        *
*                                                                     *
*           ROUTINES = Simulated VSREGN service                       *
*                                                                     *
*           DATA AREAS = NONE                                         *
*                                                                     *
*           CONTROL BLOCKS = CVT                                      *
*                                                                     *
*        TABLES = NONE                                                *
*                                                                     *
*        MACROS = SAVE, RETURN, CVT, PUTLINE, FREEMAIN,               *
*                 GETMAIN, IHAPSA, IHAPSAE, IHBINNRB                  *
*                 IKJCPPL, IKJTCB, LINK, SYSSTATE                     *
*                                                                     *
*        CHANGE ACTIVITY =                                            *
*                                                                     *
*        Version 2.0 -                                                *
*        2014/09/28  Convert from batch program to TSO command,       *
*                    using PUTLINE output interface.  Convert         *
*                    to 80 column output from 133.                    *
*                                                                     *
*        Version 2.1 -                                                *
*        2014/09/28  Don't use the VSMREGN macro at all.  Get the     *
*                    information from the control blocks directly.    *
*                    Simulate the action of the IGVSREGN routine      *
*                    from the nucleus.  Must be AMODE 31.             *
*                                                                     *
*        MESSAGES =  NONE                                             *
*                                                                     *
***********************************************************************
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
**************************************************************
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R9,SAV9HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R9,HEX
         L     R9,SAV9HEX
         LM    R15,R1,HEXSAVE
         MEND
         SPACE
**************************************************************
         EJECT
VSMRGN   CSECT ,
VSMRGN   RMODE 24
VSMRGN   AMODE 31
*
* REGISTER EQUATES
*
R0       EQU   0                  REG 00 - WORK REG
R1       EQU   1                  REG 01 - WORK/PARMETER REG
R2       EQU   2                  REG 02 - WORK REG
R3       EQU   3                  REG 03 - WORK REG
R4       EQU   4                  REG 04 - CVT POINTER
R5       EQU   5                  REG 05 - ADDRESS OF OUTPUT DCB
R6       EQU   6                  REG 06 - WORK REG
R7       EQU   7                  REG 07 - UNUSED
R8       EQU   8                  REG 08 - UNUSED
R9       EQU   9                  REG 09 - UNUSED
R00      EQU   00                 REG 00 - WORK REG
R01      EQU   01                 REG 01 - WORK/PARMETER REG
R02      EQU   02                 REG 02 - WORK REG
R03      EQU   03                 REG 03 - WORK REG
R04      EQU   04                 REG 04 - CVT POINTER
R05      EQU   05                 REG 05 - ADDRESS OF OUTPUT DCB
R06      EQU   06                 REG 06 - WORK REG
R07      EQU   07                 REG 07 - UNUSED
R08      EQU   08                 REG 08 - UNUSED
R09      EQU   09                 REG 09 - UNUSED
R10      EQU   10                 REG 10 - UNUSED
R11      EQU   11                 REG 11 - WORK REG
R12      EQU   12                 REG 12 - CSECT BASE REG
R13      EQU   13                 REG 13 - ADDRESS OF SAVE AREA
R14      EQU   14                 REG 14 - LINKAGE REGISTER
R15      EQU   15                 REG 15 - WORK REG
         EJECT
         SAVE  (14,12),,VSMRGN_R01.0_&SYSDATE._&SYSTIME.
         USING VSMRGN,R12         SET UP CSECT ADDRESSABILITY
         LR    R12,R15            LOAD BASE REGISTER
         ST    R13,SAVE+4         CHAIN
         LA    R11,SAVE             SAVE
         ST    R11,8(,R13)            AREAS
         LR    R13,R11                  TOGETHER
* ------------------------------------------------------------------ *
*   We don't have to OPEN an output file, because the output goes    *
*    to the TSO terminal via PUTLINE.                                *
* ------------------------------------------------------------------ *
*        OPEN  (OUTDCB,(OUTPUT))  OPEN OUTPUT DCB
*        LA    R05,OUTDCB         TEST FOR
*        TM    DCBOPEN(R05),B'00010000'  SUCCESSFUL OPEN
*        BO    SUCCESS            YES
*        ABEND 1,DUMP             NO--GET DUMP
* ------------------------------------------------------------------ *
SUCCESS  DS    0H
*
         MVI   OUTLIN-1,X'40'     DISPLAY TITLE LINES
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),TITLMSG
         APUT  OUTLIN,80
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),TITLMSU
         APUT  OUTLIN,80
*
         L     R04,CVTPTR         ADDRESS OF CVT
         USING CVTMAP,R04         CVT ADDRESSIBILITY
         TM    CVTDCB,CVTMVSE     TEST FOR MVS/XA MODE PROCESSOR
         BO    CONTINUE           YES
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),NONXAMSG
         APUT  OUTLIN,80          NO -- WRITE MESSAGE
*        B     CLOSE                AND EXIT
CONTINUE DS    0H
*
*    Do not execute the VSMREGN macro - get info from control blocks.
*
*        VSMREGN WKAREA=REGN      OBTAIN PRIVATE REGION INFORMATION
*                                 FORMAT THE INFORMATION INTO DECIMAL
*
* ----- Do what the VSMREGN macro does   -   below  -  needs AMODE 31
*          (I disassembled the IGVSREGN routine from the nucleus)
         L     R6,X'21C'          TCB - PSATOLD
         L     R6,X'98'(,R6)      TCBRD
         L     R5,X'8'(,R6)       GET BEGIN ADDRESS BELOW
         ST    R5,ADDRBL          STORE IT
         L     R5,X'C'(,R6)       GET LENGTH BELOW
         ST    R5,LENBL           STORE IT
         L     R6,X'21C'          TCB - PSATOLD
         L     R6,X'128'(,R6)     TCBXSB
         L     R5,X'8'(,R6)       GET BEGIN ADDRESS ABOVE
         ST    R5,ADDRAB          STORE IT
         L     R5,X'C'(,R6)       GET LENGTH ABOVE
         ST    R5,LENAB           STORE IT
* ----- Do what the VSMREGN macro does   -   above  -  needs AMODE 31
*
         LA    R01,PARMLST1       PARAMETER LIST FOR CONVERT ROUTINE
         BAL   R14,CONVCVD        CONVERT START OF PRIVATE REGION
*                                    BELOW 16M AND PLACE IN OUTPUT AREA
         LA    R01,PARMLST2       PARAMETER LIST FOR CONVERT ROUTINE
         BAL   R14,CONVCVD        CONVERT LENGTH OF PRIVATE REGION
*                                    BELOW 16M AND PLACE IN OUTPUT AREA
         LA    R01,PARMLST3       PARAMETER LIST FOR CONVERT ROUTINE
         BAL   R14,CONVCVD        CONVERT START OF PRIVATE REGION
*                                    ABOVE 16M AND PLACE IN OUTPUT AREA
         LA    R01,PARMLST4       PARAMETER LIST FOR CONVERT ROUTINE
         BAL   R14,CONVCVD        CONVERT LENGTH OF PRIVATE REGION
*                                    ABOVE 16M AND PLACE IN OUTPUT AREA
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),OUTAREA1
         APUT  OUTLIN,80          WRITE HEADER LINE
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),OUTAREAU  UNDERLINES
         APUT  OUTLIN,80
         MVC   OUTAREA2+0(3),=C'Dec'
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),OUTAREA2
         APUT  OUTLIN,80              WRITE THE DECIMAL DATA
NEXTLINE DS    0H
         MVC   OUTAREA2(L'OUTAREA2),OUTAREA2-1
         HEX   OUTAREA2+9,4,ADDRBL
         HEX   OUTAREA2+27,4,LENBL
         HEX   OUTAREA2+45,4,ADDRAB
         HEX   OUTAREA2+63,4,LENAB
         MVC   OUTAREA2+0(3),=C'Hex'
         MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(80),OUTAREA2
         APUT  OUTLIN,80              WRITE THE HEXADECIMAL DATA
CLOSE    DS    0H                 END THE PROGRAM
         L     R13,4(,R13)        RESTORE CALLERS SAVE AREA POINTER
         LM    R14,R12,12(R13)    RESTORE CALLERS REGISTERS
         RETURN RC=0              RETURN TO CALLER
*
CONVCVD  DS    0H
*                                 SUBROUTINE TO CONVERT A HEXIDECIMAL
*                                 NUMBER TO DECIMAL AND PLACE THE
*                                 RESULT IN THE AREA SPECIFIED BY THE
*                                 SECOND PARAMETER.
         STM   R14,R12,12(R13)    SAVE CALLERS REGISTERS
         L     R02,0(,R01)        ADDRESS OF VALUE TO BE CONVERTED
         L     R02,0(,R02)        VALUE TO BE CONVERTED
         L     R03,4(,R01)        ADDRESS WHERE OUTPUT IS TO BE PLACED
         CVD   R02,UNPKAREA       CONVERT TO DECIMAL
         MVC   TEMPAREA,EDITMASK  MOVE MASK TO TEMPORARY AREA
         ED    TEMPAREA,UNPKAREA  EDIT TO INSERT COMMAS AND REMOVE
*                                 LEADING ZEROS
*
*    -------->   Copy the last 16 bytes of the 19-byte work area.
*
         MVC   0(L'TEMPAREA-3,R03),TEMPAREA+3   MOVE TO OUTPUT AREA
         LM    R14,R12,12(R13)    RESTORE CALLERS REGISTERS
         BR    R14                RETURN TO CALLER
*                                 DATA AREAS AND CONSTANTS
SAVE     DS    18F                SAVE AREA FOR REGISTERS ON ENTRY
REGN     DS    0F                 WORKAREA FOR VSREGN MACRO
ADDRBL   DC    F'0'               ADDRESS OF REGION BELOW 16M
LENBL    DC    F'0'               LENGTH OF REGION BELOW 16M
ADDRAB   DC    F'0'               ADDRESS OF REGION ABOVE 16M
LENAB    DC    F'0'               LENGTH OF REGION ABOVE 16M
UNPKAREA DC    D'0'               DOUBLE WORD WORK AREA
EDITMASK DC    X'402020202020206B2020206B2020206B202020' EDIT MASK
TEMPAREA DC    CL19' '            TEMPORARY AREA FOR EDIT OF VALUE
OUTAREA1 DS    0CL80              OUTPUT AREA FOR HEADERS
         DC    CL1' '             FILLER
         DC    CL16'AD Rgn below 16M'
         DC    CL2' '             FILLER
         DC    CL16'LN Rgn below 16M'
         DC    CL2' '             FILLER
         DC    CL16'AD Rgn above 16M'
         DC    CL2' '             FILLER
         DC    CL16'LN Rgn above 16M'
         DC    CL61' '            FILLER
OUTAREAU DC    CL80' ----------------  ----------------  --------------X
               --  ----------------'
         DC    C' '
OUTAREA2 DS    0CL80              OUTPUT AREA FOR DECIMAL VALUES
         DC    CL1' '             ASA FOR SKIP A LINE
REGSZBL  DC    CL16' '            ADDRESS OF REGION BELOW 16M
         DC    CL2' '             FILLER
REGLGBL  DC    CL16' '            LENGTH OF REGION BELOW 16M
         DC    CL2' '             FILLER
REGSZAB  DC    CL16' '            ADDRESS OF REGION ABOVE 16M
         DC    CL2' '             FILLER
REGLGAB  DC    CL16' '            LENGTH OF REGION ABOVE 16M
         DC    CL63' '            FILLER
NONXAMSG DS    0CL80              NON MVS/XA MESSAGE OUTPUT AREA
         DC    CL1'1'             SKIP TO NEW PAGE
         DC    CL2' '             FILLER
         DC    CL77'VSMRGN PROGRAM CAN NOT RUN ON 370 PROCESSOR'
*                                 PARAMETER LISTS
PARMLST1 DC    A(ADDRBL)          ADDRESS
         DC    A(REGSZBL)         WHERE TO PLACE ADDRESS
PARMLST2 DC    A(LENBL)           LENGTH
         DC    A(REGLGBL)         WHERE TO PLACE LENGTH
PARMLST3 DC    A(ADDRAB)          ADDRESS
         DC    A(REGSZAB)         WHERE TO PLACE ADDRESS
PARMLST4 DC    A(LENAB)           LENGTH
         DC    A(REGLGAB)         WHERE TO PLACE LENGTH
PATCH    DC    20XL1'00'          PATCH AREA
TITLMSG  DC    CL80'              VSMREGN Macro Sample Output  -  VersiX
               on 2.1'
TITLMSU  DC    CL80'              ------- ----- ------ ------     -----X
               -- ---'
         DS    0H
         DC    C' '
OUTLIN   DS    CL80
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R9                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV9HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         CVT   DSECT=YES          MAP THE CVT
         END   VSMRGN
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
