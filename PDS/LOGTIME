         TITLE '*** LOGTIME ***'
***********************************************************************
* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THIS USER'S  *
* CURRENT LOGON.  YOU MIGHT WANT TO KNOW HOW LONG YOU HAVE BEEN       *
* LOGGED ONTO TSO.                                                    *
***********************************************************************
* ------------------------------------------------------------------- *
*            CREDITS TO BILL GODFREY AND ALAN FIELD.                  *
* ------------------------------------------------------------------- *
* -    THIS VERSION OF LOGTIME USES PUTLINE TERMINAL OUTPUT     ----- *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ---------------------------------------------------------------- *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
* ---------------------------------------------------------------- *
LOGTIME  CSECT
LOGTIME  AMODE 31
LOGTIME  RMODE 24
         YREGS
         USING LOGTIME,R15         (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C' LOGTIME - &SYSDATE - &SYSTIME - '
         DC    C'SHOW TSO LOGON TIME FOR THIS SESSION '
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING LOGTIME,R12         (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
* ---------------------------------------------------------------- *
         MVI   BIGLINE-1,X'40'
         MVC   BIGLINE(L'BIGLINE),BIGLINE-1
         ICM   R1,15,0(R1)         POINT TO PARAMETER
         LH    R2,0(,R1)           PICK UP LENGTH
         BL    COMP4               ONLY ONE PARM
         SH    R2,=H'4'            SUBTRACT 2 1/2 WDS OF LENGTH
         SH    R2,2(,R1)           SUBTRACT LENGTH OF COMMAND NAME
         BZ    NOPARM              NO LENGTH LEFT, NO PARM
         AH    R1,2(,R1)           SKIP OVER COMMAND NAME
         LA    R1,4(,R1)           AND 4 BYTES OF LENGTH
COMP4    DS    0H
NOPARM   DS    0H
* ---------------------------------------------------------------- *
*        THE LOGON TIME IS IN THE PSCBLTIM FIELD OF THE PSCB,      *
*        BUT IT IS IN STCK FORMAT (DOUBLEWORD) AND IT HAS TO       *
*        BE INTERPRETED.  THAT'S WHAT THE TODCN AND JULSUB         *
*        PROGRAMS ARE FOR.                                         *
* ---------------------------------------------------------------- *
         USING CVTMAP,R11
         L     R11,16              FIND PSCB VIA JSCB
         L     R11,CVTTCBP         POINT TO NEW TCB WORD
         L     R11,4(,R11)         POINT TO OLD TCB WORD
         DROP  R11
         USING TCB,R11             ADDRESSABILITY TO TCB
         L     R11,TCBJSCB         GET JSCB ADDRESS
         DROP  R11
         USING IEZJSCB,R11         GET ADDRESSABILITY
         L     R11,JSCBPSCB        GET JSCB ADDRESS
         USING PSCB,R11
         MVC   TSTAMP(8),PSCBLTIM  GET LOGON TIME FOR FORMATTING.
* ---------------------------------------------------------------- *
*    THE REST OF THIS PROGRAM FORMATS THE LOGON DATE AND TIME.     *
* ---------------------------------------------------------------- *
         L     R15,16
         USING CVT,R15
         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST
         DROP  R15
         DROP  R11
         LA    R1,ARGS            -> TO ARGS FOR TODCN
         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER
         BALR  R14,R15            AND GO THERE
         MVC   TRET(2),=C'00'
         PACK  DOUBLE+4(4),TRET(7)
         LA    R1,PTRS
         L     R15,=V(JULSUB)
         BALR  R14,R15
         LA    R15,MSGDATA
         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK
         LA    R15,MSGDATA+9
BACK1    CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,BACK1
         LA    R15,2(,R15)
         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR
         LA    R15,20(,R15)
BACK2    CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,BACK2
         LA    R15,2(,R15)
         MVI   0(R15),C'('
         MVC   1(2,R15),TRET+2     YY
         MVI   3(R15),C'.'
         MVC   4(3,R15),TRET+4     DDD
         MVI   7(R15),C')'
         LA    R15,9(,R15)
         MVC   0(2,R15),=C'AT'
         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO
         MVC   0(8,R15),TRET+7     MOVE TIME IN
         MVI   2(R15),C':'         MOVE IN A COLON
         MVI   5(R15),C':'         MOVE IN A COLON
         APUT  MSG,LMSG            TELL CALLER
RETURN   DS    0H
*        MOREND
ENDIT    L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
         SR    R15,R15                    I
         BR    R14                          T
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* --------------------------------------------------------- *
         EJECT
SAVE     DS    9D
SAVE1401 DS    5F                  ONE EXTRA
HEXSAVE  DS    3F
SAV4HEX  DC    F'0'
         DC    C' '
BIGLINE  DC    CL50' '
MSG      DC    C'LOGON TIME WAS ON '
MSGDATA  DC    CL60' '
LMSG     EQU   *-MSG
ARGS     DC    A(TZONE)
         DC    A(TSTAMP)
         DC    X'80',AL3(TRET)
TZONE    DC    F'0'
TSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'
TRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM
* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION
DOUBLE   DS    D
INPARM   DC    F'3'
DAYDATE  DC    CL48' '
OUTPARM  DC    AL4(16+128)
WORK     DS    32D
PTRS     DC    AL4(DOUBLE+4)
         DC    AL4(INPARM)
         DC    AL4(DAYDATE)
         DC    AL4(OUTPARM)
         DC    X'80',AL3(WORK)
         SPACE
         DS    0F
         EJECT
         IKJTCB
         SPACE 5
         IEZJSCB
         SPACE 5
         IKJPSCB
         SPACE 5
         CVT   DSECT=YES
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
TODCN    CSECT
TODCN    AMODE 31
TODCN    RMODE 24
         YREGS
         USING TODCN,R15           (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C' TODCN - &SYSDATE - &SYSTIME - '
         DC    C'SHOW TSO LOGON TIME FOR THIS SESSION '
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING TODCN,R12           (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
***********************************************************************
* FUNCTION: CONVERT A 64 BIT TIMESTAMP OBTAINED BY STCK INTO A
*           CHARACTER STRING GIVING YEAR, JULIAN DATE AND TIME OF DAY
*
* REVERSE ENGINEERED FROM AMDPRDMP AMDPRSEG
*         BY ALAN C FIELD, OZARK AIR LINES, ST. LOUIS, MO.
*
* THE ENTRY CONDITIONS TO TODCNVRT ARE:
*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS
*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT
*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK
*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA
*           VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM
* THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW
***********************************************************************
         LA    R2,1            A F'1' MEANING 'RETURN FULL DATE'
*        LA    R2,2            TO GET TIME IN SSSSS.MMMMMM FORM
         SR    R0,R0                       CLEAR REG
         SPM   R0                          DISABLE FIXED POINT OVFLW
         L     R7,4(,R1)                   POINT TO TIMESTAMP
         MVC   TIMESTMP(8),0(R7)           MOVE IT TO OUR AREA
*        TM    127(R12),X'20'              REQUIRED TO OFFSET FOR GMT?
*        BNO   LAB1                        NO
         L     R7,0(,R1)                   GET CVTTZ, TIME ZONE DIFF
         ICM   R14,15,0(R7)                PUT IT INTO A REGISTER
         AL    R14,TIMESTMP                ADD IT TO THE TIMESTAMP
         ST    R14,TIMESTMP                STORE IT BACK
LAB1     LM    R4,R5,TIMESTMP              GET TIMESTAMP INTO REGS
         SRDL  R4,12                       DIVIDE BY 4096
         D     R4,SIXMILL                  DIVIDE RESULT BY ...
         LR    R7,R2                       COPY
         SLA   R7,2                        MULTIPLY BY 4
         L     R7,ATAB(R7)                 BRANCH TABLE
         BR    R7                          GO TO RIGHT PLACE
         SPACE
RELTVTME L     R7,4(,R1)                   POINT TO TIMESTAMP
         CLC   0(8,R7),TIME2               COMPARE IT WITH ...
         BNE   TOD1A
         L     R7,8(,R1)                   -> TO RETURN AREA
         MVI   12(R7),C' '                 MOVE IN A BLANK
         MVC   13(11,R7),12(R7)            AND BLANK LAST HALF
         MVC   0(12,R7),ZERO1              MOVE IN ....
         LA    R15,4                       SET RETURN CODE
         B     FIN                         RETURN
         SPACE
TOD1A    LA    R7,WORK2
         L     R14,MILLION
         LR    R15,R4                      COPY REGISTER
         ST    R14,WORK1
         SLR   R14,R14                     CLEAR REG
         D     R14,WORK1                   DIVIDE BY ...
         ST    R15,0(,R7)                  STORE RESULT IN
         LR    R14,R4                      COPY REGISTER
         SRDA  R14,32                      DIVIDE
         D     R14,WORK1
         LR    R4,R14                      COPY REG
         L     R2,8(,R1)                   POINT TO RETURN AREA
         LA    R2,6(,R2)                   AND POINT 6 BYTES IN
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(6,R2),TIMESTMP+4(4)       AND PRINTABLE
         OI    5(R2),X'F0'                 INCL LAST CHAR
         L     R7,8(,R1)                   POINT TO RETURN AREA
         MVI   5(R7),X'4B'                 MOVE IN A PERIOD
         LR    R14,R5                      COPY REG
         SRDA  R14,32                      DIVIDE BY ...
         D     R14,MINSPDAY                MINUTES IN A DAY
         MH    R14,=H'60'                  MULTIPLY BY 60
         LA    R15,WORK2                   -> TO ...
         AL    R14,0(,R15)
         LR    R4,R14                      COPY REG
         LR    R2,R7                       COPY REG
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(5,R2),TIMESTMP+5(3)       AND PRINTABLE
         OI    4(R2),X'F0'                 MAKE IT PRINTABLE
         SLR   R15,R15                     SET RC
         B     FIN                         GO BACK
         SPACE
FULLDATE L     R7,4(,R1)                   POINT TO INPUT TIMESTAMP
         CLC   0(8,R7),TIME2               COMPARE WITH ...
         BNE   TOD2A                       NOT EQUAL, GO TO ...
         L     R7,8(,R1)                   POINT TO RETURN AREA
         MVI   22(R7),C' '                 MOVE IN A BLANK
         MVI   23(R7),C' '                 MOVE IN A BLANK
         MVC   0(22,R7),ZERO2              MOVE ....
         LA    R15,4                       SET RC
         B     FIN                         RETURN
         SPACE
TOD2A    LA    R7,WORK2                    POINT TO ...
         L     R14,MILLION                 LOAD IN A MILLION
         LR    R15,R4                      COPY REG
         ST    R14,WORK1                   SAVE IT IN WORK
         SLR   R14,R14                     CLEAR IT
         D     R14,WORK1                   DIVIDE BY 10E6
         ST    R15,0(,R7)                  STORE IT IN WORK
         LR    R14,R4                      COPY AGAIN
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,WORK1                   DIVIDE BY 10E6
         LR    R4,R14                      COPY
         L     R2,8(,R1)                   -> TO 3ND ARG, RETURN AREA
         LA    R2,16(,R2)                  AND POINT 16 BYTES IN
         CVD   R4,TIMESTMP                 CONVERT TO DECIMAL
         UNPK  0(6,R2),TIMESTMP+4(4)       MOVE IN DECIMALS OF SECS
         OI    5(R2),X'F0'                 LAST DIGIT PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   15(R7),X'4B'                MOVE IN A PERIOD
         LA    R14,WORK2                   -> WORK
         L     R4,0(,R14)                  GET DATA PTD TO BY R14
         LA    R2,13(,R7)                  -> TO SS IN RETURN AREA
         CVD   R4,TIMESTMP                 CONVERT SECONDS
         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT IN
         OI    1(R2),X'F0'                 PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   12(R7),X'4B'                MOVE IN A PERIOD
         LA    R14,60                      GET A 60
         LR    R15,R5                      COPY REG
         ST    R14,WORK1                   SAVE OUR 60
         SLR   R14,R14                     CLEAR A REG
         D     R14,WORK1                   DIVIDE BY 60
         ST    R15,WORK2                   SAVE RESULT
         LR    R14,R5                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE BY 60
         LR    R4,R14                      COPY
         LA    R2,10(,R7)                  -> TO MM IN RETURN AREA
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA
         OI    1(R2),X'F0'                 MAKE IT PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   9(R7),X'4B'                 MOVE IN A PERIOD
         L     R5,WORK2                    COPY
         LA    R14,24                      HOURS IN A DAY
         LR    R15,R5                      COPY
         ST    R14,WORK1                   SAVE OUR 24
         SLR   R14,R14                     CLEAR IT
         D     R14,WORK1                   DIVIDE BY 24
         ST    R15,WORK2                   SAVE RESULT
         LR    R14,R5                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE BY 24
         LR    R4,R14                      COPY
         LA    R2,7(,R7)                   -> POINT TO HH IN RESULT
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(2,R2),TIMESTMP+6(2)       AND PRINTABLE
         OI    1(R2),X'F0'                 ..
         L     R7,WORK2                    GET OUR VALUE
         C     R7,FOURYR                   COMPARE WITH DAYS IN 4 YR
         BNL   A3C
         L     R7,WORK2                    GET IT AGAIN
         LA    R14,365                     DAYS IN A YEAR
         ST    R14,WORK1                   SAVE IT
         LR    R14,R7                      COPY
         SRDA  R14,32                      MOVE IT DOWN AGAIN
         D     R14,WORK1                   DIVIDE BY DAYS IN YR
         AL    R14,F1                      ADD ONE
         LR    R3,R14                      COPY
         LR    R14,R7                      COPY
         SRDA  R14,32                      MOVE IT DOWN AGAIN
         D     R14,WORK1                   DIVIDE
         AL    R15,F2000                   ADD IN 2000
         LR    R6,R15                      COPY
         B     AAC
A3C      L     R7,WORK2                    COPY
         SL    R7,FOURYR                   SUBTRACT DAYS IN 4 YEARS
         ST    R7,WORK2                    SAVE IT
         LA    R14,1461                    DAYS IN 4 YRS, INCL LEAP
         ST    R14,WORK1                   SAVE IT
         LR    R14,R7                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE
         LR    R5,R15                      COPY
         LR    R14,R7                      COPY
         SRDA  R14,32                      SHIFT IT
         D     R14,WORK1                   DIVIDE
         LR    R4,R14                      COPY
         LR    R15,R4                      COPY
         SLR   R14,R14                     CLEAR
         D     R14,TWOYEAR                 DAYS IN 2 YEARS
         LR    R14,R15                     COPY
         ALR   R14,R4                      ADD
         LR    R15,R4                      COPY
         ST    R14,WORK1                   SAVE IT
         SLR   R14,R14                     CLEAR
         D     R14,THREEYR                 DAYS IN 3 YEARS
         LR    R14,R15                     COPY
         AL    R14,WORK1                   ADD
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,LEAPYEAR                DAYS IN A LEAP YEAR
         AL    R14,F1                      ADD 1
         LR    R3,R14                      COPY
         LR    R6,R5                       COPY
         SLA   R6,2                        MULTIPLY BY 4
         AL    R6,F2004                    1904
         LR    R14,R4                      COPY
         BCTR  R14,0                       SUBTRACT 1
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,YEAR                    DAYS IN A YEAR
         ALR   R6,R15                      ADD
AAC      L     R2,8(,R1)                   -> 3RD ARG
         LA    R2,4(,R2)                   -> DDD IN RETURN FIELD
         CVD   R3,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(3,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA
         OI    2(R2),X'F0'                 MAKE IT PRINTABLE
         L     R2,8(,R1)                   -> 3RD ARG
         CVD   R6,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(4,R2),TIMESTMP+5(3)       MOVE IN YYYY
         OI    3(R2),X'F0'                 MAKE IT PRINTABLE
         SLR   R15,R15                     SET RC
FIN      EQU   *
         SPM   R3                          TURN ON FIXED OVFLW
*        MOREND RC=(15)
ENDIT    L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
*        SR    R15,R15                    I
         BR    R14                          T
         DS    0D                          ALIGN ON DOUBLEWORD
SAVE     DS    9D
TIMESTMP DC    CL8' '
TIME2    DC    CL8' '
WORK1    DC    F'0'
WORK2    DC    F'0'
F1       DC    F'00001'
F4       DC    F'00004'
F5       DC    F'00005'
F8       DC    F'00008'
F9       DC    F'00009'
F12      DC    F'00012'
YEAR     DC    F'00365'
LEAPYEAR DC    F'00366'
TWOYEAR  DC    F'00731'
THREEYR  DC    F'01096'
MINSPDAY DC    F'01440'
FOURYR   DC    F'01460'      DAYS IN 4 YRS, EXCL LEAP YEAR
F2000    DC    F'02000'
F2004    DC    F'02004'
MILLION  DC    F'1000000'
SIXMILL  DC    F'60000000'               SIXTY MILLION
ZERO1    DC    C'00000.000000'           SSSSS.MMMMMM (SINCE MIDNIGHT)
ZERO2    DC    C'000000000.00.00.000000' YYYYDDDHH.MM.SS.MMMMMM
ATAB     DC    A(0)
         DC    A(FULLDATE)
         DC    A(RELTVTME)
         END
         TITLE '   J U L S U B   '
*--------------------------------------------------------------------*
*
*        'JULSUB'
*
*
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. JUNE 4 1976.
*        DATE UPDATED. APRIL 23 1980.
*        ATTRIBUTES. RE-ENTRANT.
*        REMARKS.
*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT
*            TO ANOTHER. THE DIFFERENT FORMATS ARE:
*
*            INPUT
*               1   JULIAN       BINARY    F'YYYYDDD'
*               2   STANDARD     BINARY    F'YYYYMMDD'
*               3   JULIAN       PACKED    PL4'YYYYDDDF'
*
*            OUTPUT
*               1   JULIAN       BINARY    F'YYYYDDD'
*               2   STANDARD     BINARY    F'YYYYMMDD'
*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'
*               8   ALPHA        8-CHAR    CL8'03JUN76 '
*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'
*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH
*                                               2 - LAST OF MONTH
*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)
*             128   WEEKDAY      8-CHAR    CL8'SATURDAY'
*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'
*             512   TIME         8-CHAR    CL8'HH:MM:SS'
*
*            INPUT MUST BE EITHER JULIAN OR STANDARD.
*
*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES
*            POINTED TO BY REGISTER 1
*               1   THE INPUT DATE
*               2   A FULLWORD CONTAINING THE NUMERIC CODE
*                   WHICH DEFINES THE INPUT FORMAT
*               3   THE RECEIVING FIELD FOR OUTPUT
*               4   A FULLWORD CONTAINING THE NUMERIC CODE
*                   WHICH DEFINES THE OUTPUT FORMAT
*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)
*            NOTES.
*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.
*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.
*--------------------------------------------------------------------*
         SPACE 1
INP001   EQU   1
INP002   EQU   2
INP003   EQU   3
OUT001   EQU   1
OUT002   EQU   2
OUT004   EQU   4
OUT008   EQU   8
OUT016   EQU   16
OUT032   EQU   32
OUT064   EQU   64
OUT128   EQU   128
OUT256   EQU   1
OUT512   EQU   2
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
JULSUB   AMODE 24
JULSUB   RMODE 24
JULSUB   CSECT
         SAVE  (14,12),,JULSUB_&SYSDATE._&SYSTIME
         LR    R12,15
         USING JULSUB,R12
         LR    R2,R1
*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS
         L     R1,16(,R1)          GET 5TH WORD ADDR OF 256 BYTE WORK
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         LR    R1,R2
         USING @DATA,R13
         SPACE 1
*--------------------------------------------------------------------*
*        R2 - ADDRESS OF INPUT DATE
*        R3 - ADDRESS OF FULL WORD WITH OPTION CHOICE 1/2/3
*        R4 - ADDRESS OF RECEIVING FIELD
*        R5 - FULL WORD OF CODE DEFINING OUTPUT FORMAT.
*--------------------------------------------------------------------*
         SPACE 1
         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR
         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR
         MVC   INPUT(4),0(R2)      COPY INPUT
         XC    DOUBLE,DOUBLE
         SLR   R14,R14             ZERO R14
         ST    R14,FRSTLAST        INIT VALUE TO ZERO
         ST    R14,TIMEB           INIT VALUE TO ZERO
         CLI   3(R3),INP003        TEST FOR OPT 3, PACKED?
         BNE   INP01               NO - BRANCH
         SPACE 1
*--------------------------------------------------------------------*
*        PROCESS JULIAN PACKED INPUT
*--------------------------------------------------------------------*
         SPACE 1
         ST    R14,DOUBLE          INIT VALUE TO ZERO            Y2K
         MVC   DOUBLE+4(4),INPUT   GET FULL INPUT FIELD
         CVB   R1,DOUBLE
         ST    R1,JB
JULCOMM  EQU   *
         L     R14,DOUBLE+4        SAVE YYYYDDDF                 Y2K
         LH    R1,DOUBLE+4         GET YYYY                      Y2K
         SLL   R1,16               GET YYYY0000                  Y2K
         SRL   R1,12               GET 000YYYY0                  Y2K
         ST    R1,DOUBLE+4         STORE BACK 000YYYY0           Y2K
         OI    DOUBLE+7,X'0F'      SET SIGN                      Y2K
         CVB   R1,DOUBLE
         ST    R1,YYYYB
*        CH    R1,=H'99'                                         Y2K
*        BH    *+8                                               Y2K
*        AH    R1,=H'1900'                                       Y2K
         ST    R1,CENTB
         UNPK  YYYYC,DOUBLE+5(3)   SAVE YYYY CHAR
         MVC   YYC,YYYYC+2
         SPACE 1
         ST    R14,DOUBLE+4        RESTORE 00YYDDDF
         XC    DOUBLE(6),DOUBLE    00YYDDDF TO 0000DDDF
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR
         CVB   R1,DOUBLE           CONVERT DDD TO BINARY
         ST    R1,DDDB             SAVE DDD BINARY
         SPACE 1
         BAL   R9,TODD
         BAL   R9,TOSB
         BAL   R9,TOMON
         BAL   R9,TOPROSE
         BAL   R9,TOWEEK
         BAL   R9,TOTIME
         BAL   R9,OUTPUT
         B     EXIT0
         SPACE 1
INP01    EQU   *
         CLI   3(R3),INP001        INPUT JULIAN BINARY?
         BNE   INP02               NO - BRANCH
         L     R1,INPUT            GET BINARY YYYYDDD
         LTR   R1,R1               ZERO?
         BNZ   INP01A              NO - BRANCH
         TIME  BIN
         ST    R0,TIMEB            SAVE TIME
         SLR   R0,R0
         STM   R0,R1,DOUBLE
         AP    DOUBLE+4(4),=PL4'1900000'                         Y2K
         CVB   R1,DOUBLE
         B     INP01B
         SPACE 1
INP01A   CVD   R1,DOUBLE           TO DECIMAL
INP01B   ST    R1,JB
         B     JULCOMM             PROCEED AS IF INP003
         SPACE 1
*--------------------------------------------------------------------*
*        CONVERT JULIAN DATE TO MONTH-DAY-YEAR
*
*            INPUT  - YYYYB AND DDDB   (ALSO YYC)
*
*            OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST
*--------------------------------------------------------------------*
         SPACE 1
TODD     EQU   *
         MVC   DPM(26),DAYSPMON
         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?
         BNZ   DPM365              NO - BRANCH
         CLC   YYC,=C'00'          DIVISIBLE BY 100?
         BNE   DPM366              NO - BRANCH
         L     R15,CENTB
         SLR   R14,R14
         D     R14,=F'400'
         LTR   R14,R14             EVENLY DIVISIBLE BY 400?
         BNZ   DPM365              NO - NOT A LEAP YEAR
DPM366   EQU   *
         MVI   DPM+3,29            CHANGE FEB TO 29 DAYS
DPM365   EQU   *
         LA    R14,2               INDEX FOR DPM
         LR    R0,R14              INDEX INCREMENT
         L     R1,DDDB             DAY OF YEAR
DPMLOOP  EQU   *
         CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?
         BE    DPMEND              EQUAL - BRANCH
         BL    DPMWIN              LESS - BRANCH
         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY
         ALR   R14,R0              ADD 2 TO INDEX
         B     DPMLOOP             LOOP
         SPACE 1
DPMEND   EQU   *
         MVI   FRSTLAST+3,2        LAST DAY OF MONTH
         B     DPMCOMM
         SPACE 1
DPMWIN   EQU   *
         CH    R1,=H'1'            FIRST OF MONTH?
         BNE   DPMCOMM             NO - BRANCH
         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH
DPMCOMM  EQU   *
         SRL   R14,1               HALVE INDEX TO GET MM
         ST    R1,DDB              SAVE DD BINARY
         CVD   R1,DOUBLE           CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR
         ST    R14,MMB             SAVE MM BINARY
         CVD   R14,DOUBLE          CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR
         MVI   SLASH1,C'/'
         MVI   SLASH2,C'/'
         BR    R9
         SPACE 1
*--------------------------------------------------------------------*
*        CONVERT MONTH NUMBER TO MONTH NAME
*
*           INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)
*
*           OUTPUT - MONTH AND ALPHA
*--------------------------------------------------------------------*
         SPACE 1
TOMON    EQU   *
         L     R15,MMB
         MH    R15,=H'9'           MULT BY 9
         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY
         MVC   MONTH,0(R15)        SAVE PROSE MONTH
         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH
         MVC   ALPHA(2),DDC
         MVC   ALPHA+5(2),YYC
         MVI   ALPHA+7,C' '
         BR    R9
         SPACE 1
*--------------------------------------------------------------------*
*        BUILD PROSE DATE
*
*           INPUT  - MONTH, DDC, YYYYC
*--------------------------------------------------------------------*
         SPACE 1
TOPROSE  EQU   *
         TM    3(R5),OUT016
         BZR   R9
         MVI   PROSE,C' '
         MVC   PROSE+1(L'PROSE-1),PROSE
         MVC   PROSE(9),MONTH
         LA    R1,PROSE+9
PROSE01  EQU   *
         CLI   0(R1),C' '          BLANK?
         BNE   PROSE02             NO - FOUND LAST LETTER
         BCT   R1,PROSE01          BACK UP AND BRANCH
PROSE02  EQU   *
         MVC   2(2,R1),DDC
         CLI   2(R1),C'0'          LEADING ZERO?
         BNE   PROSE03             NO - BRANCH
         MVC   2(1,R1),3(R1)       YES - SHIFT
         MVI   3(R1),C' '
         BCTR  R1,0
PROSE03  EQU   *
         MVI   4(R1),C','          COMMA AFTER DAY
         LA    R1,1(,R1)           ADD 1 FOR COMMA
         MVC   5(4,R1),YYYYC
         CLC   5(2,R1),=C'00'                                    Y2K
         BNE   *+10                                              Y2K
         MVC   5(2,R1),=C'20'                                    Y2K
         BR    R9
         SPACE 1
*--------------------------------------------------------------------*
*        INPUT IS YYYY/MM/DD BINARY
*--------------------------------------------------------------------*
         SPACE 1
INP02    EQU   *
         L     R1,INPUT
         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF
         LM    R14,R15,DOUBLE
         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF
         CVB   R1,DOUBLE
         ST    R1,DDB
         OI    DOUBLE+7,X'0F'
         UNPK  DDC,DOUBLE+6(2)
*
         STM   R14,R15,DOUBLE
         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F
         L     R1,DOUBLE+4
         SRL   R1,8
         ST    R1,DOUBLE+4
         OI    DOUBLE+7,X'0F'
         CVB   R1,DOUBLE
         CH    R1,=H'12'
         BNH   *+8
         LA    R1,13               SET ALL BAD MONTHS TO 13
         ST    R1,MMB
         UNPK  MMC,DOUBLE+6(2)
*
         SRDL  R14,4               GET YYYYMMDD
         SLR   R14,R14             GET 00000000 IN R14
         SRL   R15,12              GET 000YYYYM IN R15
         STM   R14,R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         CVB   R1,DOUBLE
         ST    R1,YYYYB
*        CH    R1,=H'99'                                         Y2K
*        BH    *+8                                               Y2K
*        AH    R1,=H'1900'                                       Y2K
         ST    R1,CENTB
         UNPK  YYYYC,DOUBLE+5(3)
         MVC   YYC,YYYYC+2
         MVI   SLASH1,C'/'
         MVI   SLASH2,C'/'
*
         BAL   R9,TOSB
         BAL   R9,TOJUL
         BAL   R9,TOMON
         BAL   R9,TOPROSE
         BAL   R9,TOWEEK
         BAL   R9,TOTIME
         BAL   R9,OUTPUT
         B     EXIT0
         SPACE 1
*--------------------------------------------------------------------*
*        CONVERT M/D/Y TO JULIAN
*
*           INPUT  - MMB, DDB, YYYYB
*
*           OUTPUT - DDDB, DDDC, JB
*--------------------------------------------------------------------*
         SPACE 1
TOJUL    EQU   *
         MVC   DPM(26),DAYSPMON
         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?
         BNZ   JUL365              NO - BRANCH
         CLC   YYC,=C'00'          DIVISIBLE BY 100?
         BNE   JUL366              NO - BRANCH
         L     R15,CENTB
         SLR   R14,R14
         D     R14,=F'400'
         LTR   R14,R14             EVENLY DIVISIBLE BY 400?
         BNZ   JUL365              NO - NOT A LEAP YEAR
JUL366   EQU   *
         MVI   DPM+3,29             CHANGE FEB TO 29 DAYS
JUL365   EQU   *
         L     R15,DDB              GET DAYS IN CURRENT MONTH
         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY
         L     R14,MMB              GET CURRENT MONTH
         BCTR  R14,0                GET NO. OF COMPLETED MONTHS
         LA    R1,DPM
         LTR   R14,R14              JANUARY?
         BNP   JULEND               YES - BRANCH
         B     *+8
JULOOP   EQU   *
         LA    R1,2(,R1)            POINT TO NEXT MONTH
         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL
         BCT   R14,JULOOP
JULEND   EQU   *
         CH    R0,0(,R1)            LAST DAY OF MONTH?
         BNE   *+8                  NO
         MVI   FRSTLAST+3,2         YES
         CH    R0,=H'1'             FIRST DAY OF MONTH?
         BNE   *+8                  NO
         MVI   FRSTLAST+3,1         YES
         ST    R15,DDDB             SAVE DDD
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'       SET SIGN
         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR
         MVC   JC(4),YYYYC                                       Y2K
         PACK  DOUBLE,JC                                         Y2K
         CVB   R1,DOUBLE
         ST    R1,JB
         BR    R9
         SPACE 1
*
*
*
         SPACE 1
TOSB     EQU   *
         MVC   WORK(4),YYYYC
         MVC   WORK+4(2),MMC
         MVC   WORK+6(2),DDC
         PACK  DOUBLE,WORK(8)
         CVB   R1,DOUBLE
         ST    R1,SB
         BR    R9
         SPACE 1
*--------------------------------------------------------------------*
*        GET DAY OF WEEK
*
*            INPUT  - MMB, DDB, YYYYB
*
*            OUTPUT - WEEKB, WEEKC
*
*            N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2
*
*               WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)
*
*               N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY
*--------------------------------------------------------------------*
         SPACE 1
TOWEEK   EQU   *
         TM    3(R5),OUT064+OUT128
         BZR   R9
         L     R1,DDB              SET N = D
         L     R15,CENTB
         L     R14,MMB
         CH    R14,=H'2'           JAN OR FEB?
         BH    WEEKMMOK
         BE    WEEKFEB
         LA    R14,13              SET M=13
         B     WEEKYMIN
         SPACE 1
WEEKFEB  EQU   *
         LA    R14,14              SET M=14
WEEKYMIN EQU   *
         BCTR  R15,0               SET Y = Y-1
WEEKMMOK EQU   *
         LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N = N + 2M
         LR    R0,R15              SAVE REDEFINED Y
         SPACE 1
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT INTO R15, ZERO R14
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE 1
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE 1
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE 1
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SLR   R0,R0               ZERO R0
         D     R0,=F'7'            SET N = N/7
         ST    R0,WEEKB            SAVE REMAINDER
         LR    R1,R0
         MH    R1,=H'9'
         LA    R14,WEEKDAYS(R1)    POINT TO NAME
         MVC   WEEKC(9),0(R14)     MOVE NAME
         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS
         BR    R9
         SPACE 1
*--------------------------------------------------------------------*
*        CONVERT TIMEB TO TIMEC
*
*           DIVIDE BY 10,10,10,6,10,6,10,6
*--------------------------------------------------------------------*
         SPACE 1
TOTIME   EQU   *
         TM    2(R5),OUT512
         BNOR  R9
         L     R15,TIMEB
         LA    R6,10               INITIAL DIVISOR
         LA    R7,12               SET DIVISOR MASK
         LA    R8,32               SHIFT COUNT
DECLOOP  EQU   *
         SR    R14,R14
         DR    R14,R6
         LR    R0,R14              SAVE REMAINDER
         SRDL  R0,4                SHIFT INTO R1
         SH    R8,=H'4'            DECREMENT SHIFT COUNT
         LTR   R15,R15             QUOTIENT ZERO?
         BZ    TOTIMX              YES - BRANCH
         CL    R8,=F'24'           IF COUNT LT 24
         BNL   DECLOOP             NO - BRANCH
         XR    R6,R7               10 TO 6 TO 10 ETC
         B     DECLOOP
         SPACE 1
TOTIMX   EQU   *
         SRL   R1,0(R8)            SHIFT REMAINING BITS
         SRL   R1,4                GET 0HHMMSST
         ST    R1,DOUBLE
         OI    DOUBLE+3,X'0F'
         MVC   DOUBLE+6(10),=X'402120204B20204B2020'
         ED    DOUBLE+6(10),DOUBLE
         MVC   TIMEC,DOUBLE+8
         BR    R9
         SPACE 1
*---------------------------------------------------------------------*
*        FORMAT THE OUTPUT AREA BASED UPON 4TH WORD IN PARM LIST.
*---------------------------------------------------------------------*
         SPACE 1
OUTPUT   EQU   *
         LR    R1,R4               GET THE NUMBER
         TM    3(R5),OUT001        IS IT 1 - JULIAN BINARY F"YYYYDDD"
         BZ    *+14
         MVC   0(4,R1),JB          4 CHARACTERS LONG
         LA    R1,4(,R1)
         TM    3(R5),OUT002        IS IT 2 - STD BINARY F"YYYYMMDDD"
         BZ    *+14
         MVC   0(4,R1),SB          4 CHARACTERS LONG
         LA    R1,4(,R1)
         TM    3(R5),OUT004        IS IT 4 - STD CHAR "MM/DD/YY"
         BZ    *+14
         MVC   0(8,R1),SC          8 CHARACTERS LONG
         LA    R1,8(,R1)
         TM    3(R5),OUT008        IS IT 8 - ALPHA "03JUN76 "
         BZ    *+14
         MVC   0(8,R1),ALPHA       8 CHARACTERS LONG
         LA    R1,8(,R1)
         TM    3(R5),OUT016        IS IT 16 - 20CHAR "JUNE 3 1976  "
         BZ    *+14
         MVC   0(L'PROSE,R1),PROSE
         LA    R1,L'PROSE(,R1)
         TM    3(R5),OUT032        IS IT 32 - FIRST/LAST  ( 0 / 1 )
         BZ    *+14
         MVC   0(4,R1),FRSTLAST    4 BYTES
         LA    R1,4(,R1)
         TM    3(R5),OUT064        IS IT 64 - WEEKDAY CODE 0-SAT/6-FRI
         BZ    *+14
         MVC   0(4,R1),WEEKB       4 BYTES
         LA    R1,4(,R1)
         TM    3(R5),OUT128        IS IT 128 - WEEKDAY NAME
         BZ    *+14
         MVC   0(12,R1),WEEKC      12 BYTES
         LA    R1,12(,R1)
         TM    2(R5),OUT256        IS IT 256 - TIME BINARY
         BZ    *+14
         MVC   0(4,R1),TIMEB       4 BYTES
         LA    R1,4(,R1)
         TM    2(R5),OUT512        IS IT 512 - TIME 8 CHAR HH:MM:SS
         BZ    *+14
         MVC   0(8,R1),TIMEC       8 BYTES
         LA    R1,8(,R1)
         BR    R9
         SPACE 1
EXIT0    SR    R15,R15
EXIT     LR    R1,R13
         L     R13,4(,R13)
         ST    R15,16(,R13)
*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)
         LM    R14,R12,12(R13)
         BR    R14
         SPACE 1
*--------------------------------------------------------------------*
*        CONSTANTS
*--------------------------------------------------------------------*
         SPACE 1
DAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'
ALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '
         DC    CL36'MAY      JUNE     JULY     AUGUST   '
         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '
         DC    CL09'UNKNOWN  '
WEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '
         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '
WEEKBLNK EQU   WEEKDAYS+15         3 BLANKS
         LTORG
         SPACE 1
*--------------------------------------------------------------------*
*        DSECTS
*--------------------------------------------------------------------*
         SPACE 1
@DATA    DSECT
         DS    18F
INPUT    DS    CL8
DOUBLE   DS    D
WORK     DS    8C
SC       DS    0CL8
MMC      DS    CL2
SLASH1   DS    C
DDC      DS    CL2
SLASH2   DS    C
YYC      DS    CL2
YYYYC    DS    CL4
DDB      DS    F
MMB      DS    F
YYYYB    DS    F
CENTB    DS    F
DDDB     DS    F
JB       DS    F
SB       DS    F
WEEKB    DS    F
FRSTLAST DS    F
TIMEB    DS    F
TIMEC    DS    CL8
JC       DS    0CL7                                              Y2K
         DS    CL4                                               Y2K
DDDC     DS    CL3
MONTH    DS    CL9
ALPHA    DS    0CL8
         DS    CL2
MON      DS    CL3
         DS    CL2
         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA
WEEKC    DS    CL12
PROSE    DS    CL20
DPM      DS    13H
@DATAL   EQU   *-@DATA
         SPACE 1
         END
