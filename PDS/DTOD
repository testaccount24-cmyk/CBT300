//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,
//    MSGCLASS=X,NOTIFY=&SYSUID
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT,RENT'
//SYSIN     DD *
DTOD     TITLE '*** "DTOD" *** TSO COMMAND PROCESSOR &SYSDATE'
***********************************************************************
* DTOD                                                                *
* =====                                                               *
*        THIS PROGRAM ALLOWS YOU TO ENTER A TIME IN STCK FORMAT       *
*        AND IT INTERPRETS IT AS AN EXACT TIME.                       *
*                                                                     *
*        EXAMPLE:   DTOD D565353F6689C002      (16 BYTES)             *
*                                                                     *
*        RESULT :   (All stretched out on one line)                   *
*        Date: Tuesday, 18th of December 2018 (12/18/18 2018.352)     *
*              Time: 02:56:28.1                                       *
*                                                                     *
*        ADAPTED FROM PROGRAM  QTOD  BY  THOMAS RAMSEIER.             *
*                                                                     *
*        All I did, was to create the routine GETPARM to convert      *
*        the parm to STCK format.  Ramseier's code did the rest.      *
*                                                                     *
*        Date adapted:  Dec 18, 2018                                  *
*                                                                     *
*        Adapter     :  Sam Golob                                     *
*                                                                     *
*        Note:  The HEX macro was only included so I could test       *
*               the converted parm, to see if it matched the 16-byte  *
*               original parm.  The HEX macro display reverses the    *
*               GETPARM routine, as follows:                          *
*                                                                     *
*        HEX   TESTDDW,8,OURDDW    DISPLAY 8 BYTES OF HEX NUMBERS     *
*        TPUT  TESTDDW,16          SHOW THE RESULT ON THE SCREEN      *
*                                                                     *
*        Assembly requires TODPRINT macro from CBT File 483.          *
*                                                                     *
***********************************************************************
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8                      UNUSED
R9       EQU   9
R10      EQU   10                     BAL
R11      EQU   11                     STORAGE OBTAINED AREA
R12      EQU   12                     BASE #1
R13      EQU   13                     HIGHER SAVE-AREA
R14      EQU   14                     BAKR
R15      EQU   15                     RC
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
DTOD     CSECT
DTOD     AMODE 31
DTOD     RMODE ANY
         SPACE 2
         BAKR  14,0                  ESTABLISH LINKAGE-CONVENTIONS
         LR    R12,R15               LOAD TEMPORARY BASE TO MY BASE
         USING DTOD,R12              TELL ASSEMBLER
         LR    R3,R1                 ESTABLISH CPPL'S  ADDRESSABILITY
GETSTOR  DS    0H
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=BELOW ET WORKING STORAGE
         LR    R11,R1                ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R11             TELL ASSEMBLER
         BAL   R10,LOADCPPL          SAVE CPPL
         BAL   R10,GETPARM
         BAL   R10,CALLMAC           CONVERT TODSTAMP
         BAL   R10,PUTLBSNS          PRINT IT OUT
*
ENDIT    DS    0H
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R11)  FREE OBTAINED STOR.
         XR    R15,R15               SET RC=0
         PR                          END DTOD + CLEANUP
*
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
LOADCPPL ST    R10,SAVE10
         USING CPPL,R3               GET THE ADDRESSES IN CPPL
         MVC   CPLCBUF,CPPLCBUF      MOVE COMM.-BUFFER ADDR TO MY AREA
         MVC   CPLUPT,CPPLUPT        MOVE USERPROFTAB ADDR TO MY AREA
         MVC   CPLPSCB,CPPLPSCB      MOVE PROT.STEP-CB ADDR TO MY AREA
         MVC   CPLECT,CPPLECT        MOVE ECT-ADDRESS TO MY AREA
         L     R10,SAVE10
         BR    R10
*
*
GETPARM  DS    0H                  CONVERT 16-BYTE DISPLAY FORMAT
         ST    R10,SAVE10            TO 8-BYTE STCK HEX FORMAT.
         STM   R1,R3,SAVE123       SAVE WORK REGISTERS
         LR    R1,R3               REPOINT R1 TO CPPL OR PARM
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    ENDPARM             B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    ENDPARM             B IF NOT.
         LH    R3,0(R2)            LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    ENDPARM             B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?
         BE    DOTCP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
DOTCP    CH    R3,=H'4'            ANY PARM?
         BE    ENDPARM             B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
         DROP  R3                    FREE CPPL
PARM     DS    0H                  CONVERT DISPLAY STCK INTO HEX
*                                  FROM 16 BYTES INTO 8 BYTES.
         ST    R1,SAVER1           SAVE
         ST    R4,SAVER4              WORK REGISTERS
         MVC   OURDDW2(16),0(R2)     COPY 16-BYTE TIME TO WORK AREA
         OC    OURDDW2(16),=CL16' '  UPPERCASE.
         LA    R1,OURDDW           SET UP LOOP TO COPY
         LA    R3,OURDDWA            ALTERNATE LETTERS TO 2 AREAS.
         LA    R4,8                SET UP BCT REGISTER
SPLTLOOP DS    0H                  COPY ALTERNATE LETTERS
         MVC   0(1,R1),0(R2)         TO TWO
         MVC   0(1,R3),1(R2)           AREAS.
         LA    R1,1(,R1)           INCREMENT
         LA    R3,1(,R3)             POINTERS
         LA    R2,2(,R2)               AND
         BCT   R4,SPLTLOOP               LOOP 8 TIMES.
MERGE    DS    0H                  ISOLATE NIBBLES
         TR    OURDDW(8),TRTBL1      AND MERGE
         TR    OURDDWA(8),TRTBL2       THE TWO HALVES
         OC    OURDDW(8),OURDDWA         TOGETHER.
* ------------------------------------------------------------------ *
*                 TEST TO MAKE SURE OUR ROUTINE IS WORKING.          *
*                    (UNCOMMENT THE NEXT TWO LINES)                  *
*        HEX   TESTDDW,8,OURDDW    DISPLAY 8 BYTES OF HEX NUMBERS
*        TPUT  TESTDDW,16          SHOW THE RESULT ON THE SCREEN
* ------------------------------------------------------------------ *
ENDPARM  LM    R1,R3,SAVE123       RESTORE WORK REGISTERS
         L     R10,SAVE10
         BR    R10
*
*********************************************************************
* OBTAIN A TODSTAMP AND CALL THE TODPRINT-MACRO
*********************************************************************
*
CALLMAC  ST    R10,SAVE10          SAVE BACKPOINTER
         LA    R4,@MLWAREA         A(256-BYTE WORKAREA)
*        STCK  TODDW               GET TOD-STAMP
*        TPUT  OURDDW2,16
         LA    R1,OURDDW           STCK OBTAINED FROM GETPARM
         TODPRINT (R1),WORKAREA=(R4),                                  X
               OUTFORM='Date: WHOLEDAY, ANDAY of MONTH YEAR (MT/DD/YY YX
               EAR.JUL) Time: HH:MM:SS.STAMP(1)',                      X
               SHIFT=YES,                                              X
               CAPS=OFF            LET OUTPUT IN MIXED CASE
         LH    R2,0(R4)            LOAD LENGTH OF DATE/TIMESTAMP
         STH   R2,ALLMSGS
         BCTR  R2,0                SUBTRACT 1 FOR EXECUTE
         EX    R2,*+4              WRITE INTO ALLMSGS
         MVC   ALLMSGS+2(0),2(R4)
         L     R10,SAVE10
         BR    R10
*        LTORG
*
***********************************************************************
*     PUTLBSNS: DO THE PUTLINE-BUSINESS                               *
***********************************************************************
PUTLBSNS ST    R10,SAVE10
         STFSMODE ON,INITIAL=YES     CLEAR ....
         STFSMODE OFF                      .... SCREEN
         LA    R1,IOPLADS            LOAD DYNAMIC IOPL
         USING IOPL,R1               FILL IT
         L     R0,CPLUPT             LOAD DYN. USER'S PROFILE TABLE
         ST    R0,IOPLUPT            STORE IT IN THE IOPL
         L     R0,CPLECT             LOAD ADDRESS OF DYN. ECT
         ST    R0,IOPLECT            STORE IT IN THE IOPL
         LA    R0,ECBADS             LOAD ADDR OF MY ECB TO R3
         ST    R0,IOPLECB            STORE ADDRESS OF ECBADS IN IOPL
         MVC   @MLWAREA(L@PUTLIN),@PUTLIN
         MVC   DTEXTADS(LTEXTADS),TEXTADS   MOVE CONSTANT TO MY AREA
         LA    R2,ALLMSGS            POINT TO VARIABLE MSG-AREA
         XC    DTEXTADS(4),DTEXTADS  CLEAR LENGTH-COUNTER
PUTL010  DS    0H
         LH    R1,0(R2)              LENGTH OF CURRENT ENTRY INTO R5
         LTR   R1,R1                 IS IT ZERO ?
         BZ    PUTL020               (BE = YES, ALL WRITTEN)
PUTL015  LA    R1,4(,R1)             ADD 4 FOR PUTLINE-HEADER
         STH   R1,DTEXTADS           STORE INTO WORKAREA
         BCTR  R1,0                  SUBTRACT 1 FOR EXECUTE
         EX    R1,PUTLMVC1           DO THE EXECUTE
         PUTLINE PARM=@MLWAREA,      DO THE PUTLINE                    X
               OUTPUT=(DTEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         LH    R1,0(R2)              LOAD LENGTH OF MESSAGE
         LA    R1,2(,R1)             ADD LENGTH OF MSG-LENGTH
         AR    R2,R1                 ADD CORRECT LENGTH OF MSG-TEXT
         B     PUTL010               TRY NEXT MESSAGE
PUTL020  XR    R15,R15
         L     R10,SAVE10
         BR    R10
*        LTORG
*
PUTLMVC1 MVC   DTEXTADS+4(0),2(R2)
***********************************************************************
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *     05098
HEX      DS    0H                                                       05099
         ST    R4,SAVER4
         MVC   1(1,R15),0(R1)        Move byte                          05100
         UNPK  0(3,R15),1(2,R15)     Unpack                             05101
         TR    0(2,R15),HEXTAB-240                                      05102
         LA    R15,2(,R15)           Increment output pointer           05103
         LA    R1,1(,R1)             Increment input pointer            05104
         BCT   R0,HEX                Decrement length, then loop        05105
         MVI   0(R15),C' '           Blank the trailing byte            05106
         L     R4,SAVER4
         BR    R4                    Return to caller                   05107
HEXTAB   DC    C'0123456789ABCDEF'   Translate table                    05108
         SPACE                                                          05109
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
*
TEXTADS  DC    H'132'
         DC    H'0'
         DC    CL132' '
LTEXTADS EQU   *-TEXTADS
         LTORG
*
TRTBL1   DS    0D
         DC    XL16'00000000000000000000000000000000'   0
         DC    XL16'00000000000000000000000000000000'   1
         DC    XL16'00000000000000000000000000000000'   2
         DC    XL16'00000000000000000000000000000000'   3
         DC    XL16'00000000000000000000000000000000'   4
         DC    XL16'00000000000000000000000000000000'   5
         DC    XL16'00000000000000000000000000000000'   6
         DC    XL16'00000000000000000000000000000000'   7
         DC    XL16'00A0B0C0D0E0F0000000000000000000'   8
         DC    XL16'00000000000000000000000000000000'   9
         DC    XL16'00000000000000000000000000000000'   A
         DC    XL16'00000000000000000000000000000000'   B
         DC    XL16'00A0B0C0D0E0F0000000000000000000'   C
         DC    XL16'00000000000000000000000000000000'   D
         DC    XL16'00000000000000000000000000000000'   E
         DC    XL16'00102030405060708090000000000000'   F
TRTBL2   DS    0D
         DC    XL16'00000000000000000000000000000000'   0
         DC    XL16'00000000000000000000000000000000'   1
         DC    XL16'00000000000000000000000000000000'   2
         DC    XL16'00000000000000000000000000000000'   3
         DC    XL16'00000000000000000000000000000000'   4
         DC    XL16'00000000000000000000000000000000'   5
         DC    XL16'00000000000000000000000000000000'   6
         DC    XL16'00000000000000000000000000000000'   7
         DC    XL16'000A0B0C0D0E0F000000000000000000'   8
         DC    XL16'00000000000000000000000000000000'   9
         DC    XL16'00000000000000000000000000000000'   A
         DC    XL16'00000000000000000000000000000000'   B
         DC    XL16'000A0B0C0D0E0F000000000000000000'   C
         DC    XL16'00000000000000000000000000000000'   D
         DC    XL16'00000000000000000000000000000000'   E
         DC    XL16'00010203040506070809000000000000'   F
*
*
***********************************************************************
*     MACRO LIST-FORM                                                 *
***********************************************************************
@PUTLIN  PUTLINE MF=L
L@PUTLIN EQU    *-@PUTLIN
*
***********************************************************************
*     COPY    SECTION                                                 *
***********************************************************************
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
@MLWAREA DS    XL256                  MF=L WORKAREA
@MACWORK DS    CL256
MWADDR   DS    A
*
SAVE10   DS    F
SAVER1   DS    F
SAVE123  DS    3F
SAVER4   DS    F
SAV4HEX  DC    F'0'                  Save BAL register for HEX macro
HEXSAVE  DS    3F                    Register save for HEX macro
* @SRTESTM DS    F                      A(START SORT STATEMENT)
*
CPLCBUF  DS    F                      CPPL-WORKFIELDS
CPLUPT   DS    F
CPLPSCB  DS    F
CPLECT   DS    F
*
ECBADS   DS    F                      PUTLINE WORKFIELDS
IOPLADS  DS    4F
TODDW    DS    D
OURDDW2  DS    XL16
OURDDW   DS    XL8
OURDDWA  DS    XL8
TESTDDW  DS    XL16
*
DTEXTADS DS    CL(LTEXTADS)           MSG-WORKFIELD
WORKMSG  DS    CL80
*
*
ALLMSGS  DS    4CL32000
LALLMSGS EQU   *-ALLMSGS
*
LDWORK   EQU   *-DWORK
*
         EJECT
*
         IKJCPPL
         IKJIOPL
         END   DTOD
/*
//SYSLIB    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE300
//          DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//             PARM='XREF,LIST,LET,REUS,RENT'
//SYSLMOD   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  SETSSI  CB498300
  NAME    DTOD(R)
/*
