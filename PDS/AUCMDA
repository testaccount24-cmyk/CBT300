         TITLE '   A U C M D  '
***********************************************************************
*                                                                     *
*        'AUCMD'       -         APF-AUTHORIZED COPY                  *
*                                                                     *
***********************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION. PRC, MCLEAN VA.
*        DATE WRITTEN. JANUARY 6 1978.
*        DATE UPDATED. SEPTEMBER 29 1981.
*        ATTRIBUTES. RE-ENTRANT, AUTHORIZED.
*        DESCRIPTION.
*         THIS TSO COMMAND INVOKES A SPECIFIED TSO COMMAND
*         AND RUNS IT AUTHORIZED.  FOR SYSTEMS SUPPORT USE ONLY.
*         MODIFIED TO EXECUTE COMMANDS WITH OTHER NAMES THAN
*         THE USUAL.
*
*        LOG OF CHANGES.
*         04MAY81 - INSTALLED AT AFDSC/PENTAGON.
*         29SEP81 - CHECK FOR ASMI. ISSUE TESTAUTH.
*         15MAY85 - CHANGE THE CHECK FOR MY OWN PURPOSES. ALSO
*                   ADD MECHANISM TO USE YOUR OWN SVC TO GET
*                   INTO SUPERVISOR STATE. WE RUN WITH ISPF/PDF
*                   V1 AND NEED IT.   JIM MARSHALL (JDM)
*         30DEC12 - ALLOW ALL TSO USERIDS TO USE THIS COMMAND.
*                   AMODE 31.
*                   APF-AUTHORIZATION INFORMATION:
*                   CMD NAME HAS TO BE IN THE IKJEFTE2 TABLE.
*                   CHANGED "NOT AUTHORIZED" MESSAGE TO MAKE
*                   IT LOOK LIKE THE COMMAND ISN'T THERE.
*                   THIS IS IN RESPONSE TO THE TESTAUTH MACRO. (SBG)
*         28NOV16 - ALLOW AUCMD TO EXECUTE PROGRAMS WITH MORE
*                   OR LESS ARBITRARY NAMES. GOT RID OF IKJSCAN
*                   NAME CHECKING COMPLETELY.   (SBG WITH BILL
*                   GODFREY'S HELP)
*         04DEC16 - CHANGE UPPERCASING TO TRANSLATE TABLE. NOT OC
*                   AGAINST X'40'. INCLUDES MEMBER NAMES FROM
*                   X'80' THRU X'BF' TO NOT CHANGE THEM.
*         04DEC22 - ADD OPTIONAL TASKLIB DDNAME. DON'T BYPASS BLDL.
*                   THIS ALLOWS AUTHORIZATION OF TSO COMMANDS FROM
*                   ANY AUTHORIZED LIBRARY THAT YOUR TSO SESSION
*                   HAS ACCESS TO.
*                   EXAMPLE:
*
*                   ALLOC FI(TASKLIB) DA(AUTH.LIB) SH REUSE
*                   AUCMDA COMMAND.
*
*                   THE COMMAND WILL BE EXECUTED FROM AUTH.LIB.
*                   WITHOUT THE TASKLIB DD ALLOCATED, THE AUCMDA
*                   COMMAND ACTS AS BEFORE, AND TAKES THE COMMAND
*                   FROM THE LOAD LIBRARY(IES) AVAILABLE TO YOUR
*                   TSO SESSION.
*
*         THIS COMMAND SHOULD BE LINK-EDITED AUTHORIZED.
*         THE NAME OF THIS COMMAND MUST BE ADDED TO THE TABLE
*         OF AUTHORIZED COMMANDS IN CSECT IKJEFTE2.
*         BUT THE NAMES OF THE COMMANDS INVOKED BY THIS COMMAND
*         DO NOT HAVE TO BE IN THE TABLE, SO USE OF THIS COMMAND
*         ALLOWS THE TABLE TO BE SMALLER.
*
*         I HAVE 2 MACROS COMMENTED OUT DOWN WHERE WE LINK OFF TO
*         THE ACTUAL COMMAND. I RUN ISPF/PDF V1 (NOT AUTHORIZED)
*         AND SO DO NOT USE THE MECHANISM DESCRIBED ABOVE. THUS
*         WE NEED AN SVC TO GET OURSELVES IN AND OUT OF SUPERVISOR
*         STATE. IF YOU HAVE SUCH A MECHANISM, JUST REPLACE THE
*         COMMENTED MACROS WITH YOUR OWN. I DO NOT SUPPLY THE
*         MACRO BECAUSE I WOULD THEN BE ACCUSED TO 'CONTRIBUTING
*         TO THE DELINQUENCY OF A SYSTEMS PROGRAMMER'!!!!!
*                                    JIM MARSHALL
*
*         WE USE THIS COMMAND TO INVOKE COMMANDS THAT ARE USED ONLY
*         BY SYSTEMS PROGRAMMERS. AUTHORIZED COMMANDS THAT ARE USED
*         BY NON-SYSTEM-PROGRAMMERS ARE PUT IN IKJEFTE2. THAT IS
*         WHY THIS COMMAND CHECKS THE USERID, AND THAT IS WHY THIS
*         COMMAND DOES NOT HAVE ITS OWN TABLE OF COMMAND NAMES.
*
*         WE ALSO LINK-EDIT A NON AUTHORIZED COPY OF THIS COMMAND,
*         AND NAME THAT VERSION 'CMD'.  THEN WE ADD 'CMD' TO THE
*         SUBCOMMAND TABLES IN 'EDIT' AND 'TEST', SO ANY TSO COMMAND
*         CAN BE USED UNDER EDIT AND TEST BY USING 'CMD'. THIS IS NOT
*         NECESSARY IF 'PCF' IS INSTALLED.
*
* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
*                    FOR DISPLAYS OF HEX DATA                        *
* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R5,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R5,HEX
         L     R5,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    HEXR  &TO,&REG,&FROM
&NAME    DS    0H
         ST    R5,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LR    R0,&REG
         LA    R15,&TO
         BAL   R5,HEX
         L     R5,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    MOVE  &TO,&TOL,&FROM,&FROML
         LCLB  &B(8)               0=FALSE 1=TRUE
&B(1)    SETB  (T'&TO EQ 'O')
&B(2)    SETB  (T'&TOL EQ 'O')
&B(3)    SETB  (T'&FROM EQ 'O')
&B(4)    SETB  (T'&FROML EQ 'O')
         AIF   (&B(1) OR &B(2) OR &B(3)).REQOM
&B(5)    SETB  ('&TO'(1,1) EQ '(')
&B(6)    SETB  ('&TOL'(1,1) EQ '(')
&B(7)    SETB  ('&FROM'(1,1) EQ '(')
         AIF   (&B(4)).NOB8
&B(8)    SETB  ('&FROML'(1,1) EQ '(')
.NOB8   ANOP
         AIF   (NOT(&B(5) AND &B(6) AND &B(7))).NALLR
         AIF   (NOT &B(4) AND NOT &B(8)).NALLR
         LR    R0,&TO(1)           RECEIVING FIELD
         LR    R1,&TOL(1)          RECEIVING LENGTH
         LR    R14,&FROM(1)        SENDING FIELD
         AIF   (&B(4)).NOFROML
         LR    R15,&FROML(1)       SENDING LENGTH
         ICM   R15,B'1000',=X'40'  PAD IF SENDING IS SHORTER
         AGO   .MVCL
.NOFROML LR    R15,&TOL(1)         SENDING LENGTH
.MVCL    MVCL  R0,R14
         MEXIT
.REQOM   MNOTE 4,'REQUIRED OPERAND(S) OMITTED'
         MEXIT
.NALLR   MNOTE 4,'ALL OPERANDS MUST BE IN REGISTER FORMAT (PARENS)'
         MEND
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         EJECT
* ------------------------------------------------------------------ *
*           THIS IS THE BEGINNING OF THE PROGRAM CODE                *
* ------------------------------------------------------------------ *
AUCMD    CSECT
AUCMD    RMODE 24
AUCMD    AMODE 31
         USING *,R12
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'AUCMD'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(0),AL3(@DATAL) SUBPOOL AND LENGTH
@PROLOG  STM   14,12,12(R13)       INITIALIZE FOR REENTRANCY
         LR    R12,R15             LOAD NEW BASE REGISTER
         LR    R2,R1               SAVE CPPL POINTER
         L     R0,@SIZE            SIZE OF GETMAINED AREA
         GETMAIN R,LV=(0)
         LR    R9,R1               SAVE ADDR OF GOTTEN AREA
         USING @DATA,R9
         LR    R0,R9               AREA TO BE CLEARED
         L     R1,@SIZE            LENGTH TO BE CLEARED
         SR    R14,R14             CLEAR R14 AND R15
         SR    R15,R15             CLEAR R14 AND R15
         MVCL  R0,R14              ZERO IT ALL
         SPACE 1
         LR    R1,R9               POINT TO NEW SAVEAREA
         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA
         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R1              SWITCH R13 TO NEW SAVE AREA
         SR    R11,R11             TASKLIB DD
* ------------------------------------------------------------------ *
INITCON  DS    0H                  INITIALIZE CONSTANTS AND FLAGS
         MVI   COMMANDA-1,X'40'    CLEAR COMMAND NAME AREA
         MVC   COMMANDA,COMMANDA-1
         MVC   COMMANDL,=X'0000'   INITIALIZE COMMAND LENGTH AREA
         MVI   TESTLINE-1,X'40'    BLANK TEST OUTPUT AREA
         MVC   TESTLINE,TESTLINE-1 FOR DISPLAYS
         EJECT
************************************************************
*                                                          *
*         CHECK USER'S AUTHORITY TO USE THIS COMMAND.      *
*                                                          *
************************************************************
*
         ST    R2,ORIGCPPL         CPPL THAT HAS BEEN PASSED TO US
         L     R15,X'224'          PSAAOLD
         L     R14,60(,R15)        ASCBTSB
         LTR   R14,R14             TSO SESSION?
         BNZ   IMPLTSO             YES - BRANCH
         L     R14,X'AC'(,R15)     ASCBJBNI
         LTR   R14,R14             STARTED TASK?
         BZ    IMPLEXIT            YES - BRANCH
         B     IMPLEXEC            NO - JOBS NOT AUTHORIZED
IMPLTSO  L     R15,X'21C'          PSATOLD
         L     R15,X'B4'(,R15)     TCBJSCB
         L     R15,X'108'(,R15)    JSCBPSCB
         ST    R15,ORIGPSCB        STORE ADDRESS OF PSCB AWAY
         LR    R1,R15              AT PSCB, PUT INTO R1
         L     R1,X'34'(,R1)       GET UPT ADDR FROM PSCB
         ST    R1,ORIGUPT          STORE IT AWAY
         L     R1,ORIGCPPL         RELOAD CPPL ADDRESS
         L     R1,12(,R1)          GET ECT ADDRESS
         ST    R1,ORIGECT          PRESERVE IT FOR LATER
*
         B     IMPLEXIT            AUTHORIZE EVERYONE
*
*      (EXAMPLE OF AUTH CODE BELOW - YOU CAN IMPLEMENT IT BETTER)
*
         CLC   0(4,R15),=C'SS02'   SYSTEMS SUPPORT USERID
         BE    IMPLEXIT            YES, BRANCH
         SPACE
************************************************************
*                                                          *
*         USER NOT AUTHORIZED - CALL IMPLICIT EXEC         *
*                                                          *
************************************************************
         SPACE
IMPLEXEC DS    0H
         L     R15,0(,R2)          CPPLCBUF
         XC    2(2,R15),2(R15)     SET CBUF OFFSET TO IMPLICIT EXEC
         L     R15,12(,R2)         CPPLECT
         CLI   20(R15),X'40'       ECTSCMD BLANK?
         BNE   *+10                YES - SUBCOMMAND NOT FOUND
         MVC   12(8,R15),=CL8'EXEC' NO - COMMAND NOT FOUND
         L     R0,@SIZE
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         L     R1,24(,R13)         RESTORE CPPL POINTER
         LA    R15,20(,R13)        POINT TO 8 BYTE WORKAREA
         XC    0(8,R15),0(R15)     ZERO WORKAREA
         XCTL  (2,12),EP=EXEC,SF=(E,(15))
         SPACE
************************************************************
*                                                          *
*             GETMAIN A NEW COMMAND BUFFER                 *
*                                                          *
************************************************************
*         THIS IS OUR CODE TO AVOID USING IKJSCAN          *
************************************************************
IMPLEXIT DS    0H
         TESTAUTH FCTN=1
         LTR   R15,R15             ARE WE RUNNING AUTHORIZED
         BNZ   NAUTH               NO - GO ISSUE ERROR MESSAGE
         USING CPPL,R2
         MVC   SAVEUPT,CPPLUPT     SAVE FOR LATER
         L     R3,CPPLECT
         ST    R3,SAVEECT          SAVE ECT ADDRESS FOR LATER
         USING ECT,R3
         TM    ECTSWS,ECTNOPD      ANY OPERANDS?
         BO    NOPERAND            NO - BRANCH
         DROP  R3
         SPACE
         L     R3,CPPLCBUF
         CLC   2(2,R3),=H'0'       IS THERE AN OFFSET?
* ----------------------------------------------------------- *
*        THIS IS NOT A CORRECT DETERMINATOR OF OFFSET.        *
*        IF NO OPERANDS, THEN OFFSET SHOULD BE FOUR           *
*        LESS THAN THE LENGTH OF THE COMMAND BUFFER.          *
* ----------------------------------------------------------- *
         BE    NOPERAND            NO - BRANCH
         LH    R4,0(,R3)           GET CBUF LENGTH
         SH    R4,2(,R3)           SUBTRACT OFFSET
         CH    R4,=H'4'            DOES OFFSET = LENGTH?
         BNH   NOPERAND            YES - NO OPERANDS
         LR    R0,R4
         CH    R0,=H'256'          WILL 256 BYTES BE ADDRESSABLE
         BNL   *+8                 YES, BRANCH
         LH    R0,=H'256'          NO, MAKE AT LEAST 256 BYTES
         O     R0,SUBPOOL
         ST    R0,FREECBUF         STORE FOR LATER FREEMAIN
         GETMAIN R,LV=(0)
         ST    R1,FREECBUF+4
         LR    R8,R1               ADDRESS OF NEW CPPL
         XC    0(4,R8),0(R8)       CLEAR BEFORE REFILLING IT
         STH   R4,0(,R8)           PUT NEW LENGTH IN
         SH    R4,=H'4'            SUBTRACT PREFIX LENGTH
         ST    R4,SAVELENG         KEEP IT JUST IN CASE
         AH    R3,2(,R3)           POINT TO OPERAND - 4
         AH    R3,=H'4'            POINT TO OPERAND
         SPACE
         LA    R7,4(,R8)           POINT TO RECEIVING FIELD
         SPACE
* -------------------   BELOW  -   REPLACED BY THE MOVE MACRO
*        LR    R1,R4
*        BCTR  R1,0
*        B     *+10
*        MVC   0(0,R7),0(R3)
*        EX    R1,*-6
* -------------------   ABOVE  -   REPLACED BY THE MOVE MACRO
*
*                                  FILL THE NEW CPPL
         MOVE  (R7),(R4),(R3)
         SPACE
         MVC   NEWCPPL(16),0(R2)   COPY CPPL FOR NEW CBUF
         LA    R2,NEWCPPL          ADDRESS NEW CPPL AREA
         ST    R2,SAVECPPL         SAVE THE ADDRESS
         ST    R8,CPPLCBUF         SAVE THE NEW COMMAND BUFFER
*
         ST    R3,SAVER3A
         L     R3,CPPLECT          LOOK AT THE CPPL'S ECT
         USING ECT,R3
         OI    ECTSWS2,X'20'       ALLOW ? PARSE HELP
         DROP  R3
         L     R3,SAVER3A
*
************************************************************
*                                                          *
*         GET ACTUAL LENGTH OF THE COMMAND EXECUTED        *
*          AND GET THE OFFSET TO PUT INTO THE CPPL         *
*                                                          *
************************************************************
*
GETCOMND DS    0H                  GET ACTUAL COMMAND LENGTH
         ST    R6,SAVER6A          SAVE
         ST    R5,SAVER5A              WORK
         ST    R4,SAVER4A                  REGISTERS
         LR    R5,R7               POINT TO NEW COMMAND
         LA    R10,0               START COUNT AT 0
         LR    R6,R4               LOAD LENGTH OF OCCUPIED BUFFER
GETLOOP  DS    0H                  GET LENGTH OF ACTUAL COMMAND
         CLI   0(R5),X'00'         X'00' DELIMITS
         BE    GETCLEND
         CLI   0(R5),X'40'         BLANK DELIMITS
         BE    GETCLEND
         LA    R5,1(,R5)           BUMP SEARCH ADDRESS
         LA    R10,1(,R10)         COUNT COMMAND SIZE
         BCT   R6,GETLOOP
GETCLEND DS    0H
         ST    R10,SAVECMDL        SAVE COMMAND SIZE COUNT
         LR    R14,R10             GET READY FOR EXECUTE
         BCTR  R14,0               ONE LESS FOR EXECUTE
         MVC   COMMANDA(8),BLANKS  ASSURE ALL BLANKS TO START
         EX    R14,MOVCOMND
*
GETOFFST DS    0H                  FIND COMMAND OFFSET
         C     R6,=F'0'            NO PARM?
         BE    GETNOPRM            TELL THE PROGRAM SO.
         LA    R5,1(,R5)           BUMP ONE FURTHER
         LA    R10,1(,R10)
         CLI   0(R5),X'00'         NOW LOOK FOR NON-ZERO
         BE    GETOFLUP
         CLI   0(R5),X'40'         OR NON-BLANK
         BE    GETOFLUP
         B     GETOLEND
GETOFLUP DS    0H                  IS ZERO OR BLANK, BUMP AGAIN.
         BCT   R6,GETOFFST
GETOLEND DS    0H                  SAVE OFFSET
         CLI   0(R5),X'00'         LAST CHARACTER NON-ZERO
         BE    GETNOPRM            FLAG NO PARM
         CLI   0(R5),X'40'         OR NON-BLANK?
         BE    GETNOPRM            FLAG NO PARM
         B     GETYSPRM            THERE IS A PARM, GET OFFSET.
GETNOPRM DS    0H                  IF THERE IS NO PARM.....
         MVC   SAVEOFFS,SAVECMDL   NO PARM, COMMAND LENGTH IS OFFSET
         B     GETLENDX            GOT OFFSET FOR THIS CASE
GETYSPRM DS    0H
         ST    R10,SAVEOFFS        THERE IS PARM, SAVE OFFSET FOUND
GETLENDX DS    0H
*
         L     R8,CPPLCBUF         LOAD FOUND OFFSET
         MVC   2(2,R8),SAVEOFFS+2     INTO NEW COMMAND BUFFER
*
         L     R6,SAVER6A          RESTORE
         L     R5,SAVER5A              WORK
         L     R4,SAVER4A                  REGISTERS
*
GETLEXIT DS    0H
         B     MAKECPPL            GO MAKE A NEW CPPL WITH THIS INFO
*
MOVCOMND MVC   COMMANDA(0),0(R7)        EXECUTED
************************************************************
*                                                          *
*         MAKE A NEW CPPL AND LINK TO CMD USING IT         *
*                                                          *
************************************************************
MAKECPPL DS    0H
         ST    R5,SAVER5B          SAVE OFF WORK REGISTER
         ST    R6,SAVER6B          SAVE OFF WORK REGISTER
         LA    R5,NEWCPPL          POINT TO NEW CPPL AREA
*                                  MAKE THE CPPL
         ST    R8,0(,R5)           PUT ADDRESS OF THE CMD BUFF IN
         L     R6,SAVEUPT          COPY THE OLD UPT
         ST    R6,4(,R5)           PUT IT INTO ITS PLACE
         L     R6,ORIGPSCB         COPY ORIGINAL PSCB
         ST    R6,8(,R5)           AND LOAD IT INTO CPPL
         L     R6,ORIGECT          GET ORIGINAL ECT TO TINKER WITH,
*                                   AND TINKER WITH IT.
         USING ECT,R6
         MVC   ECTPCMD(8),COMMANDA  THIS IS THE NEW COMMAND NAME
MAKENGO  DS    0H
         ST    R6,12(,R5)          LOAD ECT INTO ITS PLACE IN CPPL
*
         DROP  R6
         L     R5,SAVER5B          RESTORE WORK REGISTER
         L     R6,SAVER6B          RESTORE WORK REGISTER
         SPACE
************************************************************
*                                                          *
*         OPEN DCB FOR DDNAME TASKLIB                      *
*                                                          *
************************************************************
         SPACE
         SR    R11,R11
         LA    R1,TASKDCB
         MVC   DEVDDNAM,DCBDDNAM-IHADCB(R1) 'TASKLIB'
         DEVTYPE DEVDDNAM,DEVDATA
         LTR   R15,R15             IF NO TASKLIB DD
         BNZ   NOTASK                LEAVE R11 AS ZERO
         MVC   TASKDCW(TASKLEN),TASKDCB
         LA    R11,TASKDCW
         MVI   OPENL,X'80'
         LA    R1,OPENL
         OPEN  ((R11),(INPUT)),MF=(E,(1))
         TM    DCBOFLGS-IHADCB(R11),DCBOFOPN
         BNO   OPENERR
NOTASK   EQU   *
************************************************************
*                                                          *
*         ISSUE BLDL FOR COMMAND NAME FOUND BY SCAN        *
*                                                          *
************************************************************
HANDLNAM DS    0H
         MVC   BLDL(64),BLDLMODL
         MVC   BLDLNAME(8),=CL8' '          CLEAR BLDLNAME AREA
         L     R14,SAVECMDL                 LENGTH OF COMMAND
         BCTR  R14,0                        LESS ONE FOR MOVE
         EX    R14,MOVBNAME                 MOVE NAME INTO AREA
*
*   YOU HAVE TO UPPERCASE IT, OR THE LINK EP WILL NEVER FIND IT,
*   SINCE WE'RE DISABLING THE BLDL.
*
*        OC    BLDLNAME(8),=C'        '     UPPERCASE IT
         TR    BLDLNAME(8),TRTABLE          UPPERCASE IT
         LA    R7,BLDLERR
*-       B     NOBLDL              ZAP THIS TO BC (0) IF BLDL DESIRED
         SPACE
         BLDL  (R11),BLDL
         SPACE
         LTR   R15,R15
         BNZR  R7
NOBLDL   DS    0H
         B     LINKIT                       LINK TO NEW COMMAND
MOVBNAME MVC   BLDLNAME(0),0(R3)    << EXECUTED >>
         SPACE
************************************************************
*                                                          *
*         CALL THE COMMAND                                 *
*                                                          *
************************************************************
LINKIT   DS    0H
*        $#SVCKS                   ENTER SUPER STATE KEY=0
         LA    R1,NEWCPPL          GIVE LINK THE NEW CPPL.
         XC    LINKAREA(8),LINKAREA
         LINK  EPLOC=BLDLNAME,DCB=(R11),SF=(E,LINKAREA)
*
*        $#SVCKP                   ENTER NON-SUPER STATE KEY=PROB
         B     EXIT
         SPACE
************************************************************
*                                                          *
*         ISSUE ERROR MESSAGES                             *
*                                                          *
************************************************************
         SPACE
NAUTH    DS    0H                  COMMAND NOT AUTHORIZED
         LA    R1,MSGNAUTH
         LA    R0,L'MSGNAUTH
         BAL   R14,PUTLINE
         B     EXIT12
NOPERAND DS    0H                  THERE ARE NO OPERANDS
         LA    R1,MSGNOPER
         LA    R0,L'MSGNOPER
         BAL   R14,PUTLINE
         B     EXIT12
openerr  DS    0H                  THERE ARE NO OPERANDS
         LA    R1,MSGOPEN
         LA    R0,L'MSGOPEN
         BAL   R14,PUTLINE
         B     EXIT12
* ----------------------------------------------------------------- *
*    WE ARE NOT WORRYING ABOUT SCAN ERRORS OR SCAN SYNTAX ERRORS,   *
*    BECAUSE THAT IS THE REASON FOR THIS MODIFICATION.  WE ARE      *
*    TRYING TO EXECUTE PROGRAMS WITH ANY NAME, NOT JUST PROGRAMS    *
*    WITH NAMES THAT IBM APPROVES OF.                               *
* ----------------------------------------------------------------- *
SCANERR  DS    0H                  NOT RELEVANT FOR THIS MODIFICATON
         LA    R1,MSGSCANE
         LA    R0,L'MSGSCANE
         BAL   R14,PUTLINE
         B     EXIT12
SCANSYNT DS    0H                  NOT RELEVANT FOR THIS MODIFICATON
         LA    R1,MSGSCANS
         LA    R0,L'MSGSCANS
         BAL   R14,PUTLINE
         B     EXIT12
* ----------------------------------------------------------------- *
BLDLERR  DS    0H
         LA    R1,MSGBLDL
         LA    R0,L'MSGBLDL
         BAL   R14,PUTLINE
         B     EXIT12
IMPLOPND DS    0H
         ST    R5,SAVER5A
         LR    R4,R2               NEW CPPL POINTER
         L     R6,4(,R13)          ORIGINAL SAVEAREA
         L     R6,24(,R6)          RESTORE ORIGINAL CPPL POINTER
         L     R2,0(R6)            POINT TO ORIGINAL CBUF
         L     R4,0(R4)            POINT TO NEW CBUF
         LH    R3,0(,R2)           ORIGINAL LENGTH
         LH    R5,0(,R4)           NEW LENGTH
         MOVE  (R2),(R3),(R4),(R5) MOVE NEW TO OLD AND PAD
*                                  NOTE REGS NOT ALTERED BY MOVE
*                                  BECAUSE WORKREGS USED IN MVCL
         STH   R3,0(,R2)           RESTORE ORIGINAL LENGTH
         LR    R1,R6               SET UP CPPL PTR FOR IMPLEXEC
         L     R5,SAVER5A
         B     IMPLEXEC
         LA    R1,MSGBLDLE
         LA    R0,L'MSGBLDLE
         BAL   R14,PUTLINE
         B     EXIT12
* ----------------------------------------------------------------- *
PUTLINE  ST    R14,PUTLINS
         SVC   93
         L     R14,PUTLINS
         BR    R14
* ----------------------------------------------------------------- *
EXIT12   LA    R15,12                ABNORMAL EXIT
*
EXIT     LTR   R11,R11
         BZ    EXITNOC
         MVI   CLOSEL,X'80'
         LA    R1,CLOSEL
         CLOSE ((R11)),MF=(E,(1))
         SR    R11,R11
EXITNOC  LM    R0,R1,FREECBUF        PROGRAM EXIT
         LTR   R0,R0
         BZ    EXITX
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
EXITX    LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(13)
         L     R14,12(,R13)
         BR    R14
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H                    HEX DISPLAY ROUTINE - KEEP IN
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R5                    RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* --------------------------------------------------------- *
         EJECT
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
BLANKS   DC    CL80' '
MSGNOPER DC    C'REQUIRED OPERANDS MISSING'
MSGSCANE DC    C'SCAN ERROR'
MSGSCANS DC    C'INVALID COMMAND SYNTAX'
MSGOPEN  DC    C'OPEN FAILED FOR TASKLIB'
MSGBLDL  DC    C'BLDL FAILED'
MSGBLDLE DC    C'COMMAND NOT FOUND'
MSGNAUTH DC    C'IKJ56500I COMMAND AUCMD NOT FOUND'
         SPACE
BLDLMODL DC    H'1,74',CL8' ',XL4'00',CL62' '
         SPACE
SUBPOOL  DC    A(X'01000000')
         DC    F'0'
         PRINT NOGEN
TASKDCB  DCB   DDNAME=TASKLIB,DSORG=PO,MACRF=R
TASKLEN  EQU   *-TASKDCB
*                F O R   U P P E R C A S I N G
TRTABLE  DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C5D6E6F'
         DC    X'707172737475767778797A7B7C6D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C7D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C8D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AA0B0C0D0E0F'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         LTORG
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
*
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
NEWCPPL  DS    4F
FREECBUF DS    2F
LINKAREA DS    2F
ORIGPSCB DS    F
ORIGCPPL DS    F
SAVEECT  DS    F
ORIGUPT  DS    F
ORIGECT  DS    F
SAVEUPT  DS    F
PUTLINS  DS    F
DEVDDNAM DS    D
DEVDATA  DS    2F
OPENL    DS    F
CLOSEL   DS    F
SAVER3A  DS    F
SAVER4A  DS    F
SAVER5A  DS    F
SAVER5B  DS    F
SAVER6A  DS    F
SAVER6B  DS    F
SAVE1401 DS    6F
SAVECPPL DS    F
SAVECMDL DS    F
SAVEOFFS DS    F
SAVELENG DS    F
SAVENCPP DS    F
DISPLENG DS    F
DISPADDR DS    F
HEXSAVE  DS    3F
SAV4HEX  DC    F'0'
         DS    X
TESTLINE DS    CL80
COMMANDL DS    H
         DS    X
COMMANDA DS    CL8
         DS    0D
BLDL     DS    F
BLDLNAME DS    CL8
         DS    CL62
TASKDCW  DS    0F,(TASKLEN)X
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
         IKJCPPL
         SPACE
         IKJECT
         SPACE
         IKJCSPL
         SPACE
         IKJCSOA
         SPACE
         YREGS
         SPACE
         PRINT NOGEN
         DCBD  DSORG=PO
         END
