         TITLE '   C O U N T    '
************************************************************
*                                                          *
*        'COUNT' TSO COMMAND                               *
*                                                          *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.
*        DATE WRITTEN. SEPTEMBER 27 1979.
*        UPDATED FEB 7 2014 FOR AMODE 31 RMODE 31.
*        ATTRIBUTES. RE-ENTRANT.
*        COMMENTS.
*            THIS TSO COMMAND COUNTS THE LOGICAL RECORDS IN A
*            SPECIFIED DATA SET AND DISPLAYS THE TOTAL ON THE TERMINAL.
*
*            IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*            CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*            TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*            ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*            THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*            OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*            PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*            AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*            FULLY QUALIFIED NAME.
*
*            THE 'FILE' KEYWORD IS USEFUL FOR COUNTING TEMPORARY
*            DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*            OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*            WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*            FILENAME WILL BE COUNTED (AND QUICKLY, BECAUSE
*            THE COMMAND DOESNT HAVE TO ALLOCATE ANYTHING).
*
*            VARIABLE SPANNED RECORDS ARE READ SEGMENT-BY-SEGMENT
*            AND TWO COUNTS ARE DISPLAYED, ONE REPRESENTING THE
*            NUMBER OF LOGICAL RECORDS AND ANOTHER THE NUMBER
*            OF SEGMENTS.  IF THE 'SPANNED' KEYWORD IS SPECIFIED
*            THEN THE DATA IS READ RECORD-BY-RECORD (BFTEK=A)
*            AND ONLY THE COUNT OF LOGICAL RECORDS IS DISPLAYED.
*
*            NOTE - IF A NON-EXISTENT MEMBER OF A PDS IS SPECIFIED,
*            THE RESULTING 013-18 ABEND IS TRAPPED BY A DCB ABEND
*            EXIT, BUT A MESSAGE IS ISSUED BY OPEN ANYWAY. THIS
*            METHOD IS USED BECAUSE THE ADDITIONAL OVERHEAD
*            OF ALLOCATING THE PDS AND DOING A 'BLDL' WOULD
*            DEGRADE THE PERFORMANCE UNACCEPTABLY.
         SPACE
*              INTERCEPT 'LINK' MACROS IMBEDDED IN PUTLINE & STACK
*              TO MAKE SF=(E,LINKAREA) THE DEFAULT.
*
* CHNGE LOG: 03SEP16 - FIX RETURN CODE LOGIC SO RC IS 12 FOR ANY ERROR.
* CHNGE LOG: 28AUG16 - IGNORE DS1LSTAR WHICH IS 0 FOR PDSE.
* CHNGE LOG: 27JUN15 - ZERO 8-BYTE COUNTER NAMED BYTES. UNPHEX ADDED.
* CHNGE LOG: 24MAY15 - SHOW BYTES, SHORTEST, LONGEST, ALLOW RECFM U.
*                      ADD NOCOMMAS KEYWORD FOR THOUSANDS SEPARATOR.
*                      ADD NORDW KEYWORD FOR NOT COUNTING RDW BYTES.
* CHNGE LOG: 07FEB14 - CONVERT TO AMODE/RMODE 31
* CHNGE LOG: 02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH
*                      MVS/XA 2.2.3, THE MACRO IS ONLY AVAILABLE IN
*                      'SYS1.AMACLIB' (SOUNDS LIKE IBM IS TRYING TO
*                      TELL US SOMETHING).  JIM MARSHALL         JDM1
*
         MACRO                                                   JDM1
&NAME    OBTAIN &LIST,&DUMMY=                                    JDM1
         AIF   (T'&LIST EQ 'O').E1                               JDM1
&NAME    IHBINNRA &LIST                 LOAD REG 1               JDM1
         SVC   27                       ISSUE OBTAIN SVC         JDM1
         MEXIT                                                   JDM1
.E1      IHBERMAC 34                    LIST ADDR MISSING        JDM1
         MEND                                                    JDM1
         MACRO
&NAME    LINK  &EP=,&SF=(E,LINKAREA)
&NAME    LA    15,&SF(2)
         LA    0,*+8
         B     *+12
         DC    CL8'&EP'
         ST    0,0(0,15)
         SVC   6             ISSUE LINK SVC
         MEND
         SPACE
COUNT    AMODE 31
COUNT    RMODE 31
COUNT    START
         USING *,R12,R11
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'COUNT '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE31  DC    0F'0',AL1(0),AL3(@DATA31L)
@SIZE24  DC    0F'0',AL1(1),AL3(@DATA24L)
@PROLOG  STM   14,12,12(13)
         LR    R12,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R12)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE31
         GETMAIN RU,LV=(0),SP=1,LOC=31
         LR    R9,R1
         USING @DATA31,R9
         ST    13,4(,1)            CHAIN SAVEAREA
         ST    1,8(,13)            CHAIN SAVEAREA
         LR    13,1                NEW SAVEAREA
         SPACE
         L     R0,@SIZE24
         GETMAIN R,LV=(0)
         LR    R10,R1
         USING @DATA24,R10
         SPACE
         MVI   STATUS,0
         XC    LINKAREA(8),LINKAREA
         SLR   R15,R15
         STH   R15,RETCODE         SET RETCODE = 0
         ST    R15,KOUNT
         ST    R15,KOUNTSP
         SPACE
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
*        L     R0,=A(COUNTPCL)
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         XC    MYANS(4),MYANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BZ    PARSEOK
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG
         LA    R15,12
         B     EXIT
PARSEOK  EQU   *
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
************************************************************
*                                                          *
*        QUALIFY THE DSNAME IF NECESSARY                   *
*                                                          *
************************************************************
         SPACE
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG
         B     NEXTD12
OKDSN    EQU   *
         LA    R15,DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,DSNAME           ZERO DSNAME LENGTH
         TM    6(R6),X'40'         IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME
         BE    NOPREF              YES, SKIP PREFIXING
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         DROP  R14                 UPT
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1
NOPREF   EQU   *
         LH    R1,4(,R6)           GET LENGTH
         LR    R0,R1
         AH    R0,DSNAME           ADD LENGTH OF PREFIX OR ZERO
         STH   R0,DSNAME           SET COMBINED LENGTH
         L     R14,0(,R6)          POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     (EXECUTED)
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
************************************************************
*                                                          *
*        IF 'FILE' KEYWORD IS SPECIFIED,                   *
*        GET DSNAME FROM JFCB USING FILE NAME.             *
*                                                          *
************************************************************
         SPACE
         CLI   FILEKW+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS
         BH    FILERR1             NO, BRANCH
         DEVTYPE DSNAME+2,DEVDATA  GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID
         BNZ   FILERR2             NO, BRANCH
         TM    DEVDATA+2,X'20'     DIRECT ACCESS
         BZ    FILERR3             NO, BRANCH
         LA    R4,DYNDCBW
         MVC   0(DYNDCBL,R4),DYNDCB
         LA    R0,JFCB
         LA    R1,DYNEXLST
         ST    R0,0(,R1)
         MVI   0(R1),X'87'
         ST    R1,36(,R4)          DCBEXLST
         MVC   40(8,R4),DSNAME+2   DCBDDNAM
         MVC   DDSAVE,DSNAME+2
         MVI   OPEND,X'80'
         RDJFCB ((R4)),MF=(E,OPEND)
         MVC   DSNAME+2(44),JFCB
         LA    R1,DSNAME+45        LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    STH   R0,DSNAME           STORE LENGTH OF DSNAME
*        MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB
         B     FILESPEC
FILERR1  LA    R0,MSG14A
         B     FILERR
FILERR2  LA    R0,MSG14B
         B     FILERR
FILERR3  LA    R0,MSG14C
FILERR   MVC   MSGWK(L'MSG14),MSG14
         LA    R15,MSGWK+L'MSG14
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG14(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         LR    R14,R0 POINT TO MSG14A, B, OR C
         MVC   0(L'MSG14A,R15),0(R14)
         LA    R0,L'MSG14+L'MSG14A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     NEXTD12
NOFILE   EQU   *
         TM    6(R6),X'40'         IS IT QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   QUICKW+1,1          QUICK SPECIFIED
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
************************************************************
*                                                          *
*        DEFAULT SERVICE ROUTINE TO GET QUALIFIERS         *
*                                                          *
************************************************************
         SPACE
*              ALL INPUT TO IKJEHDEF MUST BE BELOW THE LINE
         MVC   DSNAME24(46),DSNAME
         LA    R15,MYIOPL24
         USING IOPL,R15
         MVC   IOPLUPT(4),IOPLUPT-IOPL(R14)
         MVC   IOPLECT(4),IOPLECT-IOPL(R14)
         LA    R0,MYECB24
         ST    R0,IOPLECB
         XC    MYECB24,MYECB24
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,DSNAME24
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14                 DFPB
         SPACE
         LA    R1,MYIOPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         LA    R13,SAVE24          POINT TO SAVEAREA BELOW THE LINE
         L     R15,16              CVTPTR
         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,736(,R15)       CVTEHDEF
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK EQU   *
         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)
EHDEFEXT EQU   *
         SPACE
         LR    R13,R9              RESTORE SAVEAREA POINTER
         B     DEFCODE(R15)
DEFCODE  B     DEF00               SUCCESS
         B     NEXTD12              MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     NEXTD12              MSG ALREADY ISUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    EQU   *
DEF16    EQU   *
         B     DEF24
DEF20    EQU   *
LOCERR   EQU   *
         MVC   MSGWK(L'MSG02),MSG02
         LA    R15,MSGWK+L'MSG02
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG02(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     NEXTD12
DEF24    EQU   *
DEF28    EQU   *
DEF32    EQU   *
DEF36    EQU   *
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG
         B     NEXTD12
         SPACE
DEF00    EQU   *
DEFX     EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE DATASET                              *
*                                                          *
************************************************************
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    MEMBX               NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         B     *+10
         MVC   DA08MNM(0),0(R14)   MOVE MEMBER NAME
         EX    R1,*-6
MEMBX    EQU   *
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PASSX               NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         B     *+10
         MVC   DA08PSWD(0),0(R14)  MOVE PSWD
         EX    R1,*-6
PASSX    EQU   *
         LA    R1,MYDAPL
         SPACE
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BZ    OKDAIR
         BAL   R14,DAIRFAIL
         B     NEXTD12
OKDAIR   EQU   *
         OI    STATUS,X'40'        TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   DDSAVE,DA08DDN
         TM    DA08DSO,X'40'       IS DSORG SEQUENTIAL?
         BO    OKDSORG             YES - BRANCH
         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?
         BO    OKDSORGP            YES, BRANCH
*
*              DSORG IS NEITHER PS NOR PO
*              ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'
*
ERRDSORG LA    R1,MSG06
         LA    R0,L'MSG06
         BAL   R14,PUTMSG
         B     NEXTD12
OKDSORGP EQU   *
         CLC   DA08MNM,=CL8' '     WAS MEMBER SPECIFIED?
         BNE   OKDSORG             YES - BRANCH
         LA    R1,MSG07
         LA    R0,L'MSG07
         BAL   R14,PUTMSG
         B     NEXTD12
OKDSORG  EQU   *
         DROP  R15                 DAPB08
         SPACE
************************************************************
*                                                          *
*        CHECK FORMAT-1 DSCB FOR EMPTY DATA SET            *
*                                                          *
************************************************************
         SPACE
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R1,24(,R1)          TOIENTRY
DDLOOP   CLI   0(R1),0             END OF TIOT
         BE    NEXTDSN             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R1)
         LA    R1,0(R15,R1)
         B     DDLOOP
DDFOUND  L     R15,16(,R1)         TIOEFSRT-1
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?
         BZ    OBTX                NO, BYPASS OBTAIN
         MVC   VOLSER,28(R15)      UCBVOLI
OBTDSCB  LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,DSNAME+2         DSN FOR OBTAIN
         ST    R0,4(,R1)
         LA    R0,VOLSER           VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1)
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL
         BZ    OKDSCB              YES, BRANCH
         SPACE
*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
         SPACE
         TM    STATUS,X'08'        HAS LOCATE BEEN TRIED ALREADY?
         BZ    ALIAS               NO, GO TRY IT
ERROBT   LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG
         B     NEXTD12
ALIAS    OI    STATUS,X'08'        TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,DSNAME+2         DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   15,15               WAS LOCATE SUCCESSFUL?
         BZ    OBTDSCB             YES, GO OBTAIN AGAIN
         B     ERROBT              NO, ISSUE MESSAGE
         SPACE
OKDSCB   NI    STATUS,255-X'08'    TURN OFF LOCATE SWITCH
         TM    MYDSCB-44+X'52',X'42' DSORG = PS OR PO
         BZ    ERRDSORG
*        TM    MYDSCB-44+X'54',X'C0' RECFM = U
*        BO    ERRRECFM
*        TM    MYDSCB-44+X'4E',X'08' CHECK DS1SMSFG FOR DS1PDSE
*        BO    OBTX                IGNORE DS1LSTAR FOR PDSE
*        CLC   MYDSCB-44+X'62'(3),=X'000000' CHECK DS1LSTAR
*        BE    DYNEOD              BRANCH IF EMPTY DATA SET
OBTX     EQU   *
FILESPEC EQU   *
         SLR   R7,R7               R7 ZERO MEANS NOT-SPANNED
         CLI   SPANKW+1,1          'SPANNED' SPECIFIED
         BNE   *+6                 NO, LEAVE R7 ZERO
         BCTR  R7,0                YES, SPANNED, SET BFTEK=A SWITCH
         SPACE
************************************************************
*                                                          *
*        SET UP THE DCB                                    *
*                                                          *
************************************************************
         SPACE
         MVC   DYNDCBW(DYNDCBL),DYNDCB
         LA    R4,DYNDCBW
         USING IHADCB,R4
         MVC   DCBDDNAM(8),DDSAVE
         SPACE
         LA    R5,DYNDCBEW
         USING DCBE,R5
         MVC   0(DYNDCBEL,R5),DYNDCBE
         ST    R5,DCBDCBE
         SPACE
         LA    R15,DYNEOD
         ST    R15,DCBEEODA
         SPACE
         LA    R15,DYNSYNAD
         ST    R15,DCBESYNA
         SPACE
         LA    R15,DYNEXLST
         IC    R0,DCBEXLSA-1
         ST    R15,DCBEXLSA-1      EXLST=DYNEXLST
         STC   R0,DCBEXLSA-1
         LA    R1,OPENEXIT         EXIT BELOW THE LINE
         MVC   0(GLUELEN,R1),GLUE   WILL CONTAIN GLUE
         ST    R1,0(,R15)          STORE IN 1ST EXLST WORD
         MVI   0(R15),X'05'        MARK TYPE OF EXIT
         LA    R0,DYNOPENX         EXIT ABOVE THE LINE
         ST    R0,OPENEXAD         SAVE ITS ADDRESS
         OI    OPENEXAD,X'80'      MAKE IT RUN IN 31-BIT MODE
         SPACE
         LA    R1,ABENDXIT         EXIT BELOW THE LINE
         MVC   0(GLUELEN,R1),GLUE   WILL CONTAIN GLUE
         ST    R1,4(,R15)          STORE IN 2ND EXLST WORD
         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)
         LA    R0,DYNABEND         EXIT ABOVE THE LINE
         ST    R0,ABENDXAD         SAVE ITS ADDRESS
         OI    ABENDXAD,X'80'      MAKE IT RUN IN31-BIT MODE
         SPACE
         OI    STATUS,X'80'        TELL CLEANUP TO CLOSE DCB
         MVC   OPEND(OPEN31L),OPEN31
         SPACE
         OPEN  ((R4),INPUT),MODE=31,MF=(E,OPEND)
         SPACE
*        TM    DCBOFLGS,X'10'
*        TM    DCBEFLG1,DCBEOPEN+DCBEMD31
         TM    DCBEFLG1,DCBEOPEN
         BO    OKOPEN
         SPACE
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,X'10'        MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM BAL   R14,PUTMSG
         B     NEXTD12
         SPACE
DYNOPENX EQU   *
         LTR   R7,R7               'SPANNED' SPECIFIED
         BNZ   DYNOPENY            YES, READ ASSEMBLED SEGMENTS
         BSM   0,R14               NO, READ SEGMENT BY SEGMENT
DYNOPENY TM    DCBRECFM,X'C0'      RECFM U
         BO    DYNOPENZ            YES - BRANCH - IGNORE SPANNED KW
         TM    DCBRECFM,X'48'      VARIABLE SPANNED
         BNO   DYNOPENZ            NO - BRANCH - IGNORE SPANNED KW
         OI    DCBBFTEK,X'60'      SET BFTEK=A
DYNOPENZ BSM   0,R14               NO, READ SEGMENT BY SEGMENT
         SPACE
DYNABEND EQU   *
         L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND
         BE    DYNABENY            YES, BRANCH
         MVI   4(R1),0             ABNORMALLY TERMINATE
         BSM   0,R14
DYNABENY OI    STATUS,X'10'        INDICATE MEMBER NOT FOUND
         MVI   3(R1),4             IGNORE THE ABEND
         BSM   0,R14
         SPACE
OKOPEN   EQU   *
         SLR   R7,R7
         TM    DCBRECFM,X'C0'      RECFM U
         BO    NOSEGS
         TM    DCBRECFM,X'48'      RECFM VS
         BNO   NOSEGS
         CLI   SPANKW+1,1          USING BFTEK=A
         BE    NOSEGS
         BCTR  R7,0                COUNT SEGMENTS AND FIRST-SEGMENTS
NOSEGS   EQU   *
         MVC   MINLEN,=X'7FFF'
         MVC   MAXLEN,=X'0000'
         XC    BYTES(8),BYTES
         SPACE
READLOOP EQU   *
         MVI   SYNADSW,0           SET SYNAD SWITCH OFF
         SPACE
         GET   (R4)
         SPACE
         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?
         BE    OKGET               NO - BRANCH
         LA    R1,SYNADMSG
         LA    R0,78
         BAL   R14,PUTMSG
         B     NEXTD12
OKGET    EQU   *
         LA    R14,1
         A     R14,KOUNT
         ST    R14,KOUNT
         BAL   R14,MINMAX
         LTR   R7,R7               ARE WE READING SEGMENTS
         BZ    READLOOP            NO, BRANCH
         CLI   2(R1),1             0 OR 1 (COMPLETE OR FIRST SEGMENT)
         BH    READLOOP            NO, DONT COUNT IT AS A RECORD
         LA    R14,1
         A     R14,KOUNTSP
         ST    R14,KOUNTSP         COUNT COMPLETE OR FIRST SEGMENT
         B     READLOOP
         SPACE
MINMAX   LH    R0,DCBLRECL-IHADCB(,R4)
         TM    DCBRECFM-IHADCB(R4),X'C0' RECFM U
         BO    GOTLEN
         LH    R0,0(,R1)           LENGTH FROM RDW
         TM    DCBRECFM-IHADCB(R4),X'40' RECFM V
         BO    GOTVAR
         LH    R0,DCBLRECL-IHADCB(,R4)
         TM    DCBRECFM-IHADCB(R4),X'10' RECFM FB
         BO    *+8
         LH    R0,DCBBLKSI-IHADCB(,R4) UNBLOCKED
         B     GOTLEN
GOTVAR   CLI   RDWKW+1,2           IF NORDW
         BNE   GOTLEN                 THEN
         SH    R0,=H'4'               DON'T COUNT 4 RDW BYTES
GOTLEN   LR    R15,R0
         LM    R0,R1,BYTES
         ALR   R1,R15
         BC    12,NOCARRY
         AL    R0,=F'1'
NOCARRY  STM   R0,R1,BYTES
         CH    R15,MAXLEN
         BNH   *+8
         STH   R15,MAXLEN
         CH    R15,MINLEN
         BNL   *+8
         STH   R15,MINLEN
         BR    R14
         SPACE
DYNEOD   EQU   *
         LTR   R7,R7               WERE WE READING SEGMENTS
         BZ    NOSWAP              NO, LEAVE COUNTERS UNCHANGED
         L     R14,KOUNT           YES, SWAP SEGMENT COUNT
         L     R15,KOUNTSP              WITH RECORD COUNT
         ST    R14,KOUNTSP
         ST    R15,KOUNT
NOSWAP   EQU   *
         CLI   OLDKW+1,1           IF OLD, USE OLD 7-DIGITS LOGIC
         BNE   NEWDISP
         LA    R1,MSGWK
         MVC   0(10,R1),=X'40206B2020206B202120'
         MVC   10(8,R1),=C' RECORDS'
         CLC   KOUNT,=F'1'
         BNE   *+8
         MVI   17(R1),C' '      CHANGE 'RECORDS' TO 'RECORD '
         L     R15,KOUNT
         CVD   R15,DOUBLE
         ED    0(10,R1),DOUBLE+4
         SPACE
SHIFLEFT CLI   0(R1),C' '       LEADING BLANK?
         BNE   SHIFTED          NO - READY TO ISSUE
         MVC   0(17,R1),1(R1)   SHIFT LEFT 1
         MVI   17(R1),C' '      BLANK LAST BYTE
         B     SHIFLEFT
SHIFTED  LTR   R7,R7            WERE WE READING SEGMENTS
         BZ    SHOWTOTL         NO, BRANCH
         MVC   18(10,R1),=X'40206B2020206B202120'
         MVC   28(9,R1),=C' SEGMENTS'
         L     R15,KOUNTSP
         CVD   R15,DOUBLE
         ED    18(10,R1),DOUBLE+4
         LA    R0,18+19
         B     *+8
SHOWTOTL LA    R0,18
         BAL   R14,PUTLINE
         B     NOMINMAX
NEWDISP  LA    R1,MSGWK
         L     R0,KOUNT
         CVD   R0,DOUBLE
         CLI   COMMAKW+1,2         IF NOCOMMAS
         BE    NOC1                  BRANCH
         MVC   0(15,R1),=X'4020206B2020206B2020206B202120'
         ED    0(15,R1),DOUBLE+2
         BAL   R14,SHIFT15
         B     NEW2
NOC1     MVC   0(12,R1),=X'402020202020202020202120'
         ED    0(12,R1),DOUBLE+2
         BAL   R14,SHIFT12
NEW2     MVC   0(10,R1),=C' RECORDS, '
         LA    R15,10(,R1)         POINT PAST SPACE AFTER COMMA
         C     R0,=F'1'            IF ONLY 1 RECORD
         BNE   NOT1
         MVC   0(9,R1),=C' RECORD, '
         LA    R15,9(,R1)          POINT PAST SPACE AFTER COMMA
NOT1     LR    R1,R15              POINT PAST SPACE AFTER COMMA
         CLI   TERSEKW+1,1
         BE    TERSOPT
         LTR   R0,R0               IF NOT ZERO RECORDS
         BNZ   NEWMORE               GO SHOW BYTES ETC
TERSOPT  BCTR  R15,0               DON'T SHOW SPACE AFTER COMMA
         BCTR  R15,0               DON'T SHOW COMMA
         LA    R1,MSGWK
         LR    R0,R15
         SR    R0,R1               COMPUTE LENGTH
         BAL   R14,PUTLINE
         B     NOMINMAX
NEWMORE  STM   R6,R7,SV67          NEED AN EVEN-ODD PAIR FOR DIVIDE
         LM    R6,R7,BYTES         GET TOTAL BYTES
*        LM    R6,R7,=A(1,0)       001 00000000 4,294,967,296
*        LM    R6,R7,=A(0,-1)      000 FFFFFFFF 4,294,967,295
*        LM    R6,R7,=A(499,-1)    1F3 FFFFFFFF 2,147,483,647,999
*        LM    R6,R7,=A(500,0)     1F4 00000000 2,147,483,648,000
         LTR   R6,R6               IS IT > 4G
         BNZ   UNP64               YES, BRANCH
         LTR   R7,R7               IS IT > 2G - 1
         BNM   UNP31               NO, BRANCH
*        THIS WILL CORRECTLY SHOW VALUES UP TO 2000 GIGABYTES MINUS 1
*        NUMBERS LARGER THAN THAT, WHEN DIVIDED BY 1000, HAVE
*        A QUOTIENT LARGER THAN HEX 7FFFFFFF (2 GB - 1) AND GET S0C9.
UNP64    STM   R6,R7,BYTES
         CLC   BYTES(8),=X'000001F3FFFFFFFF'
         BH    UNPHEX
         D     R6,=F'1000'         QUOTIENT SHOULD NOW BE 31 BITS
         CVD   R6,DOUBLE           REMAINDER 0-999
         OI    DOUBLE+7,X'0F'
         UNPK  16(3,R1),DOUBLE+6(2)
         MVI   15(R1),C','
         CVD   R7,DOUBLE           QUOTIENT
         LM    R6,R7,SV67          DONE WITH EVEN-ODD PAIR
         CLI   COMMAKW+1,2         IF NOCOMMAS
         BE    NOC2                  BRANCH
         MVC   0(15,R1),=X'4020206B2020206B2020206B202120'
         ED    0(15,R1),DOUBLE+2
         BAL   R14,SHIFT19
         B     REJOIN              REJOIN 31-BIT LOGIC
NOC2     MVC   0(12,R1),=X'402020202020202020202120'
         ED    0(12,R1),DOUBLE+2
         MVC   12(3,R1),16(R1)     LAST 3 DIGITS ALREADY UNPACKED
         MVC   15(4,R1),=CL4' '    ERASE COMMA AND 3 DIGITS
         BAL   R14,SHIFT15
         B     REJOIN              REJOIN 31-BIT LOGIC
UNPHEX   MVC   0(4,R1),=C'HEX'
         UNPK  4(9,R1),BYTES(5)
         UNPK  12(9,R1),BYTES+4(5)
         TR    4(16,R1),HEXTAB-240
         MVI   20(R1),C' '
         LA    R1,20(,R1)
         B     REJOIN
UNP31    LM    R6,R7,SV67          DONE WITH EVEN-ODD PAIR
         L     R0,BYTES+4
         CVD   R0,DOUBLE
         CLI   COMMAKW+1,2         IF NOCOMMAS
         BE    NOC3                  BRANCH
         MVC   0(15,R1),=X'4020206B2020206B2020206B202120'
         ED    0(15,R1),DOUBLE+2
         BAL   R14,SHIFT15
         B     REJOIN
NOC3     MVC   0(12,R1),=X'402020202020202020202120'
         ED    0(12,R1),DOUBLE+2
         BAL   R14,SHIFT12
REJOIN   MVC   0(8,R1),=C' BYTES, '
         LA    R1,8(,R1)
         LH    R0,MINLEN
         CVD   R0,DOUBLE
         MVC   0(6,R1),=X'402020202120'
         ED    0(6,R1),DOUBLE+5
         BAL   R14,SHIFT6
         MVC   0(11,R1),=C' SHORTEST, '
         LA    R1,11(,R1)
         LH    R0,MAXLEN
         CVD   R0,DOUBLE
         MVC   0(6,R1),=X'402020202120'
         ED    0(6,R1),DOUBLE+5
         BAL   R14,SHIFT6
         MVC   0(8,R1),=C' LONGEST'
         LA    R15,8(,R1)
         LA    R1,MSGWK
         LR    R0,R15
         SR    R0,R1               COMPUTE LENGTH
         BAL   R14,PUTLINE
NOMINMAX LA    R15,0
         B     NEXTDSN
         SPACE
SHIFT19  LA    R15,19(,R1)         POINT PAST LAST BYTE
SHIFT19L CLI   0(R1),C' '          LEADING BLANK?
         BNE   SHIFT15X            NO - READY TO ISSUE
         MVC   0(18,R1),1(R1)      SHIFT LEFT 1
         MVI   18(R1),C' '         BLANK LAST BYTE
         BCT   R15,SHIFT19L
SHIFT19X LR    R1,R15              POINT R1 TO BYTE AFTER LAST
         BR    R14
SHIFT15  LA    R15,15(,R1)         POINT PAST LAST BYTE
SHIFT15L CLI   0(R1),C' '          LEADING BLANK?
         BNE   SHIFT15X            NO - READY TO ISSUE
         MVC   0(14,R1),1(R1)      SHIFT LEFT 1
         MVI   14(R1),C' '         BLANK LAST BYTE
         BCT   R15,SHIFT15L
SHIFT15X LR    R1,R15              POINT R1 TO BYTE AFTER LAST
         BR    R14
SHIFT12  LA    R15,12(,R1)         POINT PAST LAST BYTE
SHIFT12L CLI   0(R1),C' '          LEADING BLANK?
         BNE   SHIFT15X            NO - READY TO ISSUE
         MVC   0(11,R1),1(R1)      SHIFT LEFT 1
         MVI   11(R1),C' '         BLANK LAST BYTE
         BCT   R15,SHIFT12L
SHIFT12X LR    R1,R15              POINT R1 TO BYTE AFTER LAST
         BR    R14
SHIFT6   LA    R15,6(,R1)          POINT PAST LAST BYTE
SHIFT6L  CLI   0(R1),C' '          LEADING BLANK?
         BNE   SHIFT6X             NO - READY TO ISSUE
         MVC   0(5,R1),1(R1)       SHIFT LEFT 1
         MVI   5(R1),C' '          BLANK LAST BYTE
         BCT   R15,SHIFT6L
SHIFT6X  LR    R1,R15              POINT R1 TO BYTE AFTER LAST
         BR    R14
         SPACE
NEXTD12  MVI   RETCODE+1,12
         SPACE
NEXTDSN  TM    STATUS,X'80'
         BZ    NOCLOSE
*        TM    DCBOFLGS,X'10'      IS IT OPEN?
         TM    DCBEFLG1,DCBEOPEN
         BZ    NOCLOSE             NO, BRANCH
         MVC   CLOSED(CLOSE31L),CLOSE31
         CLOSE ((R4)),MODE=31,MF=(E,CLOSED)
         NI    STATUS,255-X'80'    CLOSED
         DROP  R4                  IHADCB
NOCLOSE  EQU   *
         TM    STATUS,X'40'        FREE REQUIRED?
         BZ    NOFREE
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,DDSAVE
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-X'40'    UNALLOCATED
         DROP  R15                 DAPB18
NOFREE   EQU   *
         SPACE
         IKJRLSA MYANS
         SPACE
         CLI   RETCODE+1,0         IS RETCODE ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         SPACE
         LH    R15,RETCODE
         B     EXIT
         SPACE
************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************
         SPACE
CALLDAIR ST    R14,DAIRREGS
         L     R15,16
         TM    732(R15),X'80'     CVTDAIR
         BNO   DAIRLINK
         L     R15,732(,R15)
         BALR  R14,R15
         B     DAIRFINI
DAIRLINK EQU   *
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI L     R14,DAIRREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        DYNAMIC ALLOCATION FAILURE ROUTINE                *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
         USING DFDSECTD,R1
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         LA    R15,DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,DFIDP
         SLR   R15,R15
         ST    R15,DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
         DROP  R1                  DFDSECTD
         L     R14,MYDFREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTLINS
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE 1
ERRRECFM LA    R1,MSGRECFM
         LA    R0,L'MSGRECFM
         BAL   R14,PUTMSG
         B     NEXTD12
         SPACE
EXIT     LR    R2,R15              SAVE R15
         LR    R1,R10
         L     R0,@SIZE24
         FREEMAIN R,A=(1),LV=(0)
         SPACE
         LR    R1,R13
         L     R0,@SIZE31
         L     13,4(,13)
         FREEMAIN RU,A=(1),LV=(0),SP=1
         LR    R15,R2              RESTORE R15
         LM    0,12,20(13)
         L     14,12(,13)
         BR    14
         SPACE
************************************************************
*                                                          *
*        SYNAD EXIT                                        *
*                                                          *
************************************************************
         SPACE
*        THIS ROUTINE IS ENTERED DURING THE 'GET' MACRO
*        IF AN I/O ERROR OCCURS.
         SPACE
DYNSYNAD EQU   *
         SYNADAF ACSMETH=QSAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        GLUE FOR DCB EXITS                                *
*                                                          *
************************************************************
         SPACE
*        THESE 2 INSTRUCTIONS ARE COPIED TO ABENDXIT, BELOW THE LINE,
*        AND RUN THERE, NOT HERE. WHEN ABENDXIT IS ENTERED,
*        R15 CONTAINS THE ENTRY ADDRESS, THE ADDRESS OF ABENDXIT.
*        THEN USING R15 AS A BASE REGISTER, IT LOADS R15 FROM ABENDXAD,
*        WHICH CONTAINS THE ADDRESS OF DYNABEND ABOVE THE LINE,
*        WITH THE HIGH-ORDER BIT SET TO 1. THEN IT USES BSM TO
*        BRANCH TO DYNABEND IN 31-BIT MODE. THE ROUTINE AT
*        DYNABEND SHOULD RETURN USING 'BSM 0,R14'.
*
GLUE     L     R15,ABENDXAD-ABENDXIT(,R15)
         BSM   R14,R15  OLD MODE INTO R14 HI BIT, BRANCH TO R15 IN 31
GLUELEN  EQU   *-GLUE
         SPACE
*        SINCE ABENDXAD-ABENDEXIT IS IDENTICAL TO OPENEXAD-OPENEXIT
*        THE FOLLOWING IS NOT REALLY NEEDED.
         SPACE
GLUE2    L     R15,OPENEXAD-OPENEXIT(,R15)
         BSM   R14,R15  OLD MODE INTO R14 HI BIT, BRANCH TO R15 IN 31
GLUELEN2 EQU   *-GLUE2
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
OPEN31   OPEN  (0,),MODE=31,MF=L
OPEN31L  EQU   *-OPEN31
CLOSE31  CLOSE (0,),MODE=31,MF=L
CLOSE31L EQU   *-CLOSE31
         SPACE
         PRINT NOGEN
         SPACE
DYNDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +
               EODAD=0,SYNAD=0,EROPT=ACC,DCBE=0
DYNDCBL  EQU   *-DYNDCB
         SPACE
DYNDCBE  DCBE  RMODE31=BUFF,EODAD=1
DYNDCBEL EQU   *-DYNDCBE
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
MSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'
MSG04    DC    C'UNABLE TO OPEN DATASET'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
MSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+
               TIAL'
MSG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'
MSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'
MSG14    DC    C'FILENAME '
MSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '
MSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '
MSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '
MSGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
PCLADDR  DC    0D'0'               END OF CSECT
         SPACE
************************************************************
*                                                          *
*        PARSE PARAMETERS                                  *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
COUNTPCL RMODE 31
COUNTPCL IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
QUICKW   IKJKEYWD
         IKJNAME 'QUICK'
SPANKW   IKJKEYWD
         IKJNAME 'SPANNED'
TERSEKW  IKJKEYWD
         IKJNAME 'TERSE'
         IKJNAME 'NOTERSE'
OLDKW    IKJKEYWD
         IKJNAME 'OLD'
COMMAKW  IKJKEYWD
         IKJNAME 'COMMAS'
         IKJNAME 'NOCOMMAS'
RDWKW    IKJKEYWD
         IKJNAME 'RDW'
         IKJNAME 'NORDW'
         IKJENDP
         PRINT GEN
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA31  DSECT
         DS    18F                 REGISTER SAVEAREA
LINKAREA DS    2F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                  ADDRESS OF IKJPUTL
MYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F
DSNAME   DS    H,CL44
VOLSER   DS    CL6
LOCATEW  DS    0F
OBTAINW  DS    4F
BYTES    DS    2F
MINLEN   DS    H
MAXLEN   DS    H
SV67     DS    2F
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSGWK    DS    CL128
STATUS   DS    X
RETCODE  DS    H
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFREGS DS    F   USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
DOUBLE   DS    D
DDSAVE   DS    CL8
DAIRREGS DS    F
OPEND    DS    0F,(OPEN31L)X
CLOSED   DS    0F,(CLOSE31L)X
DYNDCBEW DS    0F,(DYNDCBEL)X
KOUNT    DS    F
KOUNTSP  DS    F
SYNADSW  DS    F
SYNADMSG DS    CL78
DEVDATA  DS    2F
         DS    0D
@DATA31L EQU   *-@DATA31
         SPACE
@DATA24  DSECT
SAVE24   DS    18F                USED BY IKJEHDEF
RDJFW    DS    F
MYIOPL24 DS    4F                 USED BY IKJEHDEF
MYECB24  DS    F
MYDFPB   DS    5F
DSNAME24 DS    H,CL44
DYNDCBW  DS    0D,XL(DYNDCBL)
DYNEXLST DS    2F
OPENEXIT DS    0H,(GLUELEN)X
OPENEXAD DS    F  X'80' + ADDRESS OF DYNOPENX
ABENDXIT DS    0H,(GLUELEN)X
ABENDXAD DS    F  X'80' + ADDRESS OF DYNABEND
JFCB     DS    0F,CL176
MYARL    DS    9F
         DS    0D
@DATA24L EQU   *-@DATA24
         SPACE
IHADCB   DSECT
DCBDCBE  DS    A
         DS    28XL1
DCBBFTEK DS    XL1
DCBEODAD DS    AL3
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBOFLGS DS    X
         DS    7XL1
         DS    X
DCBSYNAD DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2
         SPACE
         IHADCBE
         SPACE
         IKJCPPL
         SPACE 3
         IKJPPL
         SPACE
         IKJDFPB
         SPACE 2
         IKJUPT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJEFFDF DFDSECT=YES
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
